From 401d97d35d11768fa28a8df8860ae0133d54038b Mon Sep 17 00:00:00 2001
From: Jason Knopsnyder <jasonk@motorola.com>
Date: Thu, 17 Dec 2015 12:20:11 -0600
Subject: [PATCH 574/959] IKKRNBSP-3591: power: qpnp-smbcharger-mmi: Fix charge
 throttling

Fix charge rate throttling to function properly when parallel charging
is not supported.

Change-Id: I61ec4f4f25d10f624a3276e31cc0220ab308ad7d
Signed-off-by: Jason Knopsnyder <jasonk@motorola.com>
Reviewed-on: http://gerrit.mot.com/808187
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Kenneth Kessler <kennykessler@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
Reviewed-on: http://gerrit.mot.com/810418
---
 drivers/power/qpnp-smbcharger-mmi.c | 22 ++++++++++------------
 1 file changed, 10 insertions(+), 12 deletions(-)

diff --git a/drivers/power/qpnp-smbcharger-mmi.c b/drivers/power/qpnp-smbcharger-mmi.c
index e979b28fe0d..74a4b418406 100644
--- a/drivers/power/qpnp-smbcharger-mmi.c
+++ b/drivers/power/qpnp-smbcharger-mmi.c
@@ -2009,15 +2009,15 @@ static void smbchg_parallel_usb_disable(struct smbchg_chip *chip)
 	int pcurrent_max_ma = chip->parallel.current_max_ma;
 	struct power_supply *parallel_psy = get_parallel_psy(chip);
 
-	if (!parallel_psy)
-		return;
-	pr_smb(PR_STATUS, "disabling parallel charger\n");
-	taper_irq_en(chip, false);
-	chip->parallel.initial_aicl_ma = 0;
-	chip->parallel.current_max_ma = 0;
-	power_supply_set_current_limit(parallel_psy,
-				SUSPEND_CURRENT_MA * 1000);
-	power_supply_set_present(parallel_psy, false);
+	if (parallel_psy) {
+		pr_smb(PR_STATUS, "disabling parallel charger\n");
+		taper_irq_en(chip, false);
+		chip->parallel.initial_aicl_ma = 0;
+		chip->parallel.current_max_ma = 0;
+		power_supply_set_current_limit(parallel_psy,
+					       SUSPEND_CURRENT_MA * 1000);
+		power_supply_set_present(parallel_psy, false);
+	}
 
 	current_max_ma = chip->stepchg_current_ma;
 	current_max_ma =
@@ -2266,10 +2266,8 @@ static void smbchg_parallel_usb_check_ok(struct smbchg_chip *chip)
 {
 	struct power_supply *parallel_psy = get_parallel_psy(chip);
 
-	if (!parallel_psy)
-		return;
 	mutex_lock(&chip->parallel.lock);
-	if (smbchg_is_parallel_usb_ok(chip)) {
+	if ((parallel_psy) && (smbchg_is_parallel_usb_ok(chip))) {
 		smbchg_stay_awake(chip, PM_PARALLEL_CHECK);
 		schedule_delayed_work(
 			&chip->parallel_en_work,
-- 
2.11.0

