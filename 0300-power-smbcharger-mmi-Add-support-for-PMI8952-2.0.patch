From 042dbd3c8cd8522ea9c10cd79cfd50b3931942f8 Mon Sep 17 00:00:00 2001
From: Anirudh Ghayal <aghayal@codeaurora.org>
Date: Mon, 8 Jun 2015 16:44:19 +0530
Subject: [PATCH 300/959] power: smbcharger-mmi: Add support for PMI8952 2.0

Add a workaround (WA) flag variable to enable/disable
WA's across PMIC versions/revisions.

Implement the below changes for PMI8950 2.0
 - Disable the aicl de-glitch WA for PMI8950 2.0 and above
 - DT property to enable HVDCP 2.0 9V support

CRs-Fixed: 855103
Change-Id: Ia5c3ba9adbdc9c43adf55d6637b8d8ac6e517d57
Signed-off-by: Anirudh Ghayal <aghayal@codeaurora.org>
---
 drivers/power/qpnp-smbcharger-mmi.c | 91 +++++++++++++++++++++++++++++++++++++
 1 file changed, 91 insertions(+)

diff --git a/drivers/power/qpnp-smbcharger-mmi.c b/drivers/power/qpnp-smbcharger-mmi.c
index 30ff034e5c8..994dd027189 100644
--- a/drivers/power/qpnp-smbcharger-mmi.c
+++ b/drivers/power/qpnp-smbcharger-mmi.c
@@ -140,6 +140,7 @@ struct smbchg_chip {
 	bool				low_volt_dcin;
 	bool				vbat_above_headroom;
 	bool				force_aicl_rerun;
+	bool				enable_hvdcp_9v;
 	u8				original_usbin_allowance;
 	struct parallel_usb_cfg		parallel;
 	struct delayed_work		parallel_en_work;
@@ -183,6 +184,7 @@ struct smbchg_chip {
 	bool				aicl_complete;
 	bool				usb_ov_det;
 	bool				otg_pulse_skip_en;
+	u32				wa_flags;
 
 	/* jeita and temperature */
 	bool				batt_hot;
@@ -302,6 +304,16 @@ static char *version_str[] = {
 	[QPNP_SCHG_LITE]	= "SCHG_LITE",
 };
 
+enum pmic_subtype {
+	PMI8994		= 10,
+	PMI8950		= 17,
+};
+
+enum smbchg_wa {
+	SMBCHG_AICL_DEGLITCH_WA = BIT(0),
+	SMBCHG_HVDCP_9V_EN_WA	= BIT(1),
+};
+
 enum print_reason {
 	PR_REGISTER	= BIT(0),
 	PR_INTERRUPT	= BIT(1),
@@ -3536,6 +3548,9 @@ static void smbchg_aicl_deglitch_wa_check(struct smbchg_chip *chip)
 	u8 reg;
 	bool low_volt_chgr = true;
 
+	if (!(chip->wa_flags & SMBCHG_AICL_DEGLITCH_WA))
+		return;
+
 	if (!is_usb_present(chip) && !is_dc_present(chip)) {
 		pr_smb(PR_STATUS, "Charger removed\n");
 		smbchg_aicl_deglitch_wa_en(chip, false);
@@ -5065,6 +5080,11 @@ static inline int get_bpd(const char *name)
 	return -EINVAL;
 }
 
+#define HVDCP_ADAPTER_SEL_MASK		SMB_MASK(5, 4)
+#define HVDCP_ADAPTER_SEL_9V_BIT	BIT(4)
+#define HVDCP_AUTH_ALG_EN_BIT		BIT(6)
+#define CMD_APSD			0x41
+#define APSD_RERUN_BIT			BIT(0)
 #define REVISION1_REG			0x0
 #define DIG_MINOR			0
 #define DIG_MAJOR			1
@@ -5186,6 +5206,33 @@ static int smbchg_hw_init(struct smbchg_chip *chip)
 		return rc;
 	}
 
+	if (chip->enable_hvdcp_9v && (chip->wa_flags & SMBCHG_HVDCP_9V_EN_WA)) {
+		/* enable the 9V HVDCP configuration */
+		rc = smbchg_sec_masked_write(chip,
+			chip->usb_chgpth_base + TR_RID_REG,
+			HVDCP_AUTH_ALG_EN_BIT, HVDCP_AUTH_ALG_EN_BIT);
+		if (rc) {
+			dev_err(chip->dev, "Couldn't enable hvdcp_alg rc=%d\n",
+					rc);
+			return rc;
+		}
+
+		rc = smbchg_sec_masked_write(chip,
+			chip->usb_chgpth_base + CHGPTH_CFG,
+			HVDCP_ADAPTER_SEL_MASK, HVDCP_ADAPTER_SEL_9V_BIT);
+		if (rc) {
+			dev_err(chip->dev, "Couldn't set hvdcp config in chgpath_chg rc=%d\n",
+						rc);
+			return rc;
+		}
+		if (is_usb_present(chip)) {
+			rc = smbchg_masked_write(chip,
+				chip->usb_chgpth_base + CMD_APSD,
+				APSD_RERUN_BIT, APSD_RERUN_BIT);
+			if (rc)
+				pr_err("Unable to re-run APSD rc=%d\n", rc);
+		}
+	}
 	/*
 	 * set chg en by cmd register, set chg en by writing bit 1,
 	 * enable auto pre to fast, enable auto recharge by default.
@@ -5840,6 +5887,8 @@ static int smb_parse_dt(struct smbchg_chip *chip)
 		dev_info(chip->dev, "batt_therm workaround is enabled!\n");
 	chip->force_aicl_rerun = of_property_read_bool(node,
 					"qcom,force-aicl-rerun");
+	chip->enable_hvdcp_9v = of_property_read_bool(node,
+					"qcom,enable-hvdcp-9v");
 
 	/* parse the battery missing detection pin source */
 	rc = of_property_read_string(chip->spmi->dev.of_node,
@@ -6413,6 +6462,44 @@ static int create_debugfs_entries(struct smbchg_chip *chip)
 	return 0;
 }
 
+static int smbchg_wa_config(struct smbchg_chip *chip)
+{
+	struct pmic_revid_data *pmic_rev_id;
+	struct device_node *revid_dev_node;
+
+	revid_dev_node = of_parse_phandle(chip->spmi->dev.of_node,
+					"qcom,pmic-revid", 0);
+	if (!revid_dev_node) {
+		pr_err("Missing qcom,pmic-revid property - driver failed\n");
+		return -EINVAL;
+	}
+
+	pmic_rev_id = get_revid_data(revid_dev_node);
+	if (IS_ERR(pmic_rev_id)) {
+		pr_err("Unable to get pmic_revid rc=%ld\n",
+				PTR_ERR(pmic_rev_id));
+		return -EPROBE_DEFER;
+	}
+
+	switch (pmic_rev_id->pmic_subtype) {
+	case PMI8994:
+		chip->wa_flags |= SMBCHG_AICL_DEGLITCH_WA;
+	case PMI8950:
+		if (pmic_rev_id->rev4 < 2) /* PMI8950 1.0 */
+			chip->wa_flags |= SMBCHG_AICL_DEGLITCH_WA;
+		else	/* rev > PMI8950 v1.0 */
+			chip->wa_flags |= SMBCHG_HVDCP_9V_EN_WA;
+		break;
+	default:
+		pr_err("PMIC subtype %d not supported, WA flags not set\n",
+				pmic_rev_id->pmic_subtype);
+	}
+
+	pr_debug("wa_flags=0x%x\n", chip->wa_flags);
+
+	return 0;
+}
+
 static int smbchg_check_chg_version(struct smbchg_chip *chip)
 {
 	int rc;
@@ -6441,6 +6528,10 @@ static int smbchg_check_chg_version(struct smbchg_chip *chip)
 		break;
 	}
 
+	rc = smbchg_wa_config(chip);
+	if (rc)
+		pr_err("Charger WA flags not configured rc=%d\n", rc);
+
 	return rc;
 }
 
-- 
2.11.0

