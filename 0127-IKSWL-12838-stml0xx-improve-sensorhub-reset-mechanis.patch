From 25dfab8a91da776e767e396e1910a9912678d2b3 Mon Sep 17 00:00:00 2001
From: Jason Jae Hyun Koh <jason.koh@motorola.com>
Date: Fri, 1 May 2015 16:59:32 -0500
Subject: [PATCH 127/959] IKSWL-12838 stml0xx: improve sensorhub reset
 mechanism

A persistent host<->sensorhub communication failure can lead to a
continuous stream of resets. This is possible upon sensorhub HW failure,
or during factory/BOTA when a mismatch in the communication interface
occurs prior to new firmware flash.

Signed-off-by: Jason Jae Hyun Koh <jason.koh@motorola.com>
Change-Id: Iedc24f727395be6c28b2e50f3baa93ff84873e1f
Reviewed-on: http://gerrit.mot.com/744708
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Philip Lee <pglee@motorola.com>
Reviewed-by: Robert Wiegand <Robert.P.Wiegand@motorola.com>
Reviewed-by: Eric Hefner <ehefner@motorola.com>
Reviewed-by: Vladimir Karpovich <vkarpovich@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/misc/stml0xx/stml0xx_core.c     |  10 +-
 drivers/misc/stml0xx/stml0xx_flash.c    |   3 +
 drivers/misc/stml0xx/stml0xx_ioctl.c    |   2 +-
 drivers/misc/stml0xx/stml0xx_irq.c      |   5 +-
 drivers/misc/stml0xx/stml0xx_spi.c      | 159 ++++++++------------------------
 drivers/misc/stml0xx/stml0xx_wake_irq.c |  37 ++++++--
 include/linux/stml0xx.h                 |   8 ++
 7 files changed, 91 insertions(+), 133 deletions(-)

diff --git a/drivers/misc/stml0xx/stml0xx_core.c b/drivers/misc/stml0xx/stml0xx_core.c
index da002134a6d..67ca54b9a03 100644
--- a/drivers/misc/stml0xx/stml0xx_core.c
+++ b/drivers/misc/stml0xx/stml0xx_core.c
@@ -1082,7 +1082,7 @@ static int stml0xx_remove(struct spi_device *spi)
 static int stml0xx_resume(struct device *dev)
 {
 	static struct timespec ts;
-	static struct stml0xx_work_struct *stm_ws;
+	static struct stml0xx_delayed_work_struct *stm_ws;
 	struct stml0xx_data *ps_stml0xx = spi_get_drvdata(to_spi_device(dev));
 
 	get_monotonic_boottime(&ts);
@@ -1094,17 +1094,17 @@ static int stml0xx_resume(struct device *dev)
 
 	if (ps_stml0xx->pending_wake_work) {
 		stm_ws = kmalloc(
-			sizeof(struct stml0xx_work_struct),
+			sizeof(struct stml0xx_delayed_work_struct),
 			GFP_ATOMIC);
 		if (!stm_ws) {
 			dev_err(dev, "stml0xx_resume: unable to allocate work struct");
 			return 0;
 		}
-		INIT_WORK((struct work_struct *)stm_ws,
+		INIT_DELAYED_WORK((struct delayed_work *)stm_ws,
 			stml0xx_irq_wake_work_func);
 		stm_ws->ts_ns = ts_to_ns(ts);
-		queue_work(ps_stml0xx->irq_work_queue,
-			(struct work_struct *)stm_ws);
+		queue_delayed_work(ps_stml0xx->irq_work_queue,
+			(struct delayed_work *)stm_ws, 0);
 		ps_stml0xx->pending_wake_work = false;
 	}
 
diff --git a/drivers/misc/stml0xx/stml0xx_flash.c b/drivers/misc/stml0xx/stml0xx_flash.c
index 340196771a6..6cb2c19a3ef 100644
--- a/drivers/misc/stml0xx/stml0xx_flash.c
+++ b/drivers/misc/stml0xx/stml0xx_flash.c
@@ -297,6 +297,9 @@ int switch_stml0xx_mode(enum stm_mode mode)
 	int tries = COMMAND_RETRIES;
 	int rc = 0;
 
+	/* Reset wake-irq work delay */
+	stml0xx_misc_data->irq_wake_work_delay = 0;
+
 	stml0xx_misc_data->mode = mode;
 
 	/* Set to bootloader mode */
diff --git a/drivers/misc/stml0xx/stml0xx_ioctl.c b/drivers/misc/stml0xx/stml0xx_ioctl.c
index 4586a3ce578..5e3a5c124d9 100644
--- a/drivers/misc/stml0xx/stml0xx_ioctl.c
+++ b/drivers/misc/stml0xx/stml0xx_ioctl.c
@@ -678,7 +678,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		break;
 	case STML0XX_IOCTL_SET_FLUSH:
 		dev_dbg(&stml0xx_misc_data->spi->dev, "STML0XX_IOCTL_SET_FLUSH");
-		if (ps_stml0xx->mode == BOOTMODE)
+		if (!stml0xx_g_booted)
 			break;
 		if (copy_from_user(&handle, argp, sizeof(unsigned int))) {
 			dev_err(&stml0xx_misc_data->spi->dev,
diff --git a/drivers/misc/stml0xx/stml0xx_irq.c b/drivers/misc/stml0xx/stml0xx_irq.c
index 959bca3d63f..d99aaa5133a 100644
--- a/drivers/misc/stml0xx/stml0xx_irq.c
+++ b/drivers/misc/stml0xx/stml0xx_irq.c
@@ -56,7 +56,8 @@ irqreturn_t stml0xx_isr(int irq, void *dev)
 		sizeof(struct stml0xx_work_struct),
 		GFP_ATOMIC);
 	if (!stm_ws) {
-		dev_err(dev, "stml0xx_isr: unable to allocate work struct");
+		dev_err(&ps_stml0xx->spi->dev,
+			"stml0xx_isr: unable to allocate work struct");
 		return IRQ_HANDLED;
 	}
 
@@ -80,7 +81,7 @@ void stml0xx_irq_work_func(struct work_struct *work)
 
 	stml0xx_wake(ps_stml0xx);
 
-	if (ps_stml0xx->mode == BOOTMODE)
+	if (!stml0xx_g_booted)
 		goto EXIT;
 
 	if (ps_stml0xx->is_suspended)
diff --git a/drivers/misc/stml0xx/stml0xx_spi.c b/drivers/misc/stml0xx/stml0xx_spi.c
index 25bc2345342..d843722962d 100644
--- a/drivers/misc/stml0xx/stml0xx_spi.c
+++ b/drivers/misc/stml0xx/stml0xx_spi.c
@@ -43,8 +43,6 @@
 
 #include <linux/stml0xx.h>
 
-#define RESET_RETRIES		2
-
 int stml0xx_spi_sensorhub_ready(void)
 {
 	int timeout = SPI_SENSORHUB_TIMEOUT;
@@ -182,7 +180,7 @@ int stml0xx_spi_write_read_no_reset(unsigned char *tx_buf, int tx_len,
 
 	if (tries == SPI_RETRIES) {
 		dev_err(&stml0xx_misc_data->spi->dev,
-			"stml0xx_spi_write_read_no_reset spi failure");
+			"SPI write_read_no_reset error [%d]", ret);
 	}
 
 	return ret;
@@ -207,7 +205,7 @@ int stml0xx_spi_read_no_reset(unsigned char *buf, int len)
 
 	if (tries == SPI_RETRIES) {
 		dev_err(&stml0xx_misc_data->spi->dev,
-			"stml0xx_spi_read_no_reset spi failure");
+			"SPI read_no_reset error [%d]", ret);
 	}
 
 	return ret;
@@ -232,7 +230,7 @@ int stml0xx_spi_write_no_reset(unsigned char *buf, int len)
 
 	if (tries == SPI_RETRIES) {
 		dev_err(&stml0xx_misc_data->spi->dev,
-			"stml0xx_spi_write_no_reset spi failure");
+			"SPI write_no_reset error [%d]", ret);
 	}
 
 	return ret;
@@ -266,7 +264,6 @@ int stml0xx_spi_write_read(unsigned char *tx_buf, int tx_len,
 			   unsigned char *rx_buf, int rx_len)
 {
 	int tries;
-	int reset_retries;
 	int ret = -EIO;
 
 	if (stml0xx_misc_data->mode == BOOTMODE)
@@ -275,25 +272,15 @@ int stml0xx_spi_write_read(unsigned char *tx_buf, int tx_len,
 	if (tx_buf == NULL || rx_buf == NULL || tx_len == 0 || rx_len == 0)
 		return -EFAULT;
 
-	for (reset_retries = 0; reset_retries < RESET_RETRIES && ret < 0;
-	     reset_retries++) {
-		for (tries = 0; tries < SPI_RETRIES && ret < 0; tries++) {
-			ret =
-			    stml0xx_spi_write_read_no_retries(tx_buf, tx_len,
-							      rx_buf, rx_len);
-		}
-
-		if (ret < 0) {
-			stml0xx_reset(stml0xx_misc_data->pdata);
-			dev_err(&stml0xx_misc_data->spi->dev,
-				"stml0xx_spi_write_read SPI transfer error [%d], retries left [%d]",
-				ret, reset_retries);
-		}
+	for (tries = 0; tries < SPI_RETRIES && ret < 0; tries++) {
+		ret = stml0xx_spi_write_read_no_retries(tx_buf, tx_len,
+							rx_buf, rx_len);
 	}
 
-	if (reset_retries == RESET_RETRIES) {
+	if (ret < 0) {
+		stml0xx_reset(stml0xx_misc_data->pdata);
 		dev_err(&stml0xx_misc_data->spi->dev,
-			"stml0xx_spi_write_read spi failure");
+			"SPI write_read error [%d]", ret);
 	}
 
 	return ret;
@@ -323,7 +310,6 @@ static int stml0xx_spi_read_no_retries(unsigned char *buf, int len)
 int stml0xx_spi_read(unsigned char *buf, int len)
 {
 	int tries;
-	int reset_retries;
 	int ret = -EIO;
 
 	if (buf == NULL || len == 0)
@@ -332,22 +318,13 @@ int stml0xx_spi_read(unsigned char *buf, int len)
 	if (stml0xx_misc_data->mode == BOOTMODE)
 		return -EFAULT;
 
-	for (reset_retries = 0; reset_retries < RESET_RETRIES && ret < 0;
-	     reset_retries++) {
-		for (tries = 0; tries < SPI_RETRIES && ret < 0; tries++)
-			ret = stml0xx_spi_read_no_retries(buf, len);
+	for (tries = 0; tries < SPI_RETRIES && ret < 0; tries++)
+		ret = stml0xx_spi_read_no_retries(buf, len);
 
-		if (ret < 0) {
-			stml0xx_reset(stml0xx_misc_data->pdata);
-			dev_err(&stml0xx_misc_data->spi->dev,
-				"stml0xx_spi_read SPI transfer error [%d], retries left [%d]",
-				ret, reset_retries);
-		}
-	}
-
-	if (reset_retries == RESET_RETRIES) {
+	if (ret < 0) {
+		stml0xx_reset(stml0xx_misc_data->pdata);
 		dev_err(&stml0xx_misc_data->spi->dev,
-			"stml0xx_spi_read spi failure");
+			"SPI read error [%d]", ret);
 	}
 
 	return ret;
@@ -375,28 +352,18 @@ static int stml0xx_spi_write_no_retries(unsigned char *buf, int len)
 int stml0xx_spi_write(unsigned char *buf, int len)
 {
 	int tries;
-	int reset_retries;
 	int ret = -EIO;
 
 	if (stml0xx_misc_data->mode == BOOTMODE)
 		return -EFAULT;
 
-	for (reset_retries = 0; reset_retries < RESET_RETRIES && ret < 0;
-	     reset_retries++) {
-		for (tries = 0; tries < SPI_RETRIES && ret < 0; tries++)
-			ret = stml0xx_spi_write_no_retries(buf, len);
+	for (tries = 0; tries < SPI_RETRIES && ret < 0; tries++)
+		ret = stml0xx_spi_write_no_retries(buf, len);
 
-		if (ret < 0) {
-			stml0xx_reset(stml0xx_misc_data->pdata);
-			dev_err(&stml0xx_misc_data->spi->dev,
-				"stml0xx_spi_write SPI transfer error [%d], retries left [%d]",
-				ret, reset_retries);
-		}
-	}
-
-	if (reset_retries == RESET_RETRIES) {
+	if (ret < 0) {
+		stml0xx_reset(stml0xx_misc_data->pdata);
 		dev_err(&stml0xx_misc_data->spi->dev,
-			"stml0xx_spi_write spi failure");
+			"SPI write error [%d]", ret);
 	}
 
 	return ret;
@@ -474,7 +441,6 @@ int stml0xx_spi_send_write_reg_reset(unsigned char reg_type,
 			       uint8_t reset_allowed)
 {
 	int tries;
-	int reset_retries;
 	int ret = -EIO;
 
 	if (!reg_data || reg_size <= 0 ||
@@ -485,29 +451,16 @@ int stml0xx_spi_send_write_reg_reset(unsigned char reg_type,
 		return ret;
 	}
 
-	for (reset_retries = 0; reset_retries < RESET_RETRIES && ret < 0;
-	     reset_retries++) {
-		for (tries = 0; tries < SPI_RETRIES && ret < 0; tries++) {
-			ret =
-			    stml0xx_spi_send_write_reg_no_retries(reg_type,
-								  reg_data,
-								  reg_size);
-		}
-
-		if (ret < 0) {
-			dev_err(&stml0xx_misc_data->spi->dev,
-				"stml0xx_spi_send_write_reg_reset SPI transfer error [%d], retries left [%d]",
-				ret, reset_retries);
-			if (reset_allowed)
-				stml0xx_reset(stml0xx_misc_data->pdata);
-			else
-				break;
-		}
+	for (tries = 0; tries < SPI_RETRIES && ret < 0; tries++) {
+		ret = stml0xx_spi_send_write_reg_no_retries(reg_type,
+			reg_data, reg_size);
 	}
 
-	if (reset_retries == RESET_RETRIES) {
+	if (ret < 0) {
 		dev_err(&stml0xx_misc_data->spi->dev,
-			"stml0xx_spi_send_write_reg_reset spi failure");
+			"SPI write_reg_reset error [%d]", ret);
+		if (reset_allowed)
+			stml0xx_reset(stml0xx_misc_data->pdata);
 	}
 
 	return ret;
@@ -611,7 +564,6 @@ int stml0xx_spi_send_read_reg_reset(unsigned char reg_type,
 			      uint8_t reset_allowed)
 {
 	int tries;
-	int reset_retries;
 	int ret = -EIO;
 
 	if (!reg_data || reg_size <= 0 ||
@@ -622,31 +574,16 @@ int stml0xx_spi_send_read_reg_reset(unsigned char reg_type,
 		return ret;
 	}
 
-	for (reset_retries = 0; reset_retries < RESET_RETRIES && ret < 0;
-	     reset_retries++) {
-		for (tries = 0; tries < SPI_RETRIES && ret < 0; tries++) {
-			ret =
-				stml0xx_spi_send_read_reg_no_retries(
-						SPI_MSG_TYPE_READ_REG,
-						reg_type,
-						reg_data,
-						reg_size);
-		}
-
-		if (ret < 0) {
-			dev_err(&stml0xx_misc_data->spi->dev,
-				"stml0xx_spi_send_read_reg_reset SPI transfer error [%d], retries left [%d]",
-				ret, reset_retries);
-			if (reset_allowed)
-				stml0xx_reset(stml0xx_misc_data->pdata);
-			else
-				break;
-		}
+	for (tries = 0; tries < SPI_RETRIES && ret < 0; tries++) {
+		ret = stml0xx_spi_send_read_reg_no_retries(
+			SPI_MSG_TYPE_READ_REG, reg_type, reg_data, reg_size);
 	}
 
-	if (reset_retries == RESET_RETRIES) {
+	if (ret < 0) {
 		dev_err(&stml0xx_misc_data->spi->dev,
-			"stml0xx_spi_send_read_reg_reset spi failure");
+			"SPI read_reg_reset error [%d]", ret);
+		if (reset_allowed)
+			stml0xx_reset(stml0xx_misc_data->pdata);
 	}
 
 	return ret;
@@ -657,7 +594,6 @@ int stml0xx_spi_read_msg_data(enum sh_spi_msg spi_msg,
 				int buffer_size,
 				enum reset_option reset_allowed) {
 	int tries;
-	int reset_retries;
 	int ret = -EIO;
 
 	if (!data_buffer || buffer_size <= 0) {
@@ -667,34 +603,19 @@ int stml0xx_spi_read_msg_data(enum sh_spi_msg spi_msg,
 		return ret;
 	}
 
-	for (reset_retries = 0; reset_retries < RESET_RETRIES && ret < 0;
-	     reset_retries++) {
-		for (tries = 0; tries < SPI_RETRIES && ret < 0; tries++) {
-			ret =
-				stml0xx_spi_send_read_reg_no_retries(spi_msg,
-								0,
-								data_buffer,
-								buffer_size);
-		}
-
-		if (ret < 0) {
-			dev_err(&stml0xx_misc_data->spi->dev,
-				"stml0xx_spi_read_msg_data SPI transfer error [%d], retries left [%d]",
-				ret, reset_retries);
-			if (reset_allowed)
-				stml0xx_reset(stml0xx_misc_data->pdata);
-			else
-				break;
-		}
+	for (tries = 0; tries < SPI_RETRIES && ret < 0; tries++) {
+		ret = stml0xx_spi_send_read_reg_no_retries(spi_msg,
+				0, data_buffer, buffer_size);
 	}
 
-	if (reset_retries == RESET_RETRIES) {
+	if (ret < 0) {
 		dev_err(&stml0xx_misc_data->spi->dev,
-			"stml0xx_spi_read_msg_data spi failure");
+			"SPI read_msg_data error [%d]", ret);
+		if (reset_allowed)
+			stml0xx_reset(stml0xx_misc_data->pdata);
 	}
 
 	return ret;
-
 }
 
 void stml0xx_spi_swap_bytes(unsigned char *data, int size)
diff --git a/drivers/misc/stml0xx/stml0xx_wake_irq.c b/drivers/misc/stml0xx/stml0xx_wake_irq.c
index 7b3636aed84..61eb4326a54 100644
--- a/drivers/misc/stml0xx/stml0xx_wake_irq.c
+++ b/drivers/misc/stml0xx/stml0xx_wake_irq.c
@@ -65,7 +65,7 @@ enum headset_state_t Headset_State = SH_HEADSET_REMOVED;
 irqreturn_t stml0xx_wake_isr(int irq, void *dev)
 {
 	static struct timespec ts;
-	static struct stml0xx_work_struct *stm_ws;
+	static struct stml0xx_delayed_work_struct *stm_ws;
 	struct stml0xx_data *ps_stml0xx = dev;
 	get_monotonic_boottime(&ts);
 
@@ -74,17 +74,35 @@ irqreturn_t stml0xx_wake_isr(int irq, void *dev)
 
 	wake_lock_timeout(&ps_stml0xx->wake_sensor_wakelock, HZ);
 	stm_ws = kmalloc(
-		sizeof(struct stml0xx_work_struct),
+		sizeof(struct stml0xx_delayed_work_struct),
 		GFP_ATOMIC);
 	if (!stm_ws) {
-		dev_err(dev, "stml0xx_wake_isr: unable to allocate work struct");
+		dev_err(&ps_stml0xx->spi->dev,
+			"stml0xx_wake_isr: unable to allocate work struct");
 		return IRQ_HANDLED;
 	}
 
-	INIT_WORK((struct work_struct *)stm_ws, stml0xx_irq_wake_work_func);
+	INIT_DELAYED_WORK((struct delayed_work *)stm_ws,
+				stml0xx_irq_wake_work_func);
 	stm_ws->ts_ns = ts_to_ns(ts);
 
-	queue_work(ps_stml0xx->irq_work_queue, (struct work_struct *)stm_ws);
+	if (stml0xx_g_booted) {
+		/* No delay if boot completed */
+		ps_stml0xx->irq_wake_work_delay = 0;
+	} else if (ps_stml0xx->irq_wake_work_delay == 0) {
+		/* First interrupt prior to boot complete */
+		ps_stml0xx->irq_wake_work_delay = 1;
+	} else {
+		/* Increase delay, set within allowed min/max range */
+		ps_stml0xx->irq_wake_work_delay =
+			clamp(ps_stml0xx->irq_wake_work_delay * 2,
+					100U, 600000U);
+	}
+
+	queue_delayed_work(ps_stml0xx->irq_work_queue,
+			(struct delayed_work *)stm_ws,
+			msecs_to_jiffies(ps_stml0xx->irq_wake_work_delay));
+
 	return IRQ_HANDLED;
 }
 
@@ -93,7 +111,8 @@ void stml0xx_irq_wake_work_func(struct work_struct *work)
 	int err;
 	unsigned long irq_status;
 	u32 irq2_status;
-	struct stml0xx_work_struct *stm_ws = (struct stml0xx_work_struct *)work;
+	struct stml0xx_delayed_work_struct *stm_ws =
+			(struct stml0xx_delayed_work_struct *)work;
 	struct stml0xx_data *ps_stml0xx = stml0xx_misc_data;
 	unsigned char buf[SPI_MSG_SIZE];
 
@@ -136,6 +155,12 @@ void stml0xx_irq_wake_work_func(struct work_struct *work)
 	    (buf[WAKE_IRQ_IDX_ALGO_STATUS_MED] << 8) |
 		buf[WAKE_IRQ_IDX_ALGO_STATUS_LO];
 
+	/* If SH not fully booted, filter on relevant msgs only */
+	if (!stml0xx_g_booted) {
+		irq_status &= (M_LOG_MSG | M_INIT_COMPLETE | M_HUB_RESET);
+		irq2_status = 0;
+	}
+
 	/* Check all other status bits */
 	if (irq_status & M_PROXIMITY) {
 		stml0xx_as_data_buffer_write(
diff --git a/include/linux/stml0xx.h b/include/linux/stml0xx.h
index 7fd2ec6aacb..f927f49f7df 100644
--- a/include/linux/stml0xx.h
+++ b/include/linux/stml0xx.h
@@ -676,6 +676,7 @@ struct stml0xx_data {
 	atomic_t enabled;
 	int irq;
 	int irq_wake;
+	unsigned int irq_wake_work_delay;	/* in ms */
 	unsigned int current_addr;
 	enum stm_mode mode;
 	unsigned char intp_mask;
@@ -718,6 +719,13 @@ struct stml0xx_work_struct {
 	uint64_t ts_ns;
 };
 
+struct stml0xx_delayed_work_struct {
+	/* Base struct */
+	struct delayed_work ws;
+	/* Timestamp in nanoseconds */
+	uint64_t ts_ns;
+};
+
 /* per algo config, request, and event registers */
 struct stml0xx_algo_info_t {
 	unsigned short config_bit;
-- 
2.11.0

