From e8e51ea8a0245ee80da7cfc90b7b5b7fa51dec80 Mon Sep 17 00:00:00 2001
From: Dmitry Ornatsky <cdo021c@motorola.com>
Date: Wed, 4 Nov 2015 17:56:08 -0600
Subject: [PATCH 454/959] IKKRNBSP-3478 misc: utags: make utag directory
 dt-configurable

Several locations of utags need to be able to select names
for the interface directory. Leave /proc/config as default
Check name pointer in open utag. This causes crash if
optional backup is not provided.

Change-Id: I9f85dae86daf1ed77ca8a3d4b4f8b37e53de96f6
Signed-off-by: Dmitry Ornatsky <cdo021c@motorola.com>
Reviewed-on: http://gerrit.mot.com/797557
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 Documentation/devicetree/bindings/misc/utags.txt |  2 ++
 drivers/misc/utag/utags.c                        | 20 +++++++++++++++-----
 2 files changed, 17 insertions(+), 5 deletions(-)

diff --git a/Documentation/devicetree/bindings/misc/utags.txt b/Documentation/devicetree/bindings/misc/utags.txt
index 3478dd13e47..427da504d5b 100644
--- a/Documentation/devicetree/bindings/misc/utags.txt
+++ b/Documentation/devicetree/bindings/misc/utags.txt
@@ -5,12 +5,14 @@ Required properties:
 - mmi,utoags-main	: string, path to the utags main partition
 Optional properties:
 - mmi,utags-backup	: string, path to the utags backup partition
+- mmi,dir-name		: string, override for directory in procfs root to be used
 
 Example:
 
 utags@1 {
 	compatible = "mmi,utags";
 	status = "okay";
+	mmi,dir-name = "hwid";
 	mmi,utags-main = "/dev/block/bootdevice/by-name/utags";
 	mmi,utags-backup = "/dev/block/bootdevice/by-name/utagsBackup";
 };
diff --git a/drivers/misc/utag/utags.c b/drivers/misc/utag/utags.c
index 40d96753cca..249faae0742 100644
--- a/drivers/misc/utag/utags.c
+++ b/drivers/misc/utag/utags.c
@@ -41,6 +41,7 @@
 #define TO_SECT_SIZE(n)     (((n) + 511) & ~511)
 #define UTAGS_MAX_DEFERRALS 5
 #define DRVNAME "utags"
+#define DEFAULT_ROOT "config"
 
 static const struct file_operations utag_fops;
 struct ctrl;
@@ -122,6 +123,7 @@ struct ctrl {
 	uint32_t csum;
 	struct list_head dir_list;
 	struct list_head node_list;
+	const char *dir_name;
 };
 
 static void build_utags_directory(struct ctrl *ctrl);
@@ -139,6 +141,9 @@ static int open_utags(struct blkdev *cb)
 	if (cb->filep)
 		return 0;
 
+	if (!cb->name)
+		return -EIO;
+
 	cb->filep = filp_open(cb->name, O_RDWR|O_SYNC, 0600);
 	if (IS_ERR_OR_NULL(cb->filep)) {
 		int rc = PTR_ERR(cb->filep);
@@ -1033,7 +1038,12 @@ static int utags_dt_init(struct platform_device *pdev)
 	if (rc)
 		pr_err("%s backup storage path not provided\n", __func__);
 
-	return rc;
+	ctrl->dir_name = DEFAULT_ROOT;
+	rc = of_property_read_string(node, "mmi,dir-name", &ctrl->dir_name);
+	if (!rc)
+		pr_info("%s utag dir override %s\n", __func__, ctrl->dir_name);
+
+	return 0;
 }
 #else
 static int utags_dt_init(struct platform_device *pdev) { return -EINVAL; }
@@ -1087,7 +1097,7 @@ static int utags_probe(struct platform_device *pdev)
 	else
 		open_utags(&ctrl->backup);
 
-	ctrl->root = proc_mkdir("config", NULL);
+	ctrl->root = proc_mkdir(ctrl->dir_name, NULL);
 	if (!ctrl->root) {
 		pr_err("%s Failed to create dir entry\n", __func__);
 		return -EIO;
@@ -1095,14 +1105,14 @@ static int utags_probe(struct platform_device *pdev)
 
 	if (!proc_create_data("reload", 0600, ctrl->root, &reload_fops, ctrl)) {
 		pr_err("%s Failed to create reload entry\n", __func__);
-		remove_proc_entry("config", NULL);
+		remove_proc_entry(ctrl->dir_name, NULL);
 		return -EIO;
 	}
 
 	if (!proc_create_data("delete", 0600, ctrl->root, &del_fops, ctrl)) {
 		pr_err("%s Failed to create reload entry\n", __func__);
 		remove_proc_entry("reload", ctrl->root);
-		remove_proc_entry("config", NULL);
+		remove_proc_entry(ctrl->dir_name, NULL);
 		return -EIO;
 	}
 
@@ -1119,7 +1129,7 @@ static int utags_remove(struct platform_device *pdev)
 	clear_utags_directory(ctrl);
 	remove_proc_entry("reload", ctrl->root);
 	remove_proc_entry("delete", ctrl->root);
-	remove_proc_entry("config", NULL);
+	remove_proc_entry(ctrl->dir_name, NULL);
 	return 0;
 }
 
-- 
2.11.0

