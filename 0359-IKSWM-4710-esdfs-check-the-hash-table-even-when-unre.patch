From 7b90cc58792e846a26f17a235df175149838316a Mon Sep 17 00:00:00 2001
From: "Russ W. Knize" <Russ.Knize@motorola.com>
Date: Tue, 29 Sep 2015 14:48:07 -0500
Subject: [PATCH 359/959] IKSWM-4710: esdfs: check the hash table, even when
 unrestricted

Even through the hash table check is not needed for sdcard_rw on portable
storage, we still need to look for system apps that have media_rw so that
they are always granted write access.

Change-Id: I6ad2b1ef90cb5366ee95f39f28009780605538d7
Signed-off-by: Russ Knize <Russ.Knize@motorola.com>
Reviewed-on: http://gerrit.mot.com/787063
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Sheng-Zhe Zhao <a18689@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 fs/esdfs/derive.c | 46 ++++++++++++++++++++++++----------------------
 1 file changed, 24 insertions(+), 22 deletions(-)

diff --git a/fs/esdfs/derive.c b/fs/esdfs/derive.c
index 5a3e0c75017..7f56bd93173 100644
--- a/fs/esdfs/derive.c
+++ b/fs/esdfs/derive.c
@@ -529,17 +529,12 @@ int esdfs_check_derived_permission(struct inode *inode, int mask)
 	unsigned access = 0;
 
 	/*
-	 * If we don't need to restrict access based on app GIDs or/and confine
-	 * writes to outside of the Android/... tree, we can skip some or all
-	 * of this complexity.
+	 * If we don't need to restrict access based on app GIDs and confine
+	 * writes to outside of the Android/... tree, we can skip all of this.
 	 */
-	if (!ESDFS_RESTRICT_PERMS(ESDFS_SB(inode->i_sb))) {
-		/* If we don't need to confine, we're done. */
-		if (!test_opt(ESDFS_SB(inode->i_sb), DERIVE_CONFINE))
+	if (!ESDFS_RESTRICT_PERMS(ESDFS_SB(inode->i_sb)) &&
+	    !test_opt(ESDFS_SB(inode->i_sb), DERIVE_CONFINE))
 			return 0;
-		/* If we do, we can still skip the hash lookup. */
-		access = HAS_SDCARD_RW;
-	}
 
 	cred = current_cred();
 	appid = cred->uid % PKG_APPID_PER_USER;
@@ -554,20 +549,27 @@ int esdfs_check_derived_permission(struct inode *inode, int mask)
 	 * know how to use extended attributes, we have to double-check write
 	 * requests against the list of apps that have been granted sdcard_rw.
 	 */
-	if (!access) {
-		mutex_lock(&package_list_lock);
-		hash_for_each_possible(access_list_hash, package,
-				       access_node, appid) {
-			if (package->appid == appid) {
-				pr_debug("esdfs: %s: found appid %u, access: %u\n",
-					__func__, package->appid,
-					package->access);
-				access = package->access;
-				break;
-			}
+	mutex_lock(&package_list_lock);
+	hash_for_each_possible(access_list_hash, package,
+			       access_node, appid) {
+		if (package->appid == appid) {
+			pr_debug("esdfs: %s: found appid %u, access: %u\n",
+				__func__, package->appid,
+				package->access);
+			access = package->access;
+			break;
 		}
-		mutex_unlock(&package_list_lock);
 	}
+	mutex_unlock(&package_list_lock);
+
+	/*
+	 * If we aren't restricting based on GID, always grant what was formerly
+	 * "sdcard_rw".  The storage view containment has already effectively
+	 * done the check for read-only SD card access, so we know that this app
+	 * has write access.
+	 */
+	if (!ESDFS_RESTRICT_PERMS(ESDFS_SB(inode->i_sb)))
+		access |= HAS_SDCARD_RW;
 
 	/*
 	 * Grant access to media_rw holders (they can access the source anyway).
@@ -578,7 +580,7 @@ int esdfs_check_derived_permission(struct inode *inode, int mask)
 	/*
 	 * Grant access to sdcard_rw holders, unless we are in unified mode
 	 * and we are trying to write to the protected /Android tree or to
-	 * create files in the root.
+	 * create files in the root (aka, "confined" access).
 	 */
 	if ((access & HAS_SDCARD_RW) &&
 	    (!test_opt(ESDFS_SB(inode->i_sb), DERIVE_UNIFIED) ||
-- 
2.11.0

