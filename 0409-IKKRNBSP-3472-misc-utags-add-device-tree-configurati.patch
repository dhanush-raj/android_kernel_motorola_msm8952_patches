From ce7ed8f538cb709d326043650d12923cd2459b31 Mon Sep 17 00:00:00 2001
From: Dmitry Ornatsky <cdo021c@motorola.com>
Date: Wed, 21 Oct 2015 16:41:41 -0500
Subject: [PATCH 409/959] IKKRNBSP-3472 misc: utags: add device tree
 configuration

Enable utags module to use device tree based configuration.
This will remove utag paths from the kernel cmd line.
We also do not need to force device registration in init any more.

Change-Id: Ic581a9acc765d03b9caf750e359b444876f3df3a
Signed-off-by: Dmitry Ornatsky <cdo021c@motorola.com>
Reviewed-on: http://gerrit.mot.com/794385
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Yin-Jun Chen <a7301c@motorola.com>
---
 Documentation/devicetree/bindings/misc/utags.txt | 16 +++++++
 drivers/misc/utag/utags.c                        | 60 +++++++++++++++++-------
 2 files changed, 58 insertions(+), 18 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/misc/utags.txt

diff --git a/Documentation/devicetree/bindings/misc/utags.txt b/Documentation/devicetree/bindings/misc/utags.txt
new file mode 100644
index 00000000000..3478dd13e47
--- /dev/null
+++ b/Documentation/devicetree/bindings/misc/utags.txt
@@ -0,0 +1,16 @@
+MMI utags driver provides procfs access to the utags partition.
+
+Required properties:
+- compatible		: string should be "mmi,utags"
+- mmi,utoags-main	: string, path to the utags main partition
+Optional properties:
+- mmi,utags-backup	: string, path to the utags backup partition
+
+Example:
+
+utags@1 {
+	compatible = "mmi,utags";
+	status = "okay";
+	mmi,utags-main = "/dev/block/bootdevice/by-name/utags";
+	mmi,utags-backup = "/dev/block/bootdevice/by-name/utagsBackup";
+};
diff --git a/drivers/misc/utag/utags.c b/drivers/misc/utag/utags.c
index f268269c71a..443ca1e33f9 100644
--- a/drivers/misc/utag/utags.c
+++ b/drivers/misc/utag/utags.c
@@ -31,6 +31,7 @@
 #include <linux/unistd.h>
 #include <linux/slab.h>
 #include <linux/vmalloc.h>
+#include <linux/of.h>
 
 #define MAX_UTAG_SIZE 1024
 #define MAX_UTAG_NAME 32
@@ -110,7 +111,7 @@ struct dir_node {
 LIST_HEAD(dir_list);
 
 struct blkdev {
-	char name[255];
+	const char *name;
 	struct file *filep;
 	size_t size;
 };
@@ -124,11 +125,6 @@ static struct ctrl {
 	uint32_t csum;
 } ctrl;
 
-module_param_string(blkdev, ctrl.main.name, sizeof(ctrl.main.name), 0664);
-MODULE_PARM_DESC(blkdev, "Full path for utags partition");
-module_param_string(backup, ctrl.backup.name, sizeof(ctrl.backup.name), 0664);
-MODULE_PARM_DESC(backup, "Full path for utags backup partition");
-
 static void build_utags_directory(void);
 static void clear_utags_directory(void);
 
@@ -911,6 +907,30 @@ static void build_utags_directory(void)
 	ctrl.reload = UTAG_STATUS_LOADED;
 }
 
+#ifdef CONFIG_OF
+static int utags_dt_init(struct platform_device *pdev)
+{
+	int rc;
+	struct device_node *node = pdev->dev.of_node;
+
+	rc = of_property_read_string(node, "mmi,main-utags",
+		&ctrl.main.name);
+	if (rc) {
+		pr_err("%s storage path not provided\n", __func__);
+		return -EIO;
+	}
+
+	rc = of_property_read_string(node, "mmi,backup-utags",
+		&ctrl.backup.name);
+	if (rc)
+		pr_err("%s backup storage path not provided\n", __func__);
+
+	return rc;
+}
+#else
+static int utags_dt_init(struct platform_device *pdev) { return -EINVAL; }
+#endif
+
 static void clear_utags_directory(void)
 {
 	struct proc_node *node, *s = NULL;
@@ -933,10 +953,11 @@ static int utags_probe(struct platform_device *pdev)
 	int rc;
 	static int retry;
 
-	if (!ctrl.main.name[0]) {
-		pr_err("%s storage path not provided\n", __func__);
+	ctrl.pdev = pdev;
+
+	rc = utags_dt_init(pdev);
+	if (rc)
 		return -EIO;
-	}
 
 	rc = open_utags(&ctrl.main);
 	if ((rc == -ENOENT) && (++retry < UTAGS_MAX_DEFERRALS))
@@ -944,7 +965,7 @@ static int utags_probe(struct platform_device *pdev)
 	else if (rc)
 		pr_err("%s failed to open, try reload later\n", __func__);
 
-	if (!ctrl.backup.name[0])
+	if (!ctrl.backup.name)
 		pr_err("%s backup storage path not provided\n", __func__);
 	else
 		open_utags(&ctrl.backup);
@@ -974,24 +995,27 @@ static int utags_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#ifdef CONFIG_OF
+static struct of_device_id utags_match_table[] = {
+	{	.compatible = "mmi,utags",
+	},
+	{}
+};
+#endif
+
 static struct platform_driver utags_driver = {
 	.probe = utags_probe,
 	.remove = utags_remove,
 	.driver = {
 		.name = DRVNAME,
-		.bus = &platform_bus_type
+		.bus = &platform_bus_type,
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(utags_match_table),
 	},
 };
 
 static int __init utags_init(void)
 {
-	ctrl.pdev = platform_device_register_simple(DRVNAME, -1, NULL, 0);
-	if (IS_ERR(ctrl.pdev)) {
-		int ret = PTR_ERR(ctrl.pdev);
-
-		pr_err("%s device register failed ret %d\n", __func__, ret);
-		return ret;
-	}
 	return platform_driver_register(&utags_driver);
 }
 
-- 
2.11.0

