From 22e4c2f43ec03ef4d2bf01b531a8ffc598605ca3 Mon Sep 17 00:00:00 2001
From: Jason Jae Hyun Koh <jason.koh@motorola.com>
Date: Fri, 19 Sep 2014 11:57:24 -0500
Subject: [PATCH 075/959] IKLOCSEN-1697 drivers: misc: stml0xx: delay low power
 mode detection

Low power mode detection fails if the sensorhub isn't fully booted.
This is now important as some delays are being added to sensorhub init.

Change-Id: I5b1f8f1252e2a0f73a7b3b4c065042861d3fe840
Signed-off-by: Jason Jae Hyun Koh <jason.koh@motorola.com>
Reviewed-on: http://gerrit.mot.com/672422
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Robert Wiegand <Robert.P.Wiegand@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/misc/stml0xx/stml0xx_core.c     |  2 +-
 drivers/misc/stml0xx/stml0xx_flash.c    |  5 +--
 drivers/misc/stml0xx/stml0xx_ioctl.c    | 69 +++++++++++++++++++--------------
 drivers/misc/stml0xx/stml0xx_reset.c    |  4 +-
 drivers/misc/stml0xx/stml0xx_wake_irq.c |  1 +
 include/linux/stml0xx.h                 |  2 +-
 6 files changed, 46 insertions(+), 37 deletions(-)

diff --git a/drivers/misc/stml0xx/stml0xx_core.c b/drivers/misc/stml0xx/stml0xx_core.c
index c4be7089c2d..b2cd90bf4f8 100644
--- a/drivers/misc/stml0xx/stml0xx_core.c
+++ b/drivers/misc/stml0xx/stml0xx_core.c
@@ -137,7 +137,7 @@ void stml0xx_sleep(struct stml0xx_data *ps_stml0xx)
 	}
 }
 
-void stml0xx_detect_lowpower_mode(unsigned char *cmdbuff)
+void stml0xx_detect_lowpower_mode(void)
 {
 	int err;
 	uint8_t buf[STML0XX_POWER_REG_SIZE] = {0};
diff --git a/drivers/misc/stml0xx/stml0xx_flash.c b/drivers/misc/stml0xx/stml0xx_flash.c
index 46de616d7b0..e79fd84dcc7 100644
--- a/drivers/misc/stml0xx/stml0xx_flash.c
+++ b/drivers/misc/stml0xx/stml0xx_flash.c
@@ -281,10 +281,6 @@ int stml0xx_get_version(struct stml0xx_data *ps_stml0xx)
 		rc = (int)fw_ver;
 		dev_err(&stml0xx_misc_data->spi->dev,
 			"STML0XX version %02x", fw_ver);
-		if (fw_ver > 0)
-			stml0xx_g_booted = 1;
-		else
-			stml0xx_g_booted = 0;
 	}
 	stml0xx_sleep(ps_stml0xx);
 	return rc;
@@ -304,6 +300,7 @@ int switch_stml0xx_mode(enum stm_mode mode)
 	if (mode == BOOTMODE) {
 		/* Set boot pin */
 		gpio_set_value(pdata->gpio_bslen, (bslen_pin_active_value));
+		stml0xx_g_booted = 0;
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"Switching to boot mode");
 		msleep(stml0xx_spi_retry_delay);
diff --git a/drivers/misc/stml0xx/stml0xx_ioctl.c b/drivers/misc/stml0xx/stml0xx_ioctl.c
index 681aa2c7018..b4a5258a503 100644
--- a/drivers/misc/stml0xx/stml0xx_ioctl.c
+++ b/drivers/misc/stml0xx/stml0xx_ioctl.c
@@ -131,7 +131,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case STML0XX_IOCTL_GET_VERSION:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_GET_VERSION");
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted)
 			err = stml0xx_get_version(ps_stml0xx);
 		else
 			err = -EBUSY;
@@ -145,11 +145,12 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			err = -EFAULT;
 			break;
 		}
-		buf[0] = delay;
 		stml0xx_g_acc_delay = delay;
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted) {
+			buf[0] = delay;
 			err = stml0xx_spi_send_write_reg(ACCEL_UPDATE_RATE,
 							buf, 1);
+		}
 		break;
 	case STML0XX_IOCTL_SET_ACC2_DELAY:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
@@ -160,11 +161,12 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			err = -EFAULT;
 			break;
 		}
-		buf[0] = delay;
 		stml0xx_g_acc2_delay = delay;
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted) {
+			buf[0] = delay;
 			err = stml0xx_spi_send_write_reg(ACCEL2_UPDATE_RATE,
 							buf, 1);
+		}
 		break;
 	case STML0XX_IOCTL_SET_MAG_DELAY:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
@@ -176,11 +178,12 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			err = -EFAULT;
 			break;
 		}
-		buf[0] = delay;
 		stml0xx_g_mag_delay = delay;
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted) {
+			buf[0] = delay;
 			err = stml0xx_spi_send_write_reg(MAG_UPDATE_RATE,
 							buf, 1);
+		}
 		break;
 	case STML0XX_IOCTL_SET_GYRO_DELAY:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
@@ -192,11 +195,12 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			err = -EFAULT;
 			break;
 		}
-		buf[0] = delay;
 		stml0xx_g_gyro_delay = delay;
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted) {
+			buf[0] = delay;
 			err = stml0xx_spi_send_write_reg(GYRO_UPDATE_RATE,
 							buf, 1);
+		}
 		break;
 	case STML0XX_IOCTL_SET_PRES_DELAY:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
@@ -208,11 +212,12 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			err = -EFAULT;
 			break;
 		}
-		buf[0] = delay;
 		stml0xx_g_baro_delay = delay;
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted) {
+			buf[0] = delay;
 			err = stml0xx_spi_send_write_reg(PRESSURE_UPDATE_RATE,
 							buf, 1);
+		}
 		break;
 	case STML0XX_IOCTL_SET_SENSORS:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
@@ -225,7 +230,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		}
 		stml0xx_g_nonwake_sensor_state = (buf[2] << 16)
 		    | (buf[1] << 8) | buf[0];
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted)
 			err = stml0xx_spi_send_write_reg(NONWAKESENSOR_CONFIG,
 							 buf, 3);
 		dev_dbg(&stml0xx_misc_data->spi->dev, "Sensor enable = 0x%lx",
@@ -234,7 +239,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case STML0XX_IOCTL_GET_SENSORS:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_GET_SENSORS");
-		if (ps_stml0xx->mode != BOOTMODE) {
+		if (stml0xx_g_booted) {
 			err = stml0xx_spi_send_read_reg(NONWAKESENSOR_CONFIG,
 							buf, 3);
 			if (err < 0) {
@@ -260,7 +265,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			break;
 		}
 		stml0xx_g_wake_sensor_state = (buf[1] << 8) | buf[0];
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted)
 			err = stml0xx_spi_send_write_reg(WAKESENSOR_CONFIG,
 							 buf, 2);
 		dev_dbg(&stml0xx_misc_data->spi->dev,
@@ -269,7 +274,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case STML0XX_IOCTL_GET_WAKESENSORS:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_GET_WAKESENSORS");
-		if (ps_stml0xx->mode != BOOTMODE) {
+		if (stml0xx_g_booted) {
 			err = stml0xx_spi_send_read_reg(WAKESENSOR_CONFIG,
 							 buf, 2);
 			if (err < 0) {
@@ -296,14 +301,14 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		stml0xx_g_algo_state = (buf[1] << 8) | buf[0];
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"Set algos config: 0x%x", stml0xx_g_algo_state);
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted)
 			err = stml0xx_spi_send_write_reg(ALGO_CONFIG,
 							buf, 2);
 		break;
 	case STML0XX_IOCTL_GET_ALGOS:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_GET_ALGOS");
-		if (ps_stml0xx->mode != BOOTMODE) {
+		if (stml0xx_g_booted) {
 			err = stml0xx_spi_send_read_reg(ALGO_CONFIG,
 							buf, 2);
 			if (err < 0) {
@@ -323,7 +328,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case STML0XX_IOCTL_GET_MAG_CAL:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_GET_MAG_CAL");
-		if (ps_stml0xx->mode != BOOTMODE) {
+		if (stml0xx_g_booted) {
 			err = stml0xx_spi_send_read_reg(MAG_CAL, buf,
 					      STML0XX_MAG_CAL_SIZE);
 			if (err < 0) {
@@ -348,7 +353,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			break;
 		}
 		memcpy(stml0xx_g_mag_cal, buf, STML0XX_MAG_CAL_SIZE);
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted)
 			err = stml0xx_spi_send_write_reg(MAG_CAL, buf,
 					       STML0XX_MAG_CAL_SIZE);
 		break;
@@ -363,7 +368,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		}
 		buf[0] = duration & 0xFF;
 		stml0xx_g_motion_dur = buf[0];
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted)
 			err = stml0xx_spi_send_write_reg(MOTION_DUR,
 							buf, 1);
 		break;
@@ -378,14 +383,14 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		}
 		buf[0] = duration & 0xFF;
 		stml0xx_g_zmotion_dur = buf[0];
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted)
 			err = stml0xx_spi_send_write_reg(ZRMOTION_DUR,
 							 buf, 1);
 		break;
 	case STML0XX_IOCTL_GET_DOCK_STATUS:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_GET_DOCK_STATUS");
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted)
 			err = stml0xx_spi_send_read_reg(DOCK_DATA,
 							buf, 1);
 		else
@@ -396,7 +401,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case STML0XX_IOCTL_TEST_READ:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_TEST_READ");
-		if (ps_stml0xx->mode != BOOTMODE) {
+		if (stml0xx_g_booted) {
 			err = stml0xx_spi_read(buf, 1);
 			/* stml0xx_spi_read will return num of bytes
 				read or error */
@@ -407,8 +412,10 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case STML0XX_IOCTL_TEST_WRITE:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_TEST_WRITE");
-		if (ps_stml0xx->mode == BOOTMODE)
+		if (!stml0xx_g_booted) {
+			err = -EBUSY;
 			break;
+		}
 		if (copy_from_user(buf, argp, sizeof(unsigned char))) {
 			dev_err(&stml0xx_misc_data->spi->dev,
 				"Copy test write returned error");
@@ -420,8 +427,10 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case STML0XX_IOCTL_SET_POSIX_TIME:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_SET_POSIX_TIME");
-		if (ps_stml0xx->mode == BOOTMODE)
+		if (!stml0xx_g_booted) {
+			err = -EBUSY;
 			break;
+		}
 		if (copy_from_user(&current_posix_time, argp,
 				   sizeof(current_posix_time))) {
 			dev_err(&stml0xx_misc_data->spi->dev,
@@ -485,14 +494,14 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		}
 		stml0xx_g_algo_requst[algo_idx].size = len;
 		memcpy(stml0xx_g_algo_requst[algo_idx].data, buf, len);
-		if (ps_stml0xx->mode != BOOTMODE)
+		if (stml0xx_g_booted)
 			err = stml0xx_spi_send_write_reg(stml0xx_algo_info
 					       [algo_idx].req_register, buf,
 					       len);
 		break;
 	case STML0XX_IOCTL_GET_ALGO_EVT:
 		dev_dbg(&stml0xx_misc_data->spi->dev, "STML0XX_IOCTL_GET_ALGO_EVT");
-		if (ps_stml0xx->mode == BOOTMODE) {
+		if (!stml0xx_g_booted) {
 			err = -EFAULT;
 			break;
 		}
@@ -533,7 +542,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case STML0XX_IOCTL_WRITE_REG:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_WRITE_REG");
-		if (ps_stml0xx->mode == BOOTMODE) {
+		if (!stml0xx_g_booted) {
 			err = -EFAULT;
 			break;
 		}
@@ -574,7 +583,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case STML0XX_IOCTL_READ_REG:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_READ_REG");
-		if (ps_stml0xx->mode == BOOTMODE) {
+		if (!stml0xx_g_booted) {
 			err = -EFAULT;
 			break;
 		}
@@ -614,7 +623,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case STML0XX_IOCTL_SET_LOWPOWER_MODE:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_SET_LOWPOWER_MODE");
-		if (ps_stml0xx->mode == BOOTMODE) {
+		if (!stml0xx_g_booted) {
 			err = -EBUSY;
 			break;
 		}
diff --git a/drivers/misc/stml0xx/stml0xx_reset.c b/drivers/misc/stml0xx/stml0xx_reset.c
index c2730590a53..da9cb2b62a1 100644
--- a/drivers/misc/stml0xx/stml0xx_reset.c
+++ b/drivers/misc/stml0xx/stml0xx_reset.c
@@ -46,12 +46,12 @@
 void stml0xx_reset(struct stml0xx_platform_data *pdata, unsigned char *cmdbuff)
 {
 	dev_err(&stml0xx_misc_data->spi->dev, "stml0xx_reset");
+	stml0xx_g_booted = 0;
 	msleep(stml0xx_spi_retry_delay);
 	gpio_set_value(pdata->gpio_reset, 0);
 	msleep(stml0xx_spi_retry_delay);
 	gpio_set_value(pdata->gpio_reset, 1);
 	msleep(STML0XX_RESET_DELAY);
-	stml0xx_detect_lowpower_mode(cmdbuff);
 }
 
 void stml0xx_initialize_work_func(struct work_struct *work)
@@ -78,6 +78,8 @@ void stml0xx_initialize_work_func(struct work_struct *work)
 
 	stml0xx_wake(ps_stml0xx);
 
+	stml0xx_detect_lowpower_mode();
+
 	buf[0] = stml0xx_g_acc_delay;
 	err = stml0xx_spi_send_write_reg_reset(ACCEL_UPDATE_RATE, buf,
 			1, RESET_NOT_ALLOWED);
diff --git a/drivers/misc/stml0xx/stml0xx_wake_irq.c b/drivers/misc/stml0xx/stml0xx_wake_irq.c
index f67979ea273..4214dd1fdaf 100644
--- a/drivers/misc/stml0xx/stml0xx_wake_irq.c
+++ b/drivers/misc/stml0xx/stml0xx_wake_irq.c
@@ -203,6 +203,7 @@ void stml0xx_irq_wake_work_func(struct work_struct *work)
 			&ps_stml0xx->initialize_work);
 		dev_err(&stml0xx_misc_data->spi->dev,
 			"Sensor Hub reports reset");
+		stml0xx_g_booted = 1;
 	}
 	if (irq_status & M_FLATUP) {
 		err = stml0xx_spi_send_read_reg(FLAT_DATA, buf, 1);
diff --git a/include/linux/stml0xx.h b/include/linux/stml0xx.h
index 55a1778969d..03b0e27ccdf 100644
--- a/include/linux/stml0xx.h
+++ b/include/linux/stml0xx.h
@@ -654,7 +654,7 @@ void stml0xx_spi_append_crc(unsigned char *data, int len);
 int stml0xx_enable(void);
 void stml0xx_wake(struct stml0xx_data *ps_stml0xx);
 void stml0xx_sleep(struct stml0xx_data *ps_stml0xx);
-void stml0xx_detect_lowpower_mode(unsigned char *cmdbuff);
+void stml0xx_detect_lowpower_mode(void);
 
 int stml0xx_load_brightness_table(void);
 
-- 
2.11.0

