From 846e56ab47ac27f443ae60f7a500717274a9cd18 Mon Sep 17 00:00:00 2001
From: Jingnan Zhu <e3334c@motorola.com>
Date: Sat, 9 Jan 2016 12:00:45 -0600
Subject: [PATCH 607/959] IKSWM-16139: input: misc: vl53l0: parameter setting
 changes for max range

this change will allow it using the default value in the driver itself.

Change-Id: Ib31cfac3e6abdc5085ba4a5a0fd5746a535329c4
Signed-off-by: Jingnan Zhu <e3334c@motorola.com>
Reviewed-on: http://gerrit.mot.com/811932
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/input/misc/vl53L0/stmvl53l0.h        |  3 +-
 drivers/input/misc/vl53L0/stmvl53l0_module.c | 51 ++++++++++++++--------------
 2 files changed, 27 insertions(+), 27 deletions(-)

diff --git a/drivers/input/misc/vl53L0/stmvl53l0.h b/drivers/input/misc/vl53L0/stmvl53l0.h
index 87a10283f01..b561040b045 100644
--- a/drivers/input/misc/vl53L0/stmvl53l0.h
+++ b/drivers/input/misc/vl53L0/stmvl53l0.h
@@ -72,7 +72,7 @@
 #define	MEASUREMENTTIMINGBUDGET_PAR 7
 #define	SGLVAL_PRA 8
 #define	SGLCTL_PRA 9
-
+#define CUTV_PRA 10
 
 #define	CCI_BUS  0
 #define	I2C_BUS  1
@@ -156,6 +156,7 @@ struct stmvl53l0_data {
 	uint32_t highv;
 	wait_queue_head_t range_data_wait;
 	uint8_t d_ready;
+	uint8_t cut_v;
 };
 
 /*
diff --git a/drivers/input/misc/vl53L0/stmvl53l0_module.c b/drivers/input/misc/vl53L0/stmvl53l0_module.c
index 5f8f24ff340..7c09780e6f7 100644
--- a/drivers/input/misc/vl53L0/stmvl53l0_module.c
+++ b/drivers/input/misc/vl53L0/stmvl53l0_module.c
@@ -364,6 +364,7 @@ static void stmvl53l0_setupAPIFunctions(struct stmvl53l0_data *data)
 		VL53L0_REG_IDENTIFICATION_REVISION_ID, &revision);
 	vl53l0_errmsg("read REVISION_ID: 0x%x\n", revision);
 	revision = (revision & 0xF0) >> 4;
+	data->cut_v = revision;
 	if (revision == 1) {
 		/*cut 1.1*/
 		vl53l0_errmsg("to setup API cut 1.1\n");
@@ -1611,6 +1612,11 @@ static int stmvl53l0_ioctl_handler(struct file *file,
 				SetLimitCheckValue(vl53l0_dev,
 				VL53L0_CHECKENABLE_SIGMA_FINAL_RANGE,
 				(FixPoint1616_t)parameter.value);
+			else
+				parameter.status = papi_func_tbl->
+				GetLimitCheckValue(vl53l0_dev,
+				VL53L0_CHECKENABLE_SIGMA_FINAL_RANGE,
+				(FixPoint1616_t *)&parameter.value);
 			break;
 
 		case (SIGMACTL_PRA):
@@ -1619,6 +1625,11 @@ static int stmvl53l0_ioctl_handler(struct file *file,
 				papi_func_tbl->SetLimitCheckEnable(vl53l0_dev,
 				VL53L0_CHECKENABLE_SIGMA_FINAL_RANGE,
 				(uint8_t)parameter.value);
+			else
+				parameter.status =
+				papi_func_tbl->GetLimitCheckEnable(vl53l0_dev,
+				VL53L0_CHECKENABLE_SIGMA_FINAL_RANGE,
+				(uint8_t *)&parameter.value);
 			break;
 		case (SGLVAL_PRA):
 			if (!parameter.is_read)
@@ -1626,6 +1637,11 @@ static int stmvl53l0_ioctl_handler(struct file *file,
 				SetLimitCheckValue(vl53l0_dev,
 				VL53L0_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
 				(FixPoint1616_t)parameter.value);
+			else
+				parameter.status = papi_func_tbl->
+				GetLimitCheckValue(vl53l0_dev,
+				VL53L0_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
+				(FixPoint1616_t *)&parameter.value);
 			break;
 
 		case (SGLCTL_PRA):
@@ -1634,6 +1650,11 @@ static int stmvl53l0_ioctl_handler(struct file *file,
 				papi_func_tbl->SetLimitCheckEnable(vl53l0_dev,
 				VL53L0_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
 				(uint8_t)parameter.value);
+			else
+				parameter.status =
+				papi_func_tbl->GetLimitCheckEnable(vl53l0_dev,
+				VL53L0_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
+				(uint8_t *)&parameter.value);
 			break;
 
 		case (WRAPAROUNDCTL_PRA):
@@ -1657,6 +1678,10 @@ static int stmvl53l0_ioctl_handler(struct file *file,
 				VL53L0_SetMeasurementTimingBudgetMicroSeconds(
 				vl53l0_dev, (uint32_t)parameter.value);
 			break;
+		case (CUTV_PRA):
+			if (parameter.is_read)
+				parameter.value = vl53l0_dev->cut_v;
+			break;
 		}
 		if (copy_to_user((struct stmvl53l0_parameter *)p, &parameter,
 			sizeof(struct stmvl53l0_parameter))) {
@@ -1772,7 +1797,6 @@ static int stmvl53l0_init_client(struct stmvl53l0_data *data)
 	VL53L0_Error Status = VL53L0_ERROR_NONE;
 	VL53L0_DeviceInfo_t DeviceInfo;
 	VL53L0_DEV vl53l0_dev = data;
-	FixPoint1616_t	SigmaLimitValue;
 
 	vl53l0_dbgmsg("Enter\n");
 
@@ -1849,31 +1873,6 @@ static int stmvl53l0_init_client(struct stmvl53l0_data *data)
 		/* Setup in	single ranging mode */
 	}
 
-	if (Status == VL53L0_ERROR_NONE) {
-		pr_err("set LimitCheckValue SIGMA_FINAL_RANGE\n");
-		SigmaLimitValue = 32 << 16;
-		Status = papi_func_tbl->SetLimitCheckValue(vl53l0_dev,
-			VL53L0_CHECKENABLE_SIGMA_FINAL_RANGE,
-			SigmaLimitValue);
-	}
-
-	if (Status == VL53L0_ERROR_NONE) {
-		pr_err("set LimitCheckValue SIGNAL_RATE_FINAL_RANGE\n");
-		SigmaLimitValue = 94743; /* 1.44567500 * 65536 */
-		Status = papi_func_tbl->SetLimitCheckValue(vl53l0_dev,
-			VL53L0_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
-			SigmaLimitValue);
-	}
-
-	/*  Enable/Disable Sigma and Signal check */
-	if (Status == VL53L0_ERROR_NONE)
-		Status = papi_func_tbl->SetLimitCheckEnable(vl53l0_dev,
-		VL53L0_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
-
-	if (Status == VL53L0_ERROR_NONE)
-		Status = papi_func_tbl->SetLimitCheckEnable(vl53l0_dev,
-		VL53L0_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
-
 	if (Status == VL53L0_ERROR_NONE)
 		Status = papi_func_tbl->SetWrapAroundCheckEnable(vl53l0_dev, 1);
 	if (data->offset != 0)
-- 
2.11.0

