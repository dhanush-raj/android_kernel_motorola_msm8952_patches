From a7ffa5c96b32d9534e0c9bec1b0b730e748e858f Mon Sep 17 00:00:00 2001
From: Jevin Tang <a21266@motorola.com>
Date: Thu, 20 Feb 2014 19:19:02 -0600
Subject: [PATCH 147/959] IKKRNBSP-3380: tty: diag: handle case that TTY
 functions are called from interrupt context

Switch to using spinlocks to handle the case that the tty diag functions
are called from interrupt context.

Propagation of IKKRNBSP-2148

Change-Id: Ia925e71e61b01956dde6072bb942a3e18c5a8467
Signed-off-by: Jeffrey Carlyle <jeff.carlyle@motorola.com>
Signed-off-by: Jevin Tang <a21266@motorola.com>
Reviewed-on: http://gerrit.pcs.mot.com/613201
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Zhi-Yun Tang <jevin@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
Signed-off-by: Ravi Vembu <raviv@motorola.com>
Reviewed-on: http://gerrit.mot.com/677436
Reviewed-on: http://gerrit.mot.com/782994
SME-Granted: SME Approvals Granted
---
 drivers/tty/diag/tty_diag.c | 51 ++++++++++++++++++++++++++-------------------
 1 file changed, 30 insertions(+), 21 deletions(-)

diff --git a/drivers/tty/diag/tty_diag.c b/drivers/tty/diag/tty_diag.c
index 5699585cab0..684cc24096f 100644
--- a/drivers/tty/diag/tty_diag.c
+++ b/drivers/tty/diag/tty_diag.c
@@ -14,7 +14,7 @@
 #define DIAG_MAJOR 185
 #define DIAG_TTY_MINOR_COUNT 3
 
-static DEFINE_MUTEX(diag_tty_lock);
+static DEFINE_SPINLOCK(diag_tty_lock);
 
 static struct tty_driver *diag_tty_driver;
 static struct usb_diag_ch legacy_ch;
@@ -43,6 +43,7 @@ static int diag_tty_open(struct tty_struct *tty, struct file *f)
 {
 	int n = tty->index;
 	struct diag_tty_data *tty_data;
+	unsigned long flags;
 
 	tty_data = diag_tty + n;
 
@@ -56,13 +57,13 @@ static int diag_tty_open(struct tty_struct *tty, struct file *f)
 	if (tty_data->open_count >= 1)
 		return -EBUSY;
 
-	mutex_lock(&diag_tty_lock);
+	spin_lock_irqsave(&diag_tty_lock, flags);
 
 	tty_data->tty = tty;
 	tty->driver_data = tty_data;
 	tty_data->open_count++;
 
-	mutex_unlock(&diag_tty_lock);
+	spin_unlock_irqrestore(&diag_tty_lock, flags);
 
 	legacy_ch.notify(legacy_ch.priv, USB_DIAG_CONNECT, NULL);
 
@@ -74,11 +75,12 @@ static void diag_tty_close(struct tty_struct *tty, struct file *f)
 	struct diag_tty_data *tty_data = tty->driver_data;
 	int disconnect_channel = 1;
 	int i;
+	unsigned long flags;
 
 	if (tty_data == NULL)
 		return;
 
-	mutex_lock(&diag_tty_lock);
+	spin_lock_irqsave(&diag_tty_lock, flags);
 	tty_data->open_count--;
 
 	for (i = 0; i < DIAG_TTY_MINOR_COUNT; i++) {
@@ -94,7 +96,7 @@ static void diag_tty_close(struct tty_struct *tty, struct file *f)
 	if (tty_data->open_count == 0)
 		tty->driver_data = NULL;
 
-	mutex_unlock(&diag_tty_lock);
+	spin_unlock_irqrestore(&diag_tty_lock, flags);
 }
 
 static int diag_tty_write(struct tty_struct *tty,
@@ -102,18 +104,19 @@ static int diag_tty_write(struct tty_struct *tty,
 {
 	struct diag_tty_data *tty_data = tty->driver_data;
 	struct diag_request *d_req_temp = d_req_ptr;
+	unsigned long flags;
 
-	mutex_lock(&diag_tty_lock);
+	spin_lock_irqsave(&diag_tty_lock, flags);
 
 	/* Make sure diag char driver is ready and no outstanding request */
 	if ((d_req_ptr == NULL) || legacy_ch.priv_usb) {
-		mutex_unlock(&diag_tty_lock);
+		spin_unlock_irqrestore(&diag_tty_lock, flags);
 		return -EAGAIN;
 	}
 
 	/* Diag packet must fit in buff and be written all at once */
 	if (len > d_req_ptr->length) {
-		mutex_unlock(&diag_tty_lock);
+		spin_unlock_irqrestore(&diag_tty_lock, flags);
 		return -EMSGSIZE;
 	}
 
@@ -125,6 +128,7 @@ static int diag_tty_write(struct tty_struct *tty,
 		if (d_req_ptr->actual + len > d_req_ptr->length) {
 			d_req_ptr->actual = 0;
 			diag_packet_incomplete = 0;
+			spin_unlock_irqrestore(&diag_tty_lock, flags);
 			return -EMSGSIZE;
 		} else {
 			memcpy(d_req_ptr->buf + d_req_ptr->actual, buf, len);
@@ -135,7 +139,7 @@ static int diag_tty_write(struct tty_struct *tty,
 	/* Check if packet is now complete */
 	if (d_req_ptr->buf[d_req_ptr->actual - 1] != 0x7E) {
 		diag_packet_incomplete = 1;
-		mutex_unlock(&diag_tty_lock);
+		spin_unlock_irqrestore(&diag_tty_lock, flags);
 		return len;
 	} else
 		diag_packet_incomplete = 0;
@@ -165,8 +169,7 @@ static int diag_tty_write(struct tty_struct *tty,
 	/* Set active tty for responding */
 	legacy_ch.priv_usb = tty_data;
 
-	mutex_unlock(&diag_tty_lock);
-
+	spin_unlock_irqrestore(&diag_tty_lock, flags);
 	legacy_ch.notify(legacy_ch.priv, USB_DIAG_READ_DONE, d_req_temp);
 
 	return len;
@@ -200,14 +203,16 @@ struct usb_diag_ch *tty_diag_channel_open(const char *name, void *priv,
 		void (*notify)(void *, unsigned, struct diag_request *))
 {
 	int i;
+	unsigned long flags;
 
 	if (legacy_ch.priv != NULL)
 		return ERR_PTR(-EBUSY);
 
-	mutex_lock(&diag_tty_lock);
+	spin_lock_init(&diag_tty_lock);
+	spin_lock_irqsave(&diag_tty_lock, flags);
 	legacy_ch.priv = priv;
 	legacy_ch.notify = notify;
-	mutex_unlock(&diag_tty_lock);
+	spin_unlock_irqrestore(&diag_tty_lock, flags);
 
 	for (i = 0; i < DIAG_TTY_MINOR_COUNT; i++)
 		tty_register_device(diag_tty_driver, i, NULL);
@@ -220,20 +225,21 @@ EXPORT_SYMBOL(tty_diag_channel_open);
 void tty_diag_channel_close(struct usb_diag_ch *diag_ch)
 {
 	struct diag_tty_data *priv_usb = diag_ch->priv_usb;
+	unsigned long flags;
 	int i;
 
 	if (diag_ch->priv_usb) {
 		tty_insert_flip_char(priv_usb->tty, 0x00, TTY_BREAK);
 		tty_flip_buffer_push(priv_usb->tty);
 	}
-	mutex_lock(&diag_tty_lock);
+	spin_lock_irqsave(&diag_tty_lock, flags);
 	diag_ch->priv = NULL;
 	diag_ch->notify = NULL;
 
 	for (i = DIAG_TTY_MINOR_COUNT - 1; i >= 0; i--)
 		tty_unregister_device(diag_tty_driver, i);
 
-	mutex_unlock(&diag_tty_lock);
+	spin_unlock_irqrestore(&diag_tty_lock, flags);
 }
 EXPORT_SYMBOL(tty_diag_channel_close);
 
@@ -254,6 +260,7 @@ int tty_diag_channel_write(struct usb_diag_ch *diag_ch,
 	struct diag_tty_data *tty_data = diag_ch->priv_usb;
 	unsigned char *tty_buf;
 	int tty_allocated;
+	unsigned long flags;
 	int cmd_code, subsys_id;
 
 	/* If diag packet is not 1:1 response (perhaps logging packet?),
@@ -261,7 +268,7 @@ int tty_diag_channel_write(struct usb_diag_ch *diag_ch,
 	if (tty_data == NULL)
 		tty_data = &(diag_tty[0]);
 
-	mutex_lock(&diag_tty_lock);
+	spin_lock_irqsave(&diag_tty_lock, flags);
 
 	if (dbg_ftm_flag == 1) {
 		cmd_code = (int)(*(char *)d_req->buf);
@@ -281,7 +288,7 @@ int tty_diag_channel_write(struct usb_diag_ch *diag_ch,
 	}
 
 	if (tty_data->tty == NULL) {
-		mutex_unlock(&diag_tty_lock);
+		spin_unlock_irqrestore(&diag_tty_lock, flags);
 		return -EIO;
 	}
 
@@ -289,7 +296,7 @@ int tty_diag_channel_write(struct usb_diag_ch *diag_ch,
 						&tty_buf, d_req->length);
 
 	if (tty_allocated < d_req->length) {
-		mutex_unlock(&diag_tty_lock);
+		spin_unlock_irqrestore(&diag_tty_lock, flags);
 		return -ENOMEM;
 	}
 
@@ -299,7 +306,7 @@ int tty_diag_channel_write(struct usb_diag_ch *diag_ch,
 	memcpy(tty_buf, d_req->buf, d_req->length);
 	tty_flip_buffer_push(tty_data->tty);
 
-	mutex_unlock(&diag_tty_lock);
+	spin_unlock_irqrestore(&diag_tty_lock, flags);
 
 	diag_ch->notify(diag_ch->priv, USB_DIAG_WRITE_DONE, d_req);
 
@@ -309,9 +316,11 @@ EXPORT_SYMBOL(tty_diag_channel_write);
 
 void tty_diag_channel_abandon_request()
 {
-	mutex_lock(&diag_tty_lock);
+	unsigned long flags;
+
+	spin_lock_irqsave(&diag_tty_lock, flags);
 	legacy_ch.priv_usb = NULL;
-	mutex_unlock(&diag_tty_lock);
+	spin_unlock_irqrestore(&diag_tty_lock, flags);
 }
 EXPORT_SYMBOL(tty_diag_channel_abandon_request);
 
-- 
2.11.0

