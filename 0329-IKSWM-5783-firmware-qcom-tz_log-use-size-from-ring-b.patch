From ddfc6e0d12e30dc87a3dbb059360a016988d672a Mon Sep 17 00:00:00 2001
From: Yuanyuan Zhong <zyy@motorola.com>
Date: Fri, 21 Nov 2014 15:16:19 -0800
Subject: [PATCH 329/959] IKSWM-5783 firmware: qcom: tz_log: use size from ring
 buf

The ring buf is placed at the end of diag area. Get the size of diag
area according to ring buf offset and length. Also select the right
structure for boot_info according to the size.

Change-Id: I49a3d3cecabfa5d230874d136c0c2a1b4bf17b87
Signed-off-by: Hong-Mei Li <a21834@motorola.com>
Reviewed-on: http://gerrit.mot.com/722585
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Christopher Fries <cfries@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
Reviewed-on: http://gerrit.mot.com/787910
Reviewed-by: Zhi-Ming Yuan <a14194@motorola.com>
---
 drivers/firmware/qcom/tz_log.c | 47 ++++++++++++++++++++++++++++++++++++++----
 1 file changed, 43 insertions(+), 4 deletions(-)

diff --git a/drivers/firmware/qcom/tz_log.c b/drivers/firmware/qcom/tz_log.c
index a95487b9481..3804be59dea 100644
--- a/drivers/firmware/qcom/tz_log.c
+++ b/drivers/firmware/qcom/tz_log.c
@@ -69,6 +69,15 @@ struct tzdbg_boot_info_t {
 	uint32_t warm_jmp_addr;	/* Last Warmboot Jump Address */
 	uint32_t spare;	/* Reserved for future use. */
 };
+struct tzdbg_boot_info2_t {
+	uint32_t wb_entry_cnt;  /* Warmboot entry CPU Counter */
+	uint32_t wb_exit_cnt;   /* Warmboot exit CPU Counter */
+	uint32_t pc_entry_cnt;  /* Power Collapse entry CPU Counter */
+	uint32_t pc_exit_cnt;   /* Power Collapse exit CPU counter */
+	uint64_t warm_jmp_addr; /* Last Warmboot Jump Address */
+	uint32_t warm_jmp_instr;/* Last Warmboot Jump Address Instruction */
+};
+
 /*
  * Reset Info Table
  */
@@ -276,22 +285,32 @@ static int _disp_tz_boot_stats(void)
 	int i;
 	int len = 0;
 	struct tzdbg_boot_info_t *ptr;
+	struct tzdbg_boot_info2_t *ptr2;
+	int v2 = 0;
+
+	if ((tzdbg.diag_buf->reset_info_off - tzdbg.diag_buf->boot_info_off) ==
+			(sizeof(*ptr2) * tzdbg.diag_buf->cpu_count))
+		v2 = 1;
 
 	ptr = (struct tzdbg_boot_info_t *)((unsigned char *)tzdbg.diag_buf +
 					tzdbg.diag_buf->boot_info_off);
+	ptr2 = (struct tzdbg_boot_info2_t *)ptr;
 
 	for (i = 0; i < tzdbg.diag_buf->cpu_count; i++) {
 		len += snprintf(tzdbg.disp_buf + len,
 				(debug_rw_buf_size - 1) - len,
 				"  CPU #: %d\n"
-				"     Warmboot jump address     : 0x%x\n"
+				"     Warmboot jump address     : 0x%lx\n"
 				"     Warmboot entry CPU counter: 0x%x\n"
 				"     Warmboot exit CPU counter : 0x%x\n"
 				"     Power Collapse entry CPU counter: 0x%x\n"
 				"     Power Collapse exit CPU counter : 0x%x\n",
-				i, ptr->warm_jmp_addr, ptr->wb_entry_cnt,
-				ptr->wb_exit_cnt, ptr->pc_entry_cnt,
-				ptr->pc_exit_cnt);
+				i, (unsigned long)(v2 ? ptr2->warm_jmp_addr :
+						ptr->warm_jmp_addr),
+				(v2 ? ptr2->wb_entry_cnt : ptr->wb_entry_cnt),
+				(v2 ? ptr2->wb_exit_cnt : ptr->wb_exit_cnt),
+				(v2 ? ptr2->pc_entry_cnt : ptr->pc_entry_cnt),
+				(v2 ? ptr2->pc_exit_cnt : ptr->pc_exit_cnt));
 
 		if (len > (debug_rw_buf_size - 1)) {
 			pr_warn("%s: Cannot fit all info into the buffer\n",
@@ -299,6 +318,7 @@ static int _disp_tz_boot_stats(void)
 			break;
 		}
 		ptr++;
+		ptr2++;
 	}
 	tzdbg.stat[TZDBG_BOOT].data = tzdbg.disp_buf;
 	return len;
@@ -698,6 +718,7 @@ static int tz_log_probe(struct platform_device *pdev)
 	void __iomem *virt_iobase;
 	phys_addr_t tzdiag_phy_iobase;
 	uint32_t *ptr = NULL;
+	uint32_t tmp_debug_buf_size;
 
 	/*
 	 * Get address that stores the physical location diagnostic data
@@ -745,6 +766,24 @@ static int tz_log_probe(struct platform_device *pdev)
 		return -ENXIO;
 	}
 
+	tmp_debug_buf_size = readl_relaxed(tzdbg.virt_iobase +
+				offsetof(struct tzdbg_t, ring_off)) +
+			readl_relaxed(tzdbg.virt_iobase +
+				offsetof(struct tzdbg_t, ring_len));
+
+	if (tmp_debug_buf_size != debug_rw_buf_size) {
+		WARN(1, "TZ Debug Size is not consistent!");
+		devm_iounmap(&pdev->dev, tzdbg.virt_iobase);
+		tzdbg.virt_iobase = devm_ioremap_nocache(&pdev->dev,
+			tzdiag_phy_iobase, tmp_debug_buf_size);
+		if (!tzdbg.virt_iobase) {
+			dev_err(&pdev->dev,
+				"ERROR could not ioremap: start=%pr, len=%x\n",
+					&tzdiag_phy_iobase, tmp_debug_buf_size);
+			 return -ENXIO;
+		}
+		debug_rw_buf_size = tmp_debug_buf_size;
+	}
 	ptr = kzalloc(debug_rw_buf_size, GFP_KERNEL);
 	if (ptr == NULL) {
 		pr_err("%s: Can't Allocate memory: ptr\n",
-- 
2.11.0

