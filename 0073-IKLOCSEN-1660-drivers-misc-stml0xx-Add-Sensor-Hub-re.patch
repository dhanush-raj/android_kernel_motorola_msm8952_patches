From c10fd279554dbaab0e50f5a92616d531a66fbc0b Mon Sep 17 00:00:00 2001
From: Robert Wiegand <qa2113@motorola.com>
Date: Thu, 11 Sep 2014 11:20:55 -0500
Subject: [PATCH 073/959] IKLOCSEN-1660 drivers: misc: stml0xx: Add Sensor Hub
 reset report

Initialize the Sensor Hub after it reports that it
has completed it's power up initialization.

Change-Id: Ifc4364de4141aa52769134342e15ff2c7a242778
Signed-off-by: Robert Wiegand <qa2113@motorola.com>
Reviewed-on: http://gerrit.mot.com/668497
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Jason Jae Hyun Koh <jasonkoh@motorola.com>
Reviewed-by: Jeffrey Carlyle <jeff.carlyle@motorola.com>
Reviewed-by: George Standish <george.standish@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/misc/stml0xx/stml0xx_core.c     |  1 +
 drivers/misc/stml0xx/stml0xx_flash.c    |  8 ++----
 drivers/misc/stml0xx/stml0xx_reset.c    | 45 ++++++++++++++++++---------------
 drivers/misc/stml0xx/stml0xx_spi.c      | 15 +++++++----
 drivers/misc/stml0xx/stml0xx_wake_irq.c |  8 +++++-
 include/linux/stml0xx.h                 |  5 +++-
 6 files changed, 48 insertions(+), 34 deletions(-)

diff --git a/drivers/misc/stml0xx/stml0xx_core.c b/drivers/misc/stml0xx/stml0xx_core.c
index e8e59156b88..c4be7089c2d 100644
--- a/drivers/misc/stml0xx/stml0xx_core.c
+++ b/drivers/misc/stml0xx/stml0xx_core.c
@@ -747,6 +747,7 @@ static int stml0xx_probe(struct spi_device *spi)
 	INIT_WORK(&ps_stml0xx->irq_wake_work, stml0xx_irq_wake_work_func);
 	INIT_WORK(&ps_stml0xx->clear_interrupt_status_work,
 		  clear_interrupt_status_work_func);
+	INIT_WORK(&ps_stml0xx->initialize_work, stml0xx_initialize_work_func);
 
 	ps_stml0xx->irq_work_queue =
 	    create_singlethread_workqueue("stml0xx_wq");
diff --git a/drivers/misc/stml0xx/stml0xx_flash.c b/drivers/misc/stml0xx/stml0xx_flash.c
index 34c5e8dcdf4..46de616d7b0 100644
--- a/drivers/misc/stml0xx/stml0xx_flash.c
+++ b/drivers/misc/stml0xx/stml0xx_flash.c
@@ -355,12 +355,8 @@ RETRY_GET_ID:
 		gpio_set_value(pdata->gpio_bslen, !(bslen_pin_active_value));
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"Switching to normal mode");
-		/* init only if booted at least once and not in the factory
-		   - stml0xx_irq_disable indicates factory test ongoing */
-		if (stml0xx_g_booted && !stml0xx_irq_disable)
-			stml0xx_reset_and_init();
-		else
-			stml0xx_reset(pdata, stml0xx_cmdbuff);
+
+		stml0xx_reset(pdata, stml0xx_cmdbuff);
 	}
 	return rc;
 }
diff --git a/drivers/misc/stml0xx/stml0xx_reset.c b/drivers/misc/stml0xx/stml0xx_reset.c
index 2c4f9377e9c..c2730590a53 100644
--- a/drivers/misc/stml0xx/stml0xx_reset.c
+++ b/drivers/misc/stml0xx/stml0xx_reset.c
@@ -54,26 +54,29 @@ void stml0xx_reset(struct stml0xx_platform_data *pdata, unsigned char *cmdbuff)
 	stml0xx_detect_lowpower_mode(cmdbuff);
 }
 
-int stml0xx_reset_and_init(void)
+void stml0xx_initialize_work_func(struct work_struct *work)
 {
+	struct stml0xx_data *ps_stml0xx = container_of(work,
+		struct stml0xx_data, initialize_work);
+
 	struct stml0xx_platform_data *pdata;
-	unsigned int i;
-	int err, ret_err = 0;
-	unsigned char *rst_cmdbuff = stml0xx_misc_data->spi_tx_buf;
+	unsigned char *rst_cmdbuff;
 	unsigned char buf[SPI_MSG_SIZE];
-	dev_err(&stml0xx_misc_data->spi->dev, "stml0xx_reset_and_init");
+	unsigned int i;
+	int err;
+	int ret_err = 0;
 
-	if (rst_cmdbuff == NULL)
-		return -ENOMEM;
+	pdata = ps_stml0xx->pdata;
+	rst_cmdbuff = ps_stml0xx->spi_tx_buf;
 
-	wake_lock(&stml0xx_misc_data->reset_wakelock);
+	if (rst_cmdbuff == NULL)
+		return;
 
-	pdata = stml0xx_misc_data->pdata;
+	wake_lock(&ps_stml0xx->reset_wakelock);
 
-	stml0xx_reset(pdata, rst_cmdbuff);
 	stml0xx_spi_retry_delay = 200;
 
-	stml0xx_wake(stml0xx_misc_data);
+	stml0xx_wake(ps_stml0xx);
 
 	buf[0] = stml0xx_g_acc_delay;
 	err = stml0xx_spi_send_write_reg_reset(ACCEL_UPDATE_RATE, buf,
@@ -139,10 +142,6 @@ int stml0xx_reset_and_init(void)
 				ret_err = err;
 		}
 	}
-	err = stml0xx_spi_send_read_reg_reset(INTERRUPT_STATUS, buf,
-			3, RESET_NOT_ALLOWED);
-	err = stml0xx_spi_send_read_reg_reset(WAKESENSOR_STATUS, buf,
-			2, RESET_NOT_ALLOWED);
 
 	buf[0] = (pdata->ct406_detect_threshold >> 8) & 0xff;
 	buf[1] = pdata->ct406_detect_threshold & 0xff;
@@ -154,21 +153,25 @@ int stml0xx_reset_and_init(void)
 	err = stml0xx_spi_send_write_reg_reset(PROX_SETTINGS, buf,
 			7, RESET_NOT_ALLOWED);
 	if (err < 0) {
-		dev_err(&stml0xx_misc_data->spi->dev,
+		dev_err(&ps_stml0xx->spi->dev,
 			"unable to write proximity settings %d", err);
 		ret_err = err;
 	}
 
-	err = stml0xx_led_set_reset(&stml0xx_misc_data->led_cdev,
+	err = stml0xx_led_set_reset(&ps_stml0xx->led_cdev,
 			RESET_NOT_ALLOWED);
 	if (err < 0)
 		ret_err =  err;
 
 	/* sending reset to slpc hal */
-	stml0xx_ms_data_buffer_write(stml0xx_misc_data, DT_RESET, NULL, 0);
+	stml0xx_ms_data_buffer_write(ps_stml0xx, DT_RESET, NULL, 0);
+
+	stml0xx_sleep(ps_stml0xx);
+	wake_unlock(&ps_stml0xx->reset_wakelock);
 
-	stml0xx_sleep(stml0xx_misc_data);
-	wake_unlock(&stml0xx_misc_data->reset_wakelock);
+	if (ret_err >= 0)
+		dev_err(&ps_stml0xx->spi->dev, "Sensor Hub initialization successful");
+	else
+		dev_err(&ps_stml0xx->spi->dev, "Sensor Hub initialization failed");
 
-	return ret_err;
 }
diff --git a/drivers/misc/stml0xx/stml0xx_spi.c b/drivers/misc/stml0xx/stml0xx_spi.c
index d0cf2e48e09..e81179e2225 100644
--- a/drivers/misc/stml0xx/stml0xx_spi.c
+++ b/drivers/misc/stml0xx/stml0xx_spi.c
@@ -287,7 +287,8 @@ int stml0xx_spi_write_read(unsigned char *tx_buf, int tx_len,
 		}
 
 		if (ret < 0) {
-			stml0xx_reset_and_init();
+			stml0xx_reset(stml0xx_misc_data->pdata,
+				stml0xx_cmdbuff);
 			dev_err(&stml0xx_misc_data->spi->dev,
 				"stml0xx_spi_write_read SPI transfer error [%d], retries left [%d]",
 				ret, reset_retries);
@@ -341,7 +342,8 @@ int stml0xx_spi_read(unsigned char *buf, int len)
 			ret = stml0xx_spi_read_no_retries(buf, len);
 
 		if (ret < 0) {
-			stml0xx_reset_and_init();
+			stml0xx_reset(stml0xx_misc_data->pdata,
+				stml0xx_cmdbuff);
 			dev_err(&stml0xx_misc_data->spi->dev,
 				"stml0xx_spi_read SPI transfer error [%d], retries left [%d]",
 				ret, reset_retries);
@@ -390,7 +392,8 @@ int stml0xx_spi_write(unsigned char *buf, int len)
 			ret = stml0xx_spi_write_no_retries(buf, len);
 
 		if (ret < 0) {
-			stml0xx_reset_and_init();
+			stml0xx_reset(stml0xx_misc_data->pdata,
+				stml0xx_cmdbuff);
 			dev_err(&stml0xx_misc_data->spi->dev,
 				"stml0xx_spi_write SPI transfer error [%d], retries left [%d]",
 				ret, reset_retries);
@@ -501,7 +504,8 @@ int stml0xx_spi_send_write_reg_reset(unsigned char reg_type,
 				"stml0xx_spi_send_write_reg_reset SPI transfer error [%d], retries left [%d]",
 				ret, reset_retries);
 			if (reset_allowed)
-				stml0xx_reset_and_init();
+				stml0xx_reset(stml0xx_misc_data->pdata,
+					stml0xx_cmdbuff);
 			else
 				break;
 		}
@@ -620,7 +624,8 @@ int stml0xx_spi_send_read_reg_reset(unsigned char reg_type,
 				"stml0xx_spi_send_read_reg_reset SPI transfer error [%d], retries left [%d]",
 				ret, reset_retries);
 			if (reset_allowed)
-				stml0xx_reset_and_init();
+				stml0xx_reset(stml0xx_misc_data->pdata,
+					stml0xx_cmdbuff);
 			else
 				break;
 		}
diff --git a/drivers/misc/stml0xx/stml0xx_wake_irq.c b/drivers/misc/stml0xx/stml0xx_wake_irq.c
index dc72bbcaa0b..f67979ea273 100644
--- a/drivers/misc/stml0xx/stml0xx_wake_irq.c
+++ b/drivers/misc/stml0xx/stml0xx_wake_irq.c
@@ -138,7 +138,7 @@ void stml0xx_irq_wake_work_func(struct work_struct *work)
 		stml0xx_as_data_buffer_write(ps_stml0xx, DT_RESET, &status, 1,
 					     0);
 
-		stml0xx_reset_and_init();
+		stml0xx_reset(stml0xx_misc_data->pdata, stml0xx_cmdbuff);
 		dev_err(&stml0xx_misc_data->spi->dev,
 			"STML0XX requested a reset");
 		goto EXIT;
@@ -198,6 +198,12 @@ void stml0xx_irq_wake_work_func(struct work_struct *work)
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"Cover status: %d", state);
 	}
+	if (irq_status & M_INIT_COMPLETE) {
+		queue_work(ps_stml0xx->irq_work_queue,
+			&ps_stml0xx->initialize_work);
+		dev_err(&stml0xx_misc_data->spi->dev,
+			"Sensor Hub reports reset");
+	}
 	if (irq_status & M_FLATUP) {
 		err = stml0xx_spi_send_read_reg(FLAT_DATA, buf, 1);
 		if (err < 0) {
diff --git a/include/linux/stml0xx.h b/include/linux/stml0xx.h
index 35f10060bfe..55a1778969d 100644
--- a/include/linux/stml0xx.h
+++ b/include/linux/stml0xx.h
@@ -188,6 +188,7 @@
 #define M_PROXIMITY		0x000002
 #define M_TOUCH			0x000004
 #define M_COVER			0x000008
+#define M_INIT_COMPLETE         0x000040
 #define M_HUB_RESET		0x000080
 
 #define M_FLATUP		0x000100
@@ -528,6 +529,7 @@ struct stml0xx_data {
 	struct work_struct irq_work;
 	struct work_struct irq_wake_work;
 	struct work_struct clear_interrupt_status_work;
+	struct work_struct initialize_work;
 	struct workqueue_struct *irq_work_queue;
 	struct wake_lock wakelock;
 	struct wake_lock reset_wakelock;
@@ -610,7 +612,8 @@ void stml0xx_irq_wake_work_func(struct work_struct *work);
 long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
 
 void stml0xx_reset(struct stml0xx_platform_data *pdata, unsigned char *cmdbuff);
-int stml0xx_reset_and_init(void);
+void stml0xx_initialize_work_func(struct work_struct *work);
+
 
 int stml0xx_as_data_buffer_write(struct stml0xx_data *ps_stml0xx,
 				 unsigned char type, unsigned char *data,
-- 
2.11.0

