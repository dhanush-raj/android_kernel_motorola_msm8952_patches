From 1b8edc342ed66777c2f60013e172ca5a85202ffc Mon Sep 17 00:00:00 2001
From: Stanley Lei <a23075@motorola.com>
Date: Tue, 10 Sep 2013 23:14:31 +0800
Subject: [PATCH 187/959] IKSWM-4458 msm: qpnp-power-on: API to access reset
 info regs

According to SR 01277290, 0x88D and 0x88E are spare registers for PM8x41
where we could store oem specific reset information

Change-Id: I9892b53473cfd9934e5c66341e267ae5261d6223
Signed-off-by: Stanley Lei <a23075@motorola.com>
Reviewed-on: http://gerrit.pcs.mot.com/622412
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Qing Chang <qing@motorola.com>
Reviewed-by: Yi-Wei Zhao <gbjc64@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/platform/msm/qpnp-power-on.c | 39 ++++++++++++++++++++++++++++++++++++
 include/linux/qpnp/power-on.h        |  5 +++++
 2 files changed, 44 insertions(+)

diff --git a/drivers/platform/msm/qpnp-power-on.c b/drivers/platform/msm/qpnp-power-on.c
index cb660dd2183..d0d2e728e0f 100644
--- a/drivers/platform/msm/qpnp-power-on.c
+++ b/drivers/platform/msm/qpnp-power-on.c
@@ -81,6 +81,10 @@
 
 #define QPNP_PON_SEC_UNLOCK			0xA5
 
+/* spared registers for storing extra reset information */
+#define QPNP_PON_EXTRA_RESET_INFO_1(base)	(base + 0x8D)
+#define QPNP_PON_EXTRA_RESET_INFO_2(base)	(base + 0x8E)
+
 #define QPNP_PON_WARM_RESET_TFT			BIT(4)
 
 #define QPNP_PON_RESIN_PULL_UP			BIT(0)
@@ -373,6 +377,41 @@ static ssize_t qpnp_pon_dbc_store(struct device *dev,
 
 static DEVICE_ATTR(debounce_us, 0664, qpnp_pon_dbc_show, qpnp_pon_dbc_store);
 
+int qpnp_pon_store_extra_reset_info(u16 mask, u16 val)
+{
+	int rc = 0;
+	u16 extra_reset_info_reg;
+	struct qpnp_pon *pon = sys_reset_dev;
+
+	if (!pon)
+		return -ENODEV;
+
+	if (mask & 0xFF) {
+		extra_reset_info_reg = QPNP_PON_EXTRA_RESET_INFO_1(pon->base);
+		rc = qpnp_pon_masked_write(pon, extra_reset_info_reg,
+		    mask & 0xFF, val & 0xFF);
+		if (rc) {
+			pr_err("Failed to store extra reset info to 0x%x\n",
+			    extra_reset_info_reg);
+			return rc;
+		}
+	}
+
+	if (mask & 0xFF00) {
+		extra_reset_info_reg = QPNP_PON_EXTRA_RESET_INFO_2(pon->base);
+		rc = qpnp_pon_masked_write(pon, extra_reset_info_reg,
+		    (mask & 0xFF00) >> 8, (val & 0xFF00) >> 8);
+		if (rc) {
+			pr_err("Failed to store extra reset info to 0x%x\n",
+			    extra_reset_info_reg);
+			return rc;
+		}
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(qpnp_pon_store_extra_reset_info);
+
 static int qpnp_pon_reset_config(struct qpnp_pon *pon,
 		enum pon_power_off_type type)
 {
diff --git a/include/linux/qpnp/power-on.h b/include/linux/qpnp/power-on.h
index a80e0c9a05e..af1371d48e9 100644
--- a/include/linux/qpnp/power-on.h
+++ b/include/linux/qpnp/power-on.h
@@ -62,6 +62,7 @@ int qpnp_pon_wd_config(bool enable);
 int qpnp_pon_set_restart_reason(enum pon_restart_reason reason);
 bool qpnp_pon_check_hard_reset_stored(void);
 
+int qpnp_pon_store_extra_reset_info(u16 mask, u16 val);
 #else
 static int qpnp_pon_system_pwr_off(enum pon_power_off_type type)
 {
@@ -85,6 +86,10 @@ static inline bool qpnp_pon_check_hard_reset_stored(void)
 {
 	return false;
 }
+static inline int qpnp_pon_store_extra_reset_info(u16 mask, u16 val)
+{
+	return -ENODEV;
+}
 #endif
 
 #endif
-- 
2.11.0

