From 9402f8dd0802a94b7856816c2866138b6d8f3cad Mon Sep 17 00:00:00 2001
From: Andrew Wheeler <awheeler@motorola.com>
Date: Fri, 18 Dec 2015 16:52:12 -0600
Subject: [PATCH 584/959] IKQCOMSD1-3106 Add motosh headers

The motorola sensorhub component won't compile without motosh header(s).
Add the headers so we can get the baseline to compile.

TODO: Port the motosh driver.

Change-Id: Icea289b9c10c93a00cfa9e9ad618359284581be3
Signed-off-by: Andrew Wheeler <awheeler@motorola.com>
Reviewed-on: http://gerrit.mot.com/808696
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Submit-Approved: Jira Key <jirakey@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
---
 include/linux/motosh.h      | 629 ++++++++++++++++++++++++++++++++++++++++++++
 include/uapi/linux/motosh.h | 375 ++++++++++++++++++++++++++
 2 files changed, 1004 insertions(+)
 create mode 100644 include/linux/motosh.h
 create mode 100644 include/uapi/linux/motosh.h

diff --git a/include/linux/motosh.h b/include/linux/motosh.h
new file mode 100644
index 00000000000..22929a2220e
--- /dev/null
+++ b/include/linux/motosh.h
@@ -0,0 +1,629 @@
+/*
+ * Copyright (C) 2010-2013 Motorola, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef __MOTOSH_H__
+#define __MOTOSH_H__
+
+#include <linux/cdev.h>
+#include <linux/wakelock.h>
+#include <linux/spinlock.h>
+#include <linux/switch.h>
+
+/* The user-space-visible definitions. */
+#include <uapi/linux/motosh.h>
+
+#include <linux/spinlock.h>
+
+#ifdef CONFIG_MMI_HALL_NOTIFICATIONS
+#include <linux/mmi_hall_notifier.h>
+#endif
+
+#include <linux/fb_quickdraw.h>
+#include <linux/pm_qos.h>
+#if defined(CONFIG_FB)
+#include <linux/notifier.h>
+#include <linux/fb.h>
+#endif
+
+#ifdef CONFIG_CYPRESS_CAPSENSE_HSSP
+#include <linux/power_supply.h>
+#endif
+
+#define NAME			     "motosh"
+
+#define MOTOSH_REG_SIZE 0x01
+
+/* MOTOSH memory map.
+ * We want to expand all entries, so we define all pre-processor guards if not
+ * already defined, and at the end we undefine them if needed. */
+
+#ifndef PDISPLAY
+#define PDISPLAY
+#define UNDEF_PDISPLAY
+#endif
+
+#ifndef IRGESTURE
+#define IRGESTURE
+#define UNDEF_IRGESTURE
+#endif
+
+#ifndef DSP
+#define DSP
+#define UNDEF_DSP
+#endif
+
+#ifndef GYRO_CALIBRATION
+#define GYRO_CALIBRATION
+#define UNDEF_GYRO_CALIBRATION
+#endif
+
+#ifndef CAPSENSE
+#define CAPSENSE
+#define UNDEF_CAPSENSE
+#endif
+
+#ifndef ALS_TEST
+#define ALS_TEST
+#define UNDEF_ALS_TEST
+#endif
+
+#define VMM_ENTRY(reg, id, writable, addr, size) id,
+enum vmm_ids {
+#include <linux/motosh_vmm.h>
+};
+#undef VMM_ENTRY
+
+#ifdef UNDEF_ALS_TEST
+#undef ALS_TEST
+#endif
+
+#ifdef UNDEF_CAPSENSE
+#undef CAPSENSE
+#endif
+
+#ifdef UNDEF_GYRO_CALIBRATION
+#undef GYRO_CALIBRATION
+#endif
+
+#ifdef UNDEF_DSP
+#undef DSP
+#endif
+
+#ifdef UNDEF_IRGESTURE
+#undef IRGESTURE
+#endif
+
+#ifdef UNDEF_PDISPLAY
+#undef PDISPLAY
+#endif
+
+/* MOTOSH memory map end */
+
+/* nwake interrupt mask */
+#define N_DISP_ROTATE           0x01
+#define N_ALS                   0x02
+#define N_DISP_BRIGHTNESS       0x04
+#define N_STEP_COUNTER          0x80
+
+#define MOTOSH_MAX_EVENT_QUEUE_SIZE   248
+#define MOTOSH_EVENT_QUEUE_MSG_ID_LEN 1
+#define MOTOSH_EVENT_TIMESTAMP_LEN    3
+
+#define LIGHTING_TABLE_SIZE 32
+
+#define MOTOSH_MS_DATA_QUEUE_SIZE       0x08
+#define MOTOSH_MS_DATA_QUEUE_MASK       0x07
+
+#define MOTOSH_CLIENT_MASK		0xF0
+
+#define MOTOSH_BUSY_STATUS_MASK	0x80
+#define MOTOSH_BUSY_SLEEP_USEC	10000
+#define MOTOSH_BUSY_RESUME_COUNT	14
+#define MOTOSH_BUSY_SUSPEND_COUNT	6
+#define MOTOSH_LATE_SUSPEND_TIMEOUT	400
+
+#define AOD_WAKEUP_REASON_ESD		4
+#define AOD_WAKEUP_REASON_QP_PREPARE		5
+#define AOD_WAKEUP_REASON_QP_DRAW		6
+#define AOD_WAKEUP_REASON_QP_ERASE		7
+#define AOD_WAKEUP_REASON_QP_COMPLETE		8
+#define AOD_WAKEUP_REASON_QP_DUMP_TRACE		9
+
+#define AOD_QP_ACK_BUFFER_ID_MASK	0x3F
+#define AOD_QP_ACK_RCVD			0
+#define AOD_QP_ACK_DONE			1
+#define AOD_QP_ACK_INVALID		2
+#define AOD_QP_ACK_ESD_RECOVERED	3
+
+#define AOD_QP_DRAW_MAX_BUFFER_ID	63
+#define AOD_QP_DRAW_NO_OVERRIDE		0xFFFF
+
+#define AOD_QP_ENABLED_VOTE_KERN		0x01
+#define AOD_QP_ENABLED_VOTE_USER		0x02
+#define AOD_QP_ENABLED_VOTE_MASK		0x03
+
+/* Note: MAX_LOG_MSG_LEN must be LESS than MOTOSH_MAXDATA_LENGTH */
+#define MAX_LOG_MSG_LEN			128
+
+#define I2C_RESPONSE_LENGTH		8
+
+#define MOTOSH_HEADER_LENGTH        1
+#define MOTOSH_FOOTER_LENGTH        1
+#define MOTOSH_MAX_PACKET_LENGTH    \
+	(MOTOSH_HEADER_LENGTH + MOTOSH_MAXDATA_LENGTH + MOTOSH_FOOTER_LENGTH)
+
+#define MOTOSH_IR_GESTURE_CNT      8
+#define MOTOSH_IR_SZ_GESTURE       4
+#define MOTOSH_IR_SZ_RAW           20
+#define MOTOSH_IR_CONFIG_REG_SIZE  255
+
+/* readbuff offsets */
+#define IRQ_WAKE_LO  0
+#define IRQ_WAKE_MED 1
+#define IRQ_WAKE_HI  2
+
+#define IRQ_NOWAKE_LO   0
+#define IRQ_NOWAKE_MED  1
+#define IRQ_NOWAKE_HI   2
+
+#define DOCK_STATE	0
+#define PROX_DISTANCE	0
+#define COVER_STATE	0
+#define TOUCH_REASON	1
+#define FLAT_UP		0
+#define FLAT_DOWN	0
+#define STOWED_STATUS	0
+#define STOWED_ALS		1
+#define STOWED_PROX		3
+#define NFC_VALUE	0
+#define ALGO_TYPE	7
+#define COMPASS_STATUS	12
+#define DISP_VALUE	0
+#define ACCEL_RD_X	0
+#define ACCEL_RD_Y	2
+#define ACCEL_RD_Z	4
+#define MAG_X		0
+#define MAG_Y		2
+#define MAG_Z		4
+#define MAG_UNCALIB_X   6
+#define MAG_UNCALIB_Y   8
+#define MAG_UNCALIB_Z   10
+#define ORIENT_X	6
+#define ORIENT_Y	8
+#define ORIENT_Z	10
+#define QUAT_6AXIS_A	0
+#define QUAT_6AXIS_B	2
+#define QUAT_6AXIS_C	4
+#define QUAT_6AXIS_W	6
+#define QUAT_9AXIS_A	8
+#define QUAT_9AXIS_B	10
+#define QUAT_9AXIS_C	12
+#define QUAT_9AXIS_W	14
+#define GYRO_RD_X	0
+#define GYRO_RD_Y	2
+#define GYRO_RD_Z	4
+#define GYRO_UNCALIB_X	6
+#define GYRO_UNCALIB_Y	8
+#define GYRO_UNCALIB_Z	10
+#define ALS_VALUE	0
+#define TEMP_VALUE	0
+#define PRESSURE_VALUE	0
+#define GRAV_X		0
+#define GRAV_Y		2
+#define GRAV_Z		4
+#define CAMERA_VALUE	0
+#define IR_GESTURE_EVENT    0
+#define IR_GESTURE_ID       1
+#define IR_STATE_STATE  0
+#define STEP8_DATA	0
+#define STEP16_DATA	2
+#define STEP32_DATA	4
+#define STEP64_DATA	6
+#define SIM_OFFSET	0
+#define STEP_DETECT	0
+#define CHOPCHOP_DATA_OFFSET   0
+#define LIFT_DISTANCE	0
+#define LIFT_ROTATION	4
+#define LIFT_GRAV_DIFF	8
+
+#ifdef CONFIG_CYPRESS_CAPSENSE_HSSP
+/* motosh_g_antcap_enabled */
+#define ANTCAP_ENABLED             0x01
+#define ANTCAP_AIRPLANE            0x02
+#define ANTCAP_CHECK_CAL           0x04
+
+/* motosh_g_conn_state */
+#define ANTCAP_USB                 0x80
+#define ANTCAP_HEADSET             0x40
+#define ANTCAP_APM                 0x20
+
+/* ANTCAP_CTRL, byte 0 */
+#define ANTCAP_CTRL0_ENABLE        0x80
+#define ANTCAP_CTRL0_RESET         0x40
+#define ANTCAP_CTRL0_GETCFG        0x20
+#define ANTCAP_CTRL0_SETCFG        0x10
+#define ANTCAP_CTRL0_FLASH         0x08
+#define ANTCAP_CTRL0_CAL           0x04
+#define ANTCAP_CTRL0_DISABLE       0x00
+
+/* ANTCAP_CTRL, byte 1 */
+#define ANTCAP_CTRL1_USB           ANTCAP_USB
+#define ANTCAP_CTRL1_HEADSET       ANTCAP_HEADSET
+
+#define ANTCAP_CTRL1_NULL          0
+
+#define ANTCAP_CTRL1_GET_INTF      1
+#define ANTCAP_CTRL1_GET_VERS      2
+#define ANTCAP_CTRL1_GET_VALS      3
+#define ANTCAP_CTRL1_GET_CAL       5
+#define ANTCAP_CTRL1_GET_FILT      6
+
+#define ANTCAP_CTRL1_SET_INTF      1
+#define ANTCAP_CTRL1_SET_VALS      3
+#define ANTCAP_CTRL1_SET_CAL       5
+#define ANTCAP_CTRL1_SET_FILT      6
+#define ANTCAP_CTRL1_SET_CALFLASH  7
+#endif
+
+/* The following macros are intended to be called with the stm IRQ handlers */
+/* only and refer to local variables in those functions. */
+#define STM16_TO_HOST(buf, x) ((int16_t) be16_to_cpu(*((u16 *) (buf+(x)))))
+#define STM32_TO_HOST(buf, x) ((int32_t) be32_to_cpu(*((u32 *) (buf+(x)))))
+
+#define MOTOSH_HALL_NO_DETECT 0
+#define MOTOSH_HALL_SOUTH_DETECT 1
+#define MOTOSH_HALL_NORTH_DETECT 2
+#define MOTOSH_HALL_NORTH_OR_SOUTH_DETECT 3
+
+enum check_touch_type {
+	NORMAL_CHECK,
+	FORCE_UPDATE
+};
+
+struct motosh_quickpeek_message {
+	u8 message;
+	u8 panel_state;
+	u8 buffer_id;
+	u8 commit;
+	u16 x1;
+	u16 y1;
+	u16 x2;
+	u16 y2;
+	struct list_head list;
+};
+
+struct motosh_aod_enabled_vote {
+	struct mutex vote_lock;
+	unsigned int vote;
+	unsigned int resolved_vote;
+};
+
+struct motosh_platform_data {
+	int (*init)(void);
+	void (*exit)(void);
+	int (*power_on)(void);
+	int (*power_off)(void);
+	int gpio_reset;
+	int gpio_bslen;
+	int gpio_wakeirq;
+	int gpio_int;
+	int gpio_sh_wake;
+	int gpio_sh_wake_resp;
+	unsigned int bslen_pin_active_value;
+	u16 lux_table[LIGHTING_TABLE_SIZE];
+	u8 brightness_table[LIGHTING_TABLE_SIZE];
+	int qd_pm_qos_latency;
+	unsigned int qd_pm_qos_timeout;
+	char fw_version[FW_VERSION_SIZE];
+	char fw_version_str[FW_VERSION_STR_MAX_LEN];
+	int ct406_detect_threshold;
+	int ct406_undetect_threshold;
+	int ct406_recalibrate_threshold;
+	int ct406_pulse_count;
+	int ct406_prox_gain;
+	int ct406_als_lux1_c0_mult;
+	int ct406_als_lux1_c1_mult;
+	int ct406_als_lux1_div;
+	int ct406_als_lux2_c0_mult;
+	int ct406_als_lux2_c1_mult;
+	int ct406_als_lux2_div;
+	int accel_orient;
+	int gyro_orient;
+	int mag_orient;
+	int panel_type;
+	int IR_config;
+	int cover_detect_polarity;
+	int aod_touch_mode;
+};
+
+/**
+ * as_node - Android sensor event node type
+ * @list: underlying linux list_head structure
+ * @data: data from the sensor event
+ *
+ * The as event queue is a list of these nodes
+ */
+struct as_node {
+	struct list_head list;
+	struct motosh_android_sensor_data data;
+};
+
+struct motosh_data {
+	struct i2c_client *client;
+	struct motosh_platform_data *pdata;
+	/* to avoid two i2c communications at the same time */
+	struct mutex lock;
+	struct work_struct irq_work;
+	struct delayed_work irq_wake_work;
+	struct workqueue_struct *irq_work_queue;
+	unsigned int wake_work_delay;
+	struct wake_lock wakelock;
+	struct wake_lock reset_wakelock;
+	struct input_dev *input_dev;
+
+	struct mutex sh_wakeup_lock;
+	int sh_wakeup_count;
+	int sh_lowpower_enabled;
+
+	int hw_initialized;
+
+	atomic_t enabled;
+	int irq;
+	int irq_wake;
+	unsigned int current_addr;
+	enum stm_mode mode;
+	unsigned char intp_mask;
+
+	dev_t motosh_dev_num;
+	struct class *motosh_class;
+	struct device *motosh_class_dev;
+	struct cdev as_cdev;
+	struct cdev ms_cdev;
+
+	struct switch_dev dsdev; /* Standard Dock switch */
+	struct switch_dev edsdev; /* Motorola Dock switch */
+
+	/* Android sensor event queue */
+	struct as_node as_queue;
+	/* Lock for modifying as_queue */
+	spinlock_t as_queue_lock;
+
+	wait_queue_head_t motosh_as_data_wq;
+
+	struct motosh_moto_sensor_data
+		motosh_ms_data_buffer[MOTOSH_MS_DATA_QUEUE_SIZE];
+	int motosh_ms_data_buffer_head;
+	int motosh_ms_data_buffer_tail;
+	wait_queue_head_t motosh_ms_data_wq;
+
+	struct regulator *regulator_1;
+	struct regulator *regulator_2;
+
+	/* Quick peek data */
+	struct workqueue_struct *quickpeek_work_queue;
+	struct work_struct quickpeek_work;
+	struct wake_lock quickpeek_wakelock;
+	struct list_head quickpeek_command_list;
+	wait_queue_head_t quickpeek_wait_queue;
+	atomic_t qp_enabled;
+	bool quickpeek_occurred;
+	unsigned long qw_irq_status;
+	struct motosh_aod_enabled_vote aod_enabled;
+	bool ignore_wakeable_interrupts;
+	int ignored_interrupts;
+	bool qp_in_progress;
+	bool qp_prepared;
+	struct mutex qp_list_lock;
+	struct pm_qos_request pm_qos_req_dma;
+
+	bool in_reset_and_init;
+	bool is_suspended;
+	bool resume_cleanup;
+	bool pending_wake_work;
+#if defined(CONFIG_FB)
+	struct notifier_block fb_notif;
+#endif
+	struct mmi_hall_data *hall_data;
+#ifdef CONFIG_CYPRESS_CAPSENSE_HSSP
+	struct power_supply antcap_psy;
+#endif
+};
+
+/* per algo config, request, and event registers */
+struct motosh_algo_info_t {
+	unsigned short config_bit;
+	unsigned char cfg_register;
+	unsigned char req_register;
+	unsigned char evt_register;
+	unsigned short evt_size;
+};
+
+#define ALGO_RQST_DATA_SIZE 28
+struct motosh_algo_requst_t {
+	char size;
+	char data[ALGO_RQST_DATA_SIZE];
+};
+
+int64_t motosh_timestamp_ns(void);
+int motosh_set_rv_6axis_update_rate(
+	struct motosh_data *ps_motosh,
+	const uint8_t newDelay);
+int motosh_set_rv_9axis_update_rate(
+	struct motosh_data *ps_motosh,
+	const uint8_t newDelay);
+int motosh_set_gravity_update_rate(
+	struct motosh_data *ps_motosh,
+	const uint8_t newDelay);
+int motosh_set_linear_accel_update_rate(
+	struct motosh_data *ps_motosh,
+	const uint8_t newDelay);
+
+irqreturn_t motosh_isr(int irq, void *dev);
+void motosh_irq_work_func(struct work_struct *work);
+
+irqreturn_t motosh_wake_isr(int irq, void *dev);
+void motosh_irq_wake_work_func(struct work_struct *work);
+int motosh_process_ir_gesture(struct motosh_data *ps_motosh,
+	unsigned char *data);
+
+long motosh_misc_ioctl(struct file *file, unsigned int cmd,
+	unsigned long arg);
+
+void motosh_reset(struct motosh_platform_data *pdata, unsigned char *cmdbuff);
+int motosh_reset_and_init(enum reset_mode mode);
+
+int motosh_as_data_buffer_write(struct motosh_data *ps_motosh,
+	unsigned char type, unsigned char *data, int size,
+	unsigned char status, bool timestamped);
+int motosh_as_data_buffer_read(struct motosh_data *ps_motosh,
+	struct motosh_android_sensor_data *buff);
+int motosh_ms_data_buffer_write(struct motosh_data *ps_motosh,
+	unsigned char type, unsigned char *data, int size, bool timestamped);
+int motosh_ms_data_buffer_read(struct motosh_data *ps_motosh,
+	struct motosh_moto_sensor_data *buff);
+
+/* motosh_i2c_write_read_no_reset()
+ */
+int motosh_i2c_write_read_no_reset(struct motosh_data *ps_motosh,
+	u8 *writebuff,
+	u8 *readbuff,
+	int writelen,
+	int readlen);
+/* motosh_i2c_read_no_reset()
+ */
+int motosh_i2c_read_no_reset(struct motosh_data *ps_motosh,
+	u8 *buf, int len);
+/* motosh_i2c_write_no_reset()
+ */
+int motosh_i2c_write_no_reset(struct motosh_data *ps_motosh,
+	u8 *buf, int len);
+/* motosh_i2c_write_read()
+ */
+int motosh_i2c_write_read(struct motosh_data *ps_motosh,
+	u8 *writebuff,
+	u8 *readbuff,
+	int writelen,
+	int readlen);
+/* motosh_i2c_read()
+ */
+int motosh_i2c_read(struct motosh_data *ps_motosh, u8 *buf, int len);
+/* motosh_i2c_write()
+ */
+int motosh_i2c_write(struct motosh_data *ps_motosh, u8 *buf, int len);
+int motosh_enable(struct motosh_data *ps_motosh);
+
+void motosh_wake(struct motosh_data *ps_motosh);
+void motosh_sleep(struct motosh_data *ps_motosh);
+void motosh_detect_lowpower_mode(unsigned char *cmdbuff);
+
+int motosh_load_brightness_table(struct motosh_data *ps_motosh,
+	unsigned char *cmdbuff);
+
+int motosh_irq_wake_work_func_display_locked(struct motosh_data *ps_motosh,
+	unsigned short irq_status);
+unsigned short motosh_get_interrupt_status(struct motosh_data *ps_motosh,
+	unsigned char reg, int *err);
+void motosh_quickpeek_work_func(struct work_struct *work);
+void motosh_quickpeek_reset_locked(struct motosh_data *ps_motosh);
+int motosh_quickpeek_disable_when_idle(struct motosh_data *ps_motosh);
+void motosh_vote_aod_enabled_locked(struct motosh_data *ps_motosh, int voter,
+	bool enable);
+void motosh_store_vote_aod_enabled(struct motosh_data *ps_motosh, int voter,
+	bool enable);
+void motosh_store_vote_aod_enabled_locked(struct motosh_data *ps_motosh,
+	int voter, bool enable);
+int motosh_resolve_aod_enabled_locked(struct motosh_data *ps_motosh);
+int motosh_display_handle_touch_locked(struct motosh_data *ps_motosh);
+int motosh_display_handle_quickpeek_locked(struct motosh_data *ps_motosh);
+void motosh_quickwakeup_init(struct motosh_data *ps_motosh);
+
+int motosh_boot_flash_erase(void);
+int motosh_get_version(struct motosh_data *ps_motosh);
+int motosh_get_version_str(struct motosh_data *ps_motosh);
+int switch_motosh_mode(enum stm_mode mode);
+int motosh_bootloadermode(struct motosh_data *ps_motosh);
+
+void motosh_time_sync(void);
+int64_t motosh_time_recover(int32_t hubshort, int64_t cur_time);
+int motosh_time_drift_comp(int64_t rec_hub, int64_t cur_time);
+
+void motosh_time_compare(void);
+
+int motosh_check_touch_config_locked(enum check_touch_type);
+
+extern struct motosh_data *motosh_misc_data;
+
+extern unsigned short motosh_g_acc_delay;
+extern unsigned short motosh_g_mag_delay;
+extern unsigned short motosh_g_gyro_delay;
+extern uint8_t motosh_g_rv_6axis_delay;
+extern uint8_t motosh_g_rv_9axis_delay;
+extern uint8_t motosh_g_gravity_delay;
+extern uint8_t motosh_g_linear_accel_delay;
+extern unsigned short motosh_g_baro_delay;
+extern unsigned short motosh_g_als_delay;
+extern unsigned short motosh_g_ir_gesture_delay;
+extern unsigned short motosh_g_ir_raw_delay;
+extern unsigned short motosh_g_step_counter_delay;
+extern unsigned long motosh_g_nonwake_sensor_state;
+extern unsigned short motosh_g_algo_state;
+extern unsigned char motosh_g_motion_dur;
+extern unsigned char motosh_g_zmotion_dur;
+extern unsigned char motosh_g_control_reg[MOTOSH_CONTROL_REG_SIZE];
+extern unsigned char motosh_g_mag_cal[MOTOSH_MAG_CAL_SIZE];
+extern unsigned char motosh_g_gyro_cal[MOTOSH_GYRO_CAL_SIZE];
+extern unsigned short motosh_g_control_reg_restore;
+extern unsigned char motosh_g_ir_config_reg[MOTOSH_IR_CONFIG_REG_SIZE];
+extern bool motosh_g_ir_config_reg_restore;
+extern bool motosh_g_booted;
+
+#ifdef CONFIG_CYPRESS_CAPSENSE_HSSP
+extern unsigned char motosh_g_antcap_cal[MOTOSH_ANTCAP_CAL_BUFF_SIZE];
+extern unsigned char motosh_g_antcap_cfg[MOTOSH_ANTCAP_CFG_BUFF_SIZE];
+extern unsigned char motosh_g_conn_state;
+extern unsigned char motosh_g_antcap_enabled;
+extern unsigned char motosh_g_antcap_hw_ready;
+extern unsigned char motosh_g_antcap_sw_ready;
+
+extern int motosh_antcap_register(void);
+extern int motosh_antcap_of_init(struct i2c_client *);
+extern int motosh_antcap_i2c_send_enable(unsigned char);
+extern int motosh_antcap_i2c_getcal_poll(unsigned char);
+extern int motosh_antcap_i2c_setcal_poll(unsigned char);
+extern int motosh_antcap_i2c_getver_poll(unsigned char);
+extern int motosh_antcap_i2c_flash_poll(unsigned char);
+extern int motosh_antcap_check_cal(void);
+extern int motosh_antcap_read_cal(void);
+#endif
+
+extern unsigned short motosh_i2c_retry_delay;
+
+extern const struct motosh_algo_info_t motosh_algo_info[];
+
+extern struct motosh_algo_requst_t motosh_g_algo_requst[];
+
+extern long motosh_time_delta;
+
+extern unsigned int motosh_irq_disable;
+
+extern unsigned long motosh_g_wake_sensor_state;
+
+extern unsigned char stat_string[];
+
+extern const struct file_operations motosh_as_fops;
+extern const struct file_operations motosh_ms_fops;
+extern const struct file_operations motosh_misc_fops;
+extern struct miscdevice motosh_misc_device;
+
+#endif  /* __MOTOSH_H__ */
diff --git a/include/uapi/linux/motosh.h b/include/uapi/linux/motosh.h
new file mode 100644
index 00000000000..db9bd26e767
--- /dev/null
+++ b/include/uapi/linux/motosh.h
@@ -0,0 +1,375 @@
+/*
+ * Copyright (c) 2015, Motorola Mobility LLC
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *     - Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     - Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     - Neither the name of Motorola Mobility nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL MOTOROLA MOBILITY LLC BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+ * DAMAGE.
+ */
+
+#ifndef _UAPI_MOTOSH_H
+#define _UAPI_MOTOSH_H
+
+/** The following define the IOCTL command values via the ioctl macros */
+#define MOTOSH_IOCTL_BASE		77
+#define MOTOSH_IOCTL_BOOTLOADERMODE	\
+		_IOW(MOTOSH_IOCTL_BASE, 0, unsigned char)
+#define MOTOSH_IOCTL_NORMALMODE	\
+		_IOW(MOTOSH_IOCTL_BASE, 1, unsigned char)
+#define MOTOSH_IOCTL_MASSERASE	\
+		_IOW(MOTOSH_IOCTL_BASE, 2, unsigned char)
+#define MOTOSH_IOCTL_SETSTARTADDR	\
+		_IOW(MOTOSH_IOCTL_BASE, 3, unsigned int)
+#define MOTOSH_IOCTL_TEST_READ	\
+		_IOR(MOTOSH_IOCTL_BASE, 4, unsigned char)
+#define MOTOSH_IOCTL_TEST_WRITE	\
+		_IOW(MOTOSH_IOCTL_BASE, 5, unsigned char)
+#define MOTOSH_IOCTL_TEST_WRITE_READ	\
+		_IOWR(MOTOSH_IOCTL_BASE, 6, unsigned short)
+#define MOTOSH_IOCTL_SET_MAG_DELAY	\
+		_IOW(MOTOSH_IOCTL_BASE, 7, unsigned short)
+#define MOTOSH_IOCTL_TEST_BOOTMODE	\
+		_IOW(MOTOSH_IOCTL_BASE, 8, unsigned char)
+#define MOTOSH_IOCTL_SET_ACC_DELAY	\
+		_IOW(MOTOSH_IOCTL_BASE, 9,  unsigned short)
+#define MOTOSH_IOCTL_SET_MOTION_DELAY	\
+		_IOW(MOTOSH_IOCTL_BASE, 10, unsigned char)
+#define MOTOSH_IOCTL_SET_GYRO_DELAY	\
+		_IOW(MOTOSH_IOCTL_BASE, 11, unsigned short)
+#define MOTOSH_IOCTL_SET_DEBUG	\
+		_IOW(MOTOSH_IOCTL_BASE, 12, unsigned char)
+#define MOTOSH_IOCTL_SET_USER_PROFILE	\
+		_IOW(MOTOSH_IOCTL_BASE, 13, int)
+#define MOTOSH_IOCTL_SET_GPS_DATA	\
+		_IOW(MOTOSH_IOCTL_BASE, 14, int)
+#define MOTOSH_IOCTL_SET_PRES_DELAY	\
+		_IOW(MOTOSH_IOCTL_BASE, 15, unsigned short)
+#define MOTOSH_IOCTL_SET_REF_ALTITUDE	\
+		_IOW(MOTOSH_IOCTL_BASE, 16, int)
+#define MOTOSH_IOCTL_SET_ACTIVE_MODE	\
+		_IOW(MOTOSH_IOCTL_BASE, 17, unsigned char)
+#define MOTOSH_IOCTL_SET_PASSIVE_MODE	\
+		_IOW(MOTOSH_IOCTL_BASE, 18, unsigned char)
+#define MOTOSH_IOCTL_SET_FACTORY_MODE	\
+		_IOW(MOTOSH_IOCTL_BASE, 19, unsigned char)
+#define MOTOSH_IOCTL_GET_SENSORS	\
+		_IOR(MOTOSH_IOCTL_BASE, 20, unsigned char)
+#define MOTOSH_IOCTL_SET_SENSORS	\
+		_IOW(MOTOSH_IOCTL_BASE, 21, unsigned char)
+#define MOTOSH_IOCTL_GET_VERSION	\
+		_IOR(MOTOSH_IOCTL_BASE, 22, unsigned char)
+#define MOTOSH_IOCTL_SET_MONITOR_DELAY	\
+		_IOW(MOTOSH_IOCTL_BASE, 23, unsigned char)
+#define MOTOSH_IOCTL_GET_DOCK_STATUS	\
+		_IOR(MOTOSH_IOCTL_BASE, 24, unsigned char)
+#define MOTOSH_IOCTL_SET_ORIENTATION_DELAY	\
+		_IOW(MOTOSH_IOCTL_BASE, 25, unsigned char)
+#define MOTOSH_IOCTL_SET_EQUIPMENT_TYPE	\
+		_IOW(MOTOSH_IOCTL_BASE, 26, unsigned char)
+#define MOTOSH_IOCTL_SET_POWER_MODE	\
+		_IOW(MOTOSH_IOCTL_BASE, 27, unsigned char)
+#define MOTOSH_IOCTL_GET_ALGOS	\
+		_IOR(MOTOSH_IOCTL_BASE, 28, char[MOTOSH_ALGO_SIZE])
+#define MOTOSH_IOCTL_SET_ALGOS	\
+		_IOW(MOTOSH_IOCTL_BASE, 29, char[MOTOSH_ALGO_SIZE])
+#define MOTOSH_IOCTL_GET_MAG_CAL \
+		_IOR(MOTOSH_IOCTL_BASE, 30, char[MOTOSH_MAG_CAL_SIZE])
+#define MOTOSH_IOCTL_SET_MAG_CAL \
+		_IOW(MOTOSH_IOCTL_BASE, 31, char[MOTOSH_MAG_CAL_SIZE])
+#define MOTOSH_IOCTL_GET_VERSION_STR \
+		_IOW(MOTOSH_IOCTL_BASE, 32, char[FW_VERSION_STR_MAX_LEN])
+#define MOTOSH_IOCTL_SET_MOTION_DUR	\
+		_IOW(MOTOSH_IOCTL_BASE, 33, unsigned int)
+#define MOTOSH_IOCTL_GET_FLASH_CRC \
+		_IOW(MOTOSH_IOCTL_BASE, 34, unsigned int)
+#define MOTOSH_IOCTL_SET_ZRMOTION_DUR	\
+		_IOW(MOTOSH_IOCTL_BASE, 35, unsigned int)
+#define MOTOSH_IOCTL_GET_WAKESENSORS	\
+		_IOR(MOTOSH_IOCTL_BASE, 36, unsigned char)
+#define MOTOSH_IOCTL_SET_WAKESENSORS	\
+		_IOW(MOTOSH_IOCTL_BASE, 37, unsigned char)
+#define MOTOSH_IOCTL_GET_VERNAME	\
+		_IOW(MOTOSH_IOCTL_BASE, 38, char[FW_VERSION_SIZE])
+#define MOTOSH_IOCTL_SET_POSIX_TIME	\
+		_IOW(MOTOSH_IOCTL_BASE, 39, char[1])
+#define MOTOSH_IOCTL_GET_GYRO_CAL \
+		_IOR(MOTOSH_IOCTL_BASE, 40, char[MOTOSH_GYRO_CAL_SIZE])
+#define MOTOSH_IOCTL_SET_GYRO_CAL \
+		_IOR(MOTOSH_IOCTL_BASE, 41, char[MOTOSH_GYRO_CAL_SIZE])
+#define MOTOSH_IOCTL_SET_ALS_DELAY \
+		_IOW(MOTOSH_IOCTL_BASE, 42, unsigned short)
+#define MOTOSH_IOCTL_SET_ALGO_REQ \
+		_IOR(MOTOSH_IOCTL_BASE, 43, char[1])
+#define MOTOSH_IOCTL_GET_ALGO_EVT \
+		_IOR(MOTOSH_IOCTL_BASE, 44, char[1])
+#define MOTOSH_IOCTL_ENABLE_BREATHING \
+		_IOW(MOTOSH_IOCTL_BASE, 45, unsigned char)
+#define MOTOSH_IOCTL_WRITE_REG \
+		_IOR(MOTOSH_IOCTL_BASE, 46, char[1])
+#define MOTOSH_IOCTL_READ_REG \
+		_IOR(MOTOSH_IOCTL_BASE, 47, char[1])
+#define MOTOSH_IOCTL_SET_STEP_COUNTER_DELAY	\
+		_IOW(MOTOSH_IOCTL_BASE, 48,  unsigned short)
+#define MOTOSH_IOCTL_GET_IR_CONFIG \
+		_IOWR(MOTOSH_IOCTL_BASE, 49, char[1])
+#define MOTOSH_IOCTL_SET_IR_CONFIG \
+		_IOW(MOTOSH_IOCTL_BASE, 50, char[1])
+#define MOTOSH_IOCTL_SET_IR_GESTURE_DELAY	\
+		_IOW(MOTOSH_IOCTL_BASE, 51,  unsigned short)
+#define MOTOSH_IOCTL_SET_IR_RAW_DELAY	\
+		_IOW(MOTOSH_IOCTL_BASE, 52,  unsigned short)
+#define MOTOSH_IOCTL_GET_BOOTED \
+		_IOR(MOTOSH_IOCTL_BASE, 53, unsigned char)
+#define MOTOSH_IOCTL_SET_LOWPOWER_MODE \
+		_IOW(MOTOSH_IOCTL_BASE, 54, char)
+#define MOTOSH_IOCTL_SET_FLUSH \
+		_IOW(MOTOSH_IOCTL_BASE, 55, int)
+#define MOTOSH_IOCTL_SET_ANTCAP_ENABLE \
+		_IOW(MOTOSH_IOCTL_BASE, 56, unsigned char)
+#define MOTOSH_IOCTL_SET_ANTCAP_CFG \
+		_IOW(MOTOSH_IOCTL_BASE, 57, unsigned char*)
+#define MOTOSH_IOCTL_SET_ANTCAP_CAL \
+		_IOW(MOTOSH_IOCTL_BASE, 58, unsigned char*)
+#define MOTOSH_IOCTL_SET_HEADSET_STATE \
+		_IOW(MOTOSH_IOCTL_BASE, 59, unsigned char)
+#define MOTOSH_IOCTL_SET_USBCONN_STATE \
+		_IOW(MOTOSH_IOCTL_BASE, 60, unsigned char)
+#define MOTOSH_IOCTL_SET_AIRPLANE_MODE \
+		_IOW(MOTOSH_IOCTL_BASE, 61, unsigned char)
+#define MOTOSH_IOCTL_PASSTHROUGH \
+		_IOR(MOTOSH_IOCTL_BASE, 62, char[1])
+
+
+/* Used in HAL */
+#define FW_VERSION_SIZE 12
+#define FW_VERSION_STR_MAX_LEN 256
+
+#define MOTOSH_MAXDATA_LENGTH		256
+/* The SH register number/ID size. */
+#define MOTOSH_REGISTER_LEN		1
+/* Used in libsensorhub. Maximum that can be RX/TX with READ/WRITE_REG IOCTL */
+#define MOTOSH_TX_PAYLOAD_LEN	(MOTOSH_MAXDATA_LENGTH - MOTOSH_REGISTER_LEN)
+#define MOTOSH_RX_PAYLOAD_LEN	(MOTOSH_MAXDATA_LENGTH)
+
+/* Not used in user space */
+#define MOTOSH_CONTROL_REG_SIZE 200
+/* Not used in user space */
+#define MOTOSH_STATUS_REG_SIZE 8
+/* Not used */
+#define MOTOSH_TOUCH_REG_SIZE  8
+/* Used in HAL */
+#define MOTOSH_MAG_CAL_SIZE 32
+#define MOTOSH_GYRO_CAL_SIZE 198 /* 33 entries - 6 bytes each */
+/* Not used */
+#define STM_AOD_INSTRUMENTATION_REG_SIZE 256
+/* Not used in user space */
+#define MOTOSH_AS_DATA_BUFF_SIZE 20
+/* Not used in user space */
+#define MOTOSH_MS_DATA_BUFF_SIZE 20
+/* Used ONLY in HAL */
+#define MOTOSH_CAMERA_DATA 0x01
+/* Used only for ioctl def */
+#define MOTOSH_ALGO_SIZE         2
+/* Used in kernel and HAL */
+#define MOTOSH_PASSTHROUGH_SIZE 16
+
+#define MOTOSH_ANTCAP_CAL_BUFF_SIZE  64
+#define MOTOSH_ANTCAP_CFG_BUFF_SIZE  64
+
+/* Mask values */
+
+/* Non wakable sensors */
+#define M_ACCEL			0x000001
+#define M_GYRO			0x000002
+#define M_PRESSURE		0x000004
+#define M_ECOMPASS		0x000008
+#define M_TEMPERATURE	0x000010
+#define M_ALS			0x000020
+#define M_STEP_DETECTOR	0x000040
+#define M_STEP_COUNTER	0x000080
+
+#define M_LIN_ACCEL		0x000100
+#define M_QUAT_6AXIS	0x000200
+#define M_GRAVITY		0x000400
+#define M_DISP_ROTATE		0x000800
+#define M_DISP_BRIGHTNESS	0x001000
+#define M_IR_GESTURE        0x002000
+#define M_IR_RAW            0x004000
+
+#define M_UNCALIB_GYRO		0x008000
+#define M_UNCALIB_MAG		0x010000
+#define M_IR_OBJECT		0x020000
+#define M_QUAT_9AXIS		0x040000
+
+/* wake sensor status */
+#define M_DOCK			0x000001
+#define M_PROXIMITY		0x000002
+#define M_TOUCH			0x000004
+#define M_COVER			0x000008
+#define M_QUICKPEEK		0x000010
+#define M_LIFT			0x000020
+#define M_INIT_COMPLETE		0x000040
+#define M_HUB_RESET		0x000080
+
+#define M_FLATUP		0x000100
+#define M_FLATDOWN		0x000200
+#define M_STOWED		0x000400
+#define M_CAMERA_ACT		0x000800
+#define M_NFC			0x001000
+#define M_SIM			0x002000
+#define M_CHOPCHOP		0x004000
+#define M_LOG_MSG		0x008000
+
+/*#define M_UNUSED      0x010000*/
+/*#define M_UNUSED      0x020000*/
+#define M_GLANCE        0x040000
+/*#define M_UNUSED      0x080000*/
+/*#define M_UNUSED      0x100000*/
+/*#define M_UNUSED      0x200000*/
+/*#define M_UNUSED      0x400000*/
+/*#define M_UNUSED      0x800000*/
+
+
+/* algo config mask */
+#define M_MMOVEME               0x000001
+#define M_NOMMOVE               0x000002
+#define M_ALGO_MODALITY         0x000008
+#define M_ALGO_ORIENTATION      0x000010
+#define M_ALGO_STOWED           0x000020
+#define M_ALGO_ACCUM_MODALITY   0x000040
+#define M_ALGO_ACCUM_MVMT       0x000080
+
+#define M_IR_WAKE_GESTURE       0x200000
+
+/* generic interrupt mask */
+#define M_GENERIC_INTRPT        0x0080
+
+/* algo index */
+#define MOTOSH_IDX_MODALITY        0
+#define MOTOSH_IDX_ORIENTATION     1
+#define MOTOSH_IDX_STOWED          2
+#define MOTOSH_IDX_ACCUM_MODALITY  3
+#define MOTOSH_IDX_ACCUM_MVMT      4
+
+#define MOTOSH_NUM_ALGOS           5
+
+#define MOTOSH_EVT_SZ_TRANSITION   7
+#define MOTOSH_EVT_SZ_ACCUM_STATE  2
+#define MOTOSH_EVT_SZ_ACCUM_MVMT   4
+
+struct motosh_android_sensor_data {
+	int64_t timestamp;
+	unsigned char type;
+	unsigned char data[MOTOSH_AS_DATA_BUFF_SIZE];
+	int size;
+	unsigned char status;
+};
+
+struct motosh_moto_sensor_data {
+	int64_t timestamp;
+	unsigned char type;
+	unsigned char data[MOTOSH_MS_DATA_BUFF_SIZE];
+	int size;
+};
+
+enum MOTOSH_data_types {
+	DT_ACCEL,
+	DT_GYRO,
+	DT_PRESSURE,
+	DT_MAG,
+	DT_ORIENT,
+	DT_TEMP,
+	DT_ALS,
+	DT_LIN_ACCEL,
+	DT_QUAT_6AXIS,
+	DT_QUAT_9AXIS,
+	DT_GRAVITY,
+	DT_DISP_ROTATE,
+	DT_DISP_BRIGHT,
+	DT_DOCK,
+	DT_PROX,
+	DT_COVER,
+	DT_FLAT_UP,
+	DT_FLAT_DOWN,
+	DT_STOWED,
+	DT_MMMOVE,
+	DT_NOMOVE,
+	DT_CAMERA_ACT,
+	DT_NFC,
+	DT_ALGO_EVT,
+	DT_ACCUM_MVMT,
+	DT_IR_GESTURE,
+	DT_IR_RAW,
+	DT_IR_OBJECT,
+	DT_SIM,
+	DT_RESET,
+	DT_GENERIC_INT,
+	DT_STEP_COUNTER,
+	DT_STEP_DETECTOR,
+	DT_UNCALIB_GYRO,
+	DT_UNCALIB_MAG,
+	DT_CHOPCHOP,
+	DT_FLUSH,
+	DT_LIFT,
+	DT_GYRO_CAL,
+	DT_GLANCE,
+};
+
+enum {
+	NO_DOCK,
+	DESK_DOCK,
+	CAR_DOCK
+};
+
+enum stm_mode {
+	UNINITIALIZED,
+	BOOTMODE,
+	NORMALMODE,
+	FACTORYMODE
+};
+
+enum reset_mode {
+	START_RESET,
+	COMPLETE_INIT
+};
+
+enum stm_commands {
+	PASSWORD_RESET,
+	MASS_ERASE,
+	PROGRAM_CODE,
+	END_FIRMWARE,
+	PASSWORD_RESET_DEFAULT,
+	CRC_CHECK
+};
+
+struct stm_response {
+	/* 0x0080 */
+	unsigned short header;
+	unsigned char len_lsb;
+	unsigned char len_msb;
+	unsigned char cmd;
+	unsigned char data;
+	unsigned char crc_lsb;
+	unsigned char crc_msb;
+};
+
+#endif /*_UAPI_MOTOSH_H*/
-- 
2.11.0

