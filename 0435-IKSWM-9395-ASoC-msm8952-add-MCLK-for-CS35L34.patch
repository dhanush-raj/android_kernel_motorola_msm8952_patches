From 7b3d8627ffbcd27fa5570bb6c2e9b81c7c39654c Mon Sep 17 00:00:00 2001
From: SeungYoon Lee <w22905@motorola.com>
Date: Wed, 28 Oct 2015 17:11:30 -0500
Subject: [PATCH 435/959] IKSWM-9395 ASoC: msm8952: add MCLK for CS35L34

set LPASS clock properly to get 12.288MHz clock and feed
that to GPIO where CS35L34 expects to get MCLK.

Change-Id: I439422025a95f4818b90dfc0738d394717548175
Signed-off-by: SeungYoon Lee <w22905@motorola.com>
Reviewed-on: http://gerrit.mot.com/795579
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Joseph Dwyer <josephdwyer@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 sound/soc/codecs/msm8x16-wcd.h |  2 +
 sound/soc/msm/msm8952.c        | 96 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 98 insertions(+)

diff --git a/sound/soc/codecs/msm8x16-wcd.h b/sound/soc/codecs/msm8x16-wcd.h
index 45fd2e04773..99f64644fce 100644
--- a/sound/soc/codecs/msm8x16-wcd.h
+++ b/sound/soc/codecs/msm8x16-wcd.h
@@ -225,8 +225,10 @@ struct msm8916_asoc_mach_data {
 	atomic_t mclk_rsc_ref;
 	atomic_t mclk_enabled;
 	atomic_t wsa_mclk_rsc_ref;
+	atomic_t l34_mclk_rsc_ref;
 	struct mutex cdc_mclk_mutex;
 	struct mutex wsa_mclk_mutex;
+	struct mutex l34_mclk_mutex;
 	struct delayed_work disable_mclk_work;
 	struct afe_digital_clk_cfg digital_cdc_clk;
 	struct afe_clk_set digital_cdc_core_clk;
diff --git a/sound/soc/msm/msm8952.c b/sound/soc/msm/msm8952.c
index d875b1b5b84..1729f6250bf 100644
--- a/sound/soc/msm/msm8952.c
+++ b/sound/soc/msm/msm8952.c
@@ -158,6 +158,18 @@ static struct afe_clk_set wsa_ana_clk = {
 	0,
 };
 
+#ifdef CONFIG_SND_SOC_CS35L34
+static struct afe_clk_cfg l34_ana_clk = {
+	AFE_API_VERSION_I2S_CONFIG,
+	0,
+	Q6AFE_LPASS_OSR_CLK_12_P288_MHZ,
+	Q6AFE_LPASS_CLK_SRC_INTERNAL,
+	Q6AFE_LPASS_CLK_ROOT_DEFAULT,
+	Q6AFE_LPASS_MODE_CLK2_VALID,
+	0,
+};
+#endif
+
 static char const *rx_bit_format_text[] = {"S16_LE", "S24_LE", "S24_3LE"};
 static const char *const ter_mi2s_tx_ch_text[] = {"One", "Two"};
 static const char *const loopback_mclk_text[] = {"DISABLE", "ENABLE"};
@@ -1191,6 +1203,52 @@ static int msm8952_ext_audio_switch_event(struct snd_soc_dapm_widget *w,
 	return ret;
 }
 
+#ifdef CONFIG_SND_SOC_CS35L34
+static int msm8952_enable_cs35l34_mclk(struct snd_soc_card *card, bool enable)
+{
+	int ret = 0;
+	struct msm8916_asoc_mach_data *pdata = snd_soc_card_get_drvdata(card);
+
+	mutex_lock(&pdata->l34_mclk_mutex);
+	if (enable) {
+		if (!atomic_read(&pdata->l34_mclk_rsc_ref)) {
+			pr_debug("%s: going to enable afe clock for cs35l34\n", __func__);
+			l34_ana_clk.clk_val2 =
+					Q6AFE_LPASS_OSR_CLK_12_P288_MHZ;
+			ret = afe_set_lpass_clock(
+					AFE_PORT_ID_SECONDARY_MI2S_RX,
+					&l34_ana_clk);
+			if (ret < 0) {
+				pr_err("%s: failed to enable mclk %d\n",
+					__func__, ret);
+				goto done;
+			}
+		}
+		atomic_inc(&pdata->l34_mclk_rsc_ref);
+	} else {
+		if (!atomic_read(&pdata->l34_mclk_rsc_ref))
+			goto done;
+		if (!atomic_dec_return(&pdata->l34_mclk_rsc_ref)) {
+			pr_debug("%s: going to disable afe clock for cs35l34\n", __func__);
+			l34_ana_clk.clk_val2 =
+					Q6AFE_LPASS_OSR_CLK_DISABLE;
+			ret = afe_set_lpass_clock(
+					AFE_PORT_ID_SECONDARY_MI2S_RX,
+					&l34_ana_clk);
+			if (ret < 0) {
+				pr_err("%s: failed to disable mclk %d\n",
+					__func__, ret);
+				goto done;
+			}
+		}
+	}
+
+done:
+	mutex_unlock(&pdata->l34_mclk_mutex);
+	return ret;
+}
+#endif
+
 static int msm8952_enable_wsa_mclk(struct snd_soc_card *card, bool enable)
 {
 	int ret = 0;
@@ -1621,6 +1679,23 @@ static int msm_quin_mi2s_snd_startup(struct snd_pcm_substream *substream)
 		pr_err("failed to enable sclk\n");
 		return ret;
 	}
+#ifdef CONFIG_SND_SOC_CS35L34
+	pr_debug("%s, going to activate cs35l34_clk\n", __func__);
+	ret = msm_gpioset_activate(CLIENT_WCD_INT, "cs35l34_clk");
+	if (ret < 0) {
+		pr_err("failed to enable codec gpios, cs35l34_clk\n");
+		goto err;
+	}
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+		pr_debug("%s, going to enable cs35l34_mclk\n", __func__);
+		ret = msm8952_enable_cs35l34_mclk(card, true);
+		if (ret < 0) {
+			pr_err("%s: failed to enable mclk for cs35l34 %d\n",
+				__func__, ret);
+			return ret;
+		}
+	}
+#endif
 	ret = msm_gpioset_activate(CLIENT_WCD_INT, "quin_i2s");
 	if (ret < 0) {
 		pr_err("failed to enable codec gpios\n");
@@ -1660,6 +1735,24 @@ static void msm_quin_mi2s_snd_shutdown(struct snd_pcm_substream *substream)
 						__func__, "quin_i2s");
 			return;
 		}
+#ifdef CONFIG_SND_SOC_CS35L34
+		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
+			pr_debug("%s, going to disable cs35l34 mclk\n", __func__);
+			ret = msm8952_enable_cs35l34_mclk(card, false);
+			if (ret < 0) {
+				pr_err("%s: failed to disable mclk for l34 %d\n",
+					__func__, ret);
+				return;
+			}
+		}
+		pr_debug("%s, going to de-activate cs35l34_clk\n", __func__);
+		ret = msm_gpioset_suspend(CLIENT_WCD_INT, "cs35l34_clk");
+		if (ret < 0) {
+			pr_err("%s: gpio set cannot be de-activated %s",
+						__func__, "cs35l34_clk");
+			return;
+		}
+#endif
 	}
 }
 
@@ -3218,6 +3311,8 @@ static int msm8952_asoc_machine_probe(struct platform_device *pdev)
 		mutex_init(&pdata->wsa_mclk_mutex);
 		atomic_set(&pdata->wsa_mclk_rsc_ref, 0);
 	}
+	mutex_init(&pdata->l34_mclk_mutex);
+	atomic_set(&pdata->l34_mclk_rsc_ref, 0);
 	atomic_set(&pdata->mclk_enabled, false);
 	atomic_set(&quat_mi2s_clk_ref, 0);
 	atomic_set(&quin_mi2s_clk_ref, 0);
@@ -3284,6 +3379,7 @@ static int msm8952_asoc_machine_remove(struct platform_device *pdev)
 		}
 		mutex_destroy(&pdata->wsa_mclk_mutex);
 	}
+	mutex_destroy(&pdata->l34_mclk_mutex);
 	snd_soc_unregister_card(card);
 	mutex_destroy(&pdata->cdc_mclk_mutex);
 	return 0;
-- 
2.11.0

