From c547cfa73d0b99f66fdfab3887b0b14bfe5ff80b Mon Sep 17 00:00:00 2001
From: SeungYoon Lee <w22905@motorola.com>
Date: Mon, 21 Mar 2016 14:34:08 -0500
Subject: [PATCH 832/959] IKSWM-26806 ASoC: msm8952: ospl: allow internal
 configuration

if external configurations aren't exist in the firmware location,
use internal configurations from QDSP OSPL modules.

Change-Id: Ib5aef504de8741953ac3c00ba320f4c19c1f7e9a
Signed-off-by: SeungYoon Lee <w22905@motorola.com>
Reviewed-on: http://gerrit.mot.com/835487
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 sound/soc/msm/ospl2xx.c | 129 ++++++++++++++++++++++++++++++++----------------
 1 file changed, 87 insertions(+), 42 deletions(-)

diff --git a/sound/soc/msm/ospl2xx.c b/sound/soc/msm/ospl2xx.c
index 4edbb97edb4..0a9463d1478 100644
--- a/sound/soc/msm/ospl2xx.c
+++ b/sound/soc/msm/ospl2xx.c
@@ -29,6 +29,7 @@ static char const *ospl2xx_ext_config_tables[] = {
 	"opalum.tx.ext.config.2",
 };
 
+static int ext_config_loaded;
 static const struct firmware
 		*ospl2xx_config[ARRAY_SIZE(ospl2xx_ext_config_tables)];
 
@@ -41,7 +42,7 @@ static void ospl2xx_config_print(int i, char const *firmware, int size)
 		config[size] = '\0';
 		pr_debug("index[%d] size[%d] config[%s]\n", i, size, config);
 	} else {
-		pr_err("%s: can't find ospl external configs\n", __func__);
+		pr_debug("%s: can't find ospl external configs\n", __func__);
 	}
 }
 
@@ -54,7 +55,7 @@ static void ospl2xx_load_config(struct work_struct *work)
 	struct snd_soc_codec *codec = msm8x16_wcd->codec;
 
 	if (codec == NULL) {
-		pr_err("%s: can't load external configuration\n", __func__);
+		pr_debug("%s: can't load external configuration\n", __func__);
 		return;
 	}
 
@@ -65,12 +66,13 @@ static void ospl2xx_load_config(struct work_struct *work)
 		if (ret ||
 		    ospl2xx_config[i]->data == NULL ||
 		    ospl2xx_config[i]->size <= 0) {
-			pr_err("failed to load config[%d], ret=%d\n", i, ret);
+			pr_debug("failed to load config[%d], ret=%d\n", i, ret);
 		} else {
-			pr_info("loading external configuration %s\n",
+			pr_debug("loading external configuration %s\n",
 				ospl2xx_ext_config_tables[i]);
 			ospl2xx_config_print(i, ospl2xx_config[i]->data,
 						ospl2xx_config[i]->size);
+			ext_config_loaded = 1;
 		}
 	}
 	mutex_unlock(&lr_lock);
@@ -147,7 +149,7 @@ int ospl2xx_afe_set_single_param(uint32_t param_id, int32_t arg1)
 
 	result = ospl2xx_afe_apr_send_pkt(config, index);
 	if (result) {
-		pr_err("%s: set_param for port %d failed with code %d\n",
+		pr_debug("%s: set_param for port %d failed with code %d\n",
 			 __func__, port_id, result);
 	} else {
 		pr_debug("%s: set_param packet param 0x%08X to module 0x%08X\n",
@@ -228,7 +230,7 @@ int ospl2xx_afe_set_tri_param(uint32_t param_id,
 	config->data.reserved = 0;
 	result = ospl2xx_afe_apr_send_pkt(config, index);
 	if (result) {
-		pr_err("%s: set_param for port %d failed with code %d\n",
+		pr_debug("%s: set_param for port %d failed with code %d\n",
 			__func__, port_id, result);
 	} else {
 		pr_debug("%s: set_param packet param 0x%08X to module 0x%08X\n",
@@ -335,7 +337,7 @@ int ospl2xx_afe_set_ext_config_param(const char *string, uint32_t param_id)
 		/* Send the actual message */
 		result = ospl2xx_afe_apr_send_pkt(config, index);
 		if (result) {
-			pr_err("%s: set_param for port %d failed, code %d\n",
+			pr_debug("%s: set_param for port %d failed, code %d\n",
 				__func__, port_id, result);
 		} else {
 			pr_debug("%s: set_param param 0x%08X to module 0x%08X\n",
@@ -435,7 +437,7 @@ int ospl2xx_afe_get_param(uint32_t param_id)
 
 	result = ospl2xx_afe_apr_send_pkt(config, index);
 	if (result) {
-		pr_err("%s: get_param for port %d failed with code %d\n",
+		pr_debug("%s: get_param for port %d failed with code %d\n",
 			__func__, port_id, result);
 	} else {
 		pr_debug("%s: get_param packet param 0x%08X to module 0x%08X\n",
@@ -449,6 +451,8 @@ int ospl2xx_afe_get_param(uint32_t param_id)
 #define NUM_RX_CONFIGS 3
 static int ext_rxconfig;
 static int ext_txconfig = NUM_RX_CONFIGS;
+static int int_rxconfig;
+static int int_txconfig;
 
 static int ospl2xx_update_rx_ext_config(void)
 {
@@ -469,7 +473,7 @@ static int ospl2xx_update_rx_ext_config(void)
 	memcpy(config, ospl2xx_config[i]->data, size);
 	config[size] = '\0';
 
-	pr_info("%s: ospl2xx_config[%d] size[%d]\n",
+	pr_debug("%s: ospl2xx_config[%d] size[%d]\n",
 		__func__, i, size);
 
 	ospl2xx_afe_set_ext_config_param(config,
@@ -503,7 +507,7 @@ static int ospl2xx_update_tx_ext_config(void)
 	memcpy(config, ospl2xx_config[i]->data, size);
 	config[size] = '\0';
 
-	pr_info("%s: ospl2xx_config[%d] size[%d]\n",
+	pr_debug("%s: ospl2xx_config[%d] size[%d]\n",
 		__func__, i, size);
 
 	ospl2xx_afe_set_ext_config_param(config,
@@ -517,6 +521,28 @@ error_return:
 	return 0;
 }
 
+static int ospl2xx_update_rx_int_config(void)
+{
+	pr_debug("%s: set configuration index = %d\n",
+		__func__, int_rxconfig);
+
+	ospl2xx_afe_set_single_param(
+		PARAM_ID_OPALUM_RX_SET_USE_CASE, int_rxconfig);
+
+	return 0;
+}
+
+static int ospl2xx_update_tx_int_config(void)
+{
+	pr_debug("%s: set configuration index = %d\n",
+		__func__, int_txconfig);
+
+	ospl2xx_afe_set_single_param(
+		PARAM_ID_OPALUM_TX_SET_USE_CASE, int_txconfig);
+
+	return 0;
+}
+
 /*
  * AFE callback
  */
@@ -627,18 +653,19 @@ static int ospl2xx_rx_int_config_get(struct snd_kcontrol *kcontrol,
 static int ospl2xx_rx_int_config_put(struct snd_kcontrol *kcontrol,
 			struct snd_ctl_elem_value *ucontrol)
 {
-	if (ucontrol->value.integer.value[0] < 0 ||
-	    ucontrol->value.integer.value[0] >= NUM_RX_CONFIGS)
-		return 0;
-
-	pr_info("%s: set configuration index = %d\n",
-		__func__, (int)ucontrol->value.integer.value[0]);
+	int i = 0, ret = 0;
 
-	ospl2xx_afe_set_single_param(
-		PARAM_ID_OPALUM_RX_SET_USE_CASE,
-		(int)ucontrol->value.integer.value[0]);
+	i = ucontrol->value.integer.value[0];
+	if (i < 0 || i >= NUM_RX_CONFIGS)
+		return -ERANGE;
 
-	return 0;
+	mutex_lock(&lr_lock);
+	if (int_rxconfig != i) {
+		int_rxconfig = i;
+		ret = ospl2xx_update_rx_int_config();
+	}
+	mutex_unlock(&lr_lock);
+	return ret;
 }
 static char const *ospl2xx_rx_int_config_index[] = {
 	"opalum.rx.int.config.0",
@@ -712,7 +739,10 @@ static const struct soc_enum ospl2xx_rx_ext_config_enum[] = {
 static int ospl2xx_audio_mode_get(struct snd_kcontrol *kcontrol,
 			struct snd_ctl_elem_value *ucontrol)
 {
-	ucontrol->value.integer.value[0] = ext_rxconfig;
+	if (ext_config_loaded)
+		ucontrol->value.integer.value[0] = ext_rxconfig;
+	else
+		ucontrol->value.integer.value[0] = int_rxconfig;
 	return 0;
 }
 
@@ -726,12 +756,21 @@ static int ospl2xx_audio_mode_put(struct snd_kcontrol *kcontrol,
 		return -ERANGE;
 
 	mutex_lock(&lr_lock);
-	if (ext_rxconfig != i) {
-		ext_rxconfig = i;
-		ext_txconfig = i + NUM_RX_CONFIGS;
-		ret = ospl2xx_update_rx_ext_config();
-		if (ret == 0)
-			ret = ospl2xx_update_tx_ext_config();
+	if (ext_config_loaded) {
+		if (ext_rxconfig != i) {
+			ext_rxconfig = i;
+			ext_txconfig = i + NUM_RX_CONFIGS;
+			ret = ospl2xx_update_rx_ext_config();
+			if (ret == 0)
+				ret = ospl2xx_update_tx_ext_config();
+		}
+	} else {
+		if (int_rxconfig != i) {
+			int_rxconfig = i;
+			int_txconfig = i;
+			ospl2xx_update_rx_int_config();
+			ospl2xx_update_tx_int_config();
+		}
 	}
 	mutex_unlock(&lr_lock);
 	return ret;
@@ -796,7 +835,7 @@ static int ospl2xx_rx_put_temp_cal(struct snd_kcontrol *kcontrol,
 	int32_t temperature = ucontrol->value.integer.value[2];
 
 	mutex_lock(&mr_lock);
-	pr_info("%s, acc[%d], cnt[%d], tmpr[%d]\n", __func__,
+	pr_debug("%s, acc[%d], cnt[%d], tmpr[%d]\n", __func__,
 			accumulated, count, temperature);
 	ospl2xx_afe_set_tri_param(
 			PARAM_ID_OPALUM_RX_TEMP_CAL_DATA,
@@ -804,8 +843,13 @@ static int ospl2xx_rx_put_temp_cal(struct snd_kcontrol *kcontrol,
 	mutex_unlock(&mr_lock);
 
 	mutex_lock(&lr_lock);
-	ospl2xx_update_rx_ext_config();
-	ospl2xx_update_tx_ext_config();
+	if (ext_config_loaded) {
+		ospl2xx_update_rx_ext_config();
+		ospl2xx_update_tx_ext_config();
+	} else {
+		ospl2xx_update_rx_int_config();
+		ospl2xx_update_tx_int_config();
+	}
 	mutex_unlock(&lr_lock);
 
 	return 0;
@@ -914,18 +958,19 @@ static int ospl2xx_tx_int_config_get(struct snd_kcontrol *kcontrol,
 static int ospl2xx_tx_int_config_put(struct snd_kcontrol *kcontrol,
 			struct snd_ctl_elem_value *ucontrol)
 {
-	if (ucontrol->value.integer.value[0] < 0 ||
-	    ucontrol->value.integer.value[0] >= NUM_TX_CONFIGS)
-		return 0;
-
-	pr_info("%s: set configuration index = %d\n",
-		__func__, (int)ucontrol->value.integer.value[0]);
+	int i = 0, ret = 0;
 
-	ospl2xx_afe_set_single_param(
-		PARAM_ID_OPALUM_TX_SET_USE_CASE,
-		(int)ucontrol->value.integer.value[0]);
+	i = ucontrol->value.integer.value[0];
+	if (i < 0 || i >= NUM_TX_CONFIGS)
+		return -ERANGE;
 
-	return 0;
+	mutex_lock(&lr_lock);
+	if (int_txconfig != i) {
+		int_txconfig = i;
+		ret = ospl2xx_update_tx_int_config();
+	}
+	mutex_unlock(&lr_lock);
+	return ret;
 }
 static char const *ospl2xx_tx_int_config_index[] = {
 	"opalum.tx.int.config.0",
@@ -982,8 +1027,8 @@ static int ospl2xx_reload_ext_put(struct snd_kcontrol *kcontrol,
 	struct msm8x16_wcd_priv *msm8x16_wcd =
 		snd_soc_codec_get_drvdata(codec);
 
-	if (reload) {
-		pr_info("re-loading configuration files\n");
+	if (reload && ext_config_loaded) {
+		pr_debug("re-loading configuration files\n");
 		for (i = 0; i < ARRAY_SIZE(ospl2xx_ext_config_tables); i++)
 			release_firmware(ospl2xx_config[i]);
 
-- 
2.11.0

