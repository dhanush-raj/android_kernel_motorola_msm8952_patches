From e0224d8cf28608a6a8e3f3e9f188e97a257479bb Mon Sep 17 00:00:00 2001
From: Jason Jae Hyun Koh <jason.koh@motorola.com>
Date: Thu, 10 Dec 2015 11:16:59 -0600
Subject: [PATCH 544/959] IKSWM-12562 drivers:misc:stml0xx: Defer irq wake work
 to post-resume

Ensure irq wake work is not processed prior to stml0xx_resume to
prevent failures from early SPI transfer calls.

Change-Id: I270ef8410da6fb4b113d3a98a6d6c453c986ac6b
Signed-off-by: Jason Jae Hyun Koh <jason.koh@motorola.com>
Reviewed-on: http://gerrit.mot.com/806368
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Robert Wiegand <Robert.P.Wiegand@motorola.com>
Reviewed-by: Daniel Moore <dtmoore@motorola.com>
Reviewed-by: Ravikumar Vembu <raviv@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/misc/stml0xx/stml0xx_core.c     | 29 +++++++++++++++++++++++++----
 drivers/misc/stml0xx/stml0xx_wake_irq.c |  9 +++++++++
 include/linux/stml0xx.h                 |  2 ++
 3 files changed, 36 insertions(+), 4 deletions(-)

diff --git a/drivers/misc/stml0xx/stml0xx_core.c b/drivers/misc/stml0xx/stml0xx_core.c
index a26f88037f2..1bbae7d7028 100644
--- a/drivers/misc/stml0xx/stml0xx_core.c
+++ b/drivers/misc/stml0xx/stml0xx_core.c
@@ -988,6 +988,7 @@ static int stml0xx_probe(struct spi_device *spi)
 	}
 
 	ps_stml0xx->is_suspended = false;
+	ps_stml0xx->irq_wake_work_pending = false;
 
 	/* We could call switch_stml0xx_mode(NORMALMODE) at this point, but
 	 * instead we will hold the part in reset and only go to NORMALMODE on a
@@ -1092,6 +1093,7 @@ static int stml0xx_resume(struct device *dev)
 {
 	static struct timespec ts;
 	static struct stml0xx_work_struct *stm_ws;
+	static struct stml0xx_delayed_work_struct *stm_dws;
 	struct stml0xx_data *ps_stml0xx = spi_get_drvdata(to_spi_device(dev));
 
 	get_monotonic_boottime(&ts);
@@ -1101,18 +1103,37 @@ static int stml0xx_resume(struct device *dev)
 	ps_stml0xx->is_suspended = false;
 	enable_irq(ps_stml0xx->irq);
 
+	/* Schedule work for wake IRQ, if pending */
+	if (ps_stml0xx->irq_wake_work_pending) {
+		stm_dws = kmalloc(sizeof(struct stml0xx_delayed_work_struct),
+					GFP_ATOMIC);
+		if (!stm_dws) {
+			dev_err(&ps_stml0xx->spi->dev,
+				"stml0xx_resume: unable to allocate delayed work struct");
+			mutex_unlock(&ps_stml0xx->lock);
+			return 0;
+		}
+		INIT_DELAYED_WORK((struct delayed_work *)stm_dws,
+				stml0xx_irq_wake_work_func);
+		stm_dws->ts_ns = ps_stml0xx->pending_wake_irq_ts_ns;
+		queue_delayed_work(ps_stml0xx->irq_work_queue,
+			(struct delayed_work *)stm_dws,
+			msecs_to_jiffies(ps_stml0xx->irq_wake_work_delay));
+		ps_stml0xx->irq_wake_work_pending = false;
+	}
+
+	/* Schedule work for non-wake IRQ to discard any streaming sensor data
+	   that was queued at the sensorhub during suspend. Process other
+	   non-wake sensor data that may have updated. */
 	stm_ws = kmalloc(
 		sizeof(struct stml0xx_work_struct),
 		GFP_ATOMIC);
 	if (!stm_ws) {
 		dev_err(&ps_stml0xx->spi->dev,
 			"stml0xx_resume: unable to allocate work struct");
+		mutex_unlock(&ps_stml0xx->lock);
 		return 0;
 	}
-
-	/* Discard any streaming sensor data that was queued at the sensorhub
-	   during suspend. Process other non-wake sensor data that may have
-	   updated. */
 	INIT_WORK((struct work_struct *)stm_ws, stml0xx_irq_work_func);
 	stm_ws->ts_ns = ts_to_ns(ts);
 	stm_ws->flags = IRQ_WORK_FLAG_DISCARD_SENSOR_QUEUE;
diff --git a/drivers/misc/stml0xx/stml0xx_wake_irq.c b/drivers/misc/stml0xx/stml0xx_wake_irq.c
index cef3d43e165..c16b6bd09ce 100644
--- a/drivers/misc/stml0xx/stml0xx_wake_irq.c
+++ b/drivers/misc/stml0xx/stml0xx_wake_irq.c
@@ -121,6 +121,15 @@ void stml0xx_irq_wake_work_func(struct work_struct *work)
 	pdata = ps_stml0xx->pdata;
 
 	dev_dbg(&stml0xx_misc_data->spi->dev, "stml0xx_irq_wake_work_func");
+
+	if (ps_stml0xx->is_suspended) {
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"Deferring irq wake work until resume");
+		ps_stml0xx->irq_wake_work_pending = true;
+		ps_stml0xx->pending_wake_irq_ts_ns = stm_ws->ts_ns;
+		return;
+	}
+
 	mutex_lock(&ps_stml0xx->lock);
 
 	if (ps_stml0xx->mode == BOOTMODE)
diff --git a/include/linux/stml0xx.h b/include/linux/stml0xx.h
index 00310b678e9..06c15485fe7 100644
--- a/include/linux/stml0xx.h
+++ b/include/linux/stml0xx.h
@@ -275,6 +275,8 @@ struct stml0xx_data {
 	int irq;
 	int irq_wake;
 	unsigned int irq_wake_work_delay;	/* in ms */
+	bool irq_wake_work_pending;
+	uint64_t pending_wake_irq_ts_ns;
 	unsigned int current_addr;
 	enum stm_mode mode;
 	unsigned char intp_mask;
-- 
2.11.0

