From ef0480f0da965a4a0fac19a247750f769d1ea109 Mon Sep 17 00:00:00 2001
From: Dmitry Ornatsky <cdo021c@motorola.com>
Date: Fri, 2 Oct 2015 14:55:07 -0500
Subject: [PATCH 336/959] IKKRNBSP-3423 leds: leds-atc: fix address calculation

No need to get base offset in this dt format. Control
register address already contains it. Update binding
with proper format for 8/16 bit wide data.
Do not restore LED config after override.

Change-Id: I4615a6ee60c307fbab0b282b5e55f5ab3b71a044
Signed-off-by: Dmitry Ornatsky <cdo021c@motorola.com>
Reviewed-on: http://gerrit.mot.com/788073
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Eyob Tesfu <Eyob.Tesfu@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 .../devicetree/bindings/leds/leds-atc.txt          | 16 +++++++--------
 drivers/leds/leds-atc.c                            | 24 +++++-----------------
 2 files changed, 13 insertions(+), 27 deletions(-)

diff --git a/Documentation/devicetree/bindings/leds/leds-atc.txt b/Documentation/devicetree/bindings/leds/leds-atc.txt
index 3dcea506926..ff307941f41 100644
--- a/Documentation/devicetree/bindings/leds/leds-atc.txt
+++ b/Documentation/devicetree/bindings/leds/leds-atc.txt
@@ -3,18 +3,18 @@ Driver leds-atc is used to control ATC charging led on a Qualcomm PMIC.
 Required properties
 - compatible		: string should be "qcom,leds-atc"
 - linux,name		: name of the led that is used in led framework
-- qcom,ctrl-reg		: ATC LED register address. Check your PMIC specification
-- qcom,on-data		: ATC LED register pattern to turn on the led. Check your PMIC spec.
-- qcom,on-data		: ATC LED register pattern to turn off the led. Check your PMIC spec.
-- qcom,mask		: ATC LED register access mask. Check your PMIC spec.
+- qcom,ctrl-reg		: ATC LED 16 bit register address. Check your PMIC specification
+- qcom,on-data		: ATC LED 8 bit register pattern to turn on the led. Check your PMIC spec.
+- qcom,on-data		: ATC LED 8 bit register pattern to turn off the led. Check your PMIC spec.
+- qcom,mask		: ATC LED 8 bit register access mask. Check your PMIC spec.
 
 Example:
 
 qcom,leds@1243 {
 	compatible = "qcom,leds-atc";
 	linux,name = "charging";
-	qcom,ctrl-reg = <0x1243>;
-	qcom,on-data = <0x07>;
-	qcom,off-data = <0x06>;
-	qcom,mask = <0x07>;
+	qcom,ctrl-reg = /bits/ 16 <0x1243>;
+	qcom,on-data = /bits/ 8 <0x07>;
+	qcom,off-data = /bits/ 8 <0x06>;
+	qcom,mask = /bits/ 8 <0x07>;
 };
diff --git a/drivers/leds/leds-atc.c b/drivers/leds/leds-atc.c
index e89889205eb..c7f7e6634a8 100644
--- a/drivers/leds/leds-atc.c
+++ b/drivers/leds/leds-atc.c
@@ -34,11 +34,10 @@
 struct atc_led_data {
 	struct led_classdev	cdev;
 	struct spmi_device	*spmi_dev;
-	u32			addr;
+	u16			addr;
 	u8			on_data;
 	u8			off_data;
 	u8			mask;
-	u8			save;
 };
 
 static int
@@ -74,10 +73,6 @@ static void atc_led_set(struct led_classdev *led_cdev,
 	led = container_of(led_cdev, struct atc_led_data, cdev);
 	val = (led->cdev.brightness) ? led->on_data : led->off_data;
 	spmi_masked_write(led, led->addr, led->mask, val);
-	led->cdev.brightness = value;
-	/* If we just turned off, restore the saved configuration) */
-	if (!val)
-		spmi_masked_write(led, led->addr, led->mask, led->save);
 }
 
 static enum led_brightness atc_led_get(struct led_classdev *led_cdev)
@@ -88,10 +83,9 @@ static enum led_brightness atc_led_get(struct led_classdev *led_cdev)
 static int atc_leds_probe(struct spmi_device *spmi)
 {
 	struct atc_led_data *led;
-	struct resource *led_resource;
 	struct device_node *node;
-	u32 offset;
 	int rc;
+	u8 save;
 
 	node = spmi->dev.of_node;
 	if (node == NULL)
@@ -105,13 +99,7 @@ static int atc_leds_probe(struct spmi_device *spmi)
 
 	led->spmi_dev = spmi;
 
-	led_resource = spmi_get_resource(spmi, NULL, IORESOURCE_MEM, 0);
-	if (!led_resource) {
-		dev_err(&spmi->dev, "Unable to get LED base address\n");
-		return -ENXIO;
-	}
-
-	rc = of_property_read_u32(node, "qcom,ctrl-reg", &offset);
+	rc = of_property_read_u16(node, "qcom,ctrl-reg", &led->addr);
 	if (rc < 0) {
 		dev_err(&spmi->dev,
 			"Failure reading ctrl offset, rc = %d\n", rc);
@@ -139,8 +127,6 @@ static int atc_leds_probe(struct spmi_device *spmi)
 		return -ENODEV;
 	}
 
-	led->addr = led_resource->start + offset;
-
 	rc = of_property_read_string(node, "linux,name", &led->cdev.name);
 	if (rc < 0) {
 		dev_err(&spmi->dev,
@@ -149,7 +135,7 @@ static int atc_leds_probe(struct spmi_device *spmi)
 	}
 
 	rc = spmi_ext_register_readl(led->spmi_dev->ctrl, led->spmi_dev->sid,
-		led->addr, &led->save, 1);
+		led->addr, &save, 1);
 	if (rc) {
 		dev_err(&led->spmi_dev->dev,
 			"Unable to read from addr=%#x, rc(%d)\n", led->addr, rc);
@@ -167,7 +153,7 @@ static int atc_leds_probe(struct spmi_device *spmi)
 	}
 
 	dev_set_drvdata(&spmi->dev, led);
-	dev_info(&spmi->dev, "Probe success\n");
+	dev_info(&spmi->dev, "Probe success register value %#x\n", save);
 	return 0;
 }
 
-- 
2.11.0

