From c80058ae2fe68c29b6315101a3b0a7f41f739473 Mon Sep 17 00:00:00 2001
From: Robert Wiegand <qa2113@motorola.com>
Date: Tue, 13 Oct 2015 14:32:28 -0500
Subject: [PATCH 365/959] IKLOCSEN-2367 drivers/misc: stml0xx: Create a
 passthrough ioctl

Create a new ioctl to allow the passthrough of register read/write
commands to sensors connected to the sensor hub.

Change-Id: I631809dce94883b19b14098a3b56c9f6db2eb329
Signed-off-by: Robert Wiegand <qa2113@motorola.com>
Reviewed-on: http://gerrit.mot.com/786114
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Jason Jae Hyun Koh <jasonkoh@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/misc/stml0xx/stml0xx_ioctl.c | 102 ++++++++++++++++++++++++++++++++++-
 include/uapi/linux/stml0xx.h         |   5 +-
 2 files changed, 105 insertions(+), 2 deletions(-)

diff --git a/drivers/misc/stml0xx/stml0xx_ioctl.c b/drivers/misc/stml0xx/stml0xx_ioctl.c
index 96ec4df6f1a..5cced7cd75d 100644
--- a/drivers/misc/stml0xx/stml0xx_ioctl.c
+++ b/drivers/misc/stml0xx/stml0xx_ioctl.c
@@ -59,6 +59,8 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	unsigned int handle;
 	struct timespec current_time;
 	bool cmd_handled;
+	unsigned int read_write;
+	unsigned int loop_count;
 
 	if (!stml0xx_misc_data)
 		stml0xx_misc_data = file->private_data;
@@ -217,7 +219,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			break;
 		}
 		stml0xx_g_nonwake_sensor_state = (buf[2] << 16)
-		    | (buf[1] << 8) | buf[0];
+			| (buf[1] << 8) | buf[0];
 		if (stml0xx_g_booted)
 			err = stml0xx_spi_send_write_reg(NONWAKESENSOR_CONFIG,
 							 buf, 3);
@@ -572,6 +574,104 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			break;
 		}
 		break;
+	case STML0XX_IOCTL_PASSTHROUGH:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+				"STML0XX_IOCTL_PASSTHROUGH");
+		if (!stml0xx_g_booted) {
+			err = -EFAULT;
+			break;
+		}
+
+		memset(buf, 0, STML0XX_PASSTHROUGH_SIZE);
+		/* copy bus, addr, reg, R/W and size */
+		if (copy_from_user(buf, argp, 6)) {
+			dev_err(&stml0xx_misc_data->spi->dev,
+				"Passthrough, copy info error");
+			err = -EFAULT;
+			break;
+		}
+		read_write = buf[4];
+		data_size = buf[5];
+
+		if (read_write == 0) { /* Read operation */
+			if (data_size > (STML0XX_PASSTHROUGH_SIZE - 1)) {
+				dev_err(&stml0xx_misc_data->spi->dev,
+					"Passthrough, data size too large %d",
+					data_size);
+				err = -EFAULT;
+				break;
+			}
+		} else if (read_write == 1) { /* Write operation */
+			if (data_size > (STML0XX_PASSTHROUGH_SIZE - 6)) {
+				dev_err(&stml0xx_misc_data->spi->dev,
+					"Passthrough, data size too large %d",
+					data_size);
+				err = -EFAULT;
+				break;
+			}
+
+			/* copy in the data to write */
+			if (copy_from_user(&buf[6], argp + 6, data_size)) {
+				dev_err(&stml0xx_misc_data->spi->dev,
+					"Passthrough, copy data error");
+				err = -EFAULT;
+				break;
+			}
+		} else {
+			dev_err(&stml0xx_misc_data->spi->dev,
+				"Passthrough, invalid r/w %d", read_write);
+			err = -EFAULT;
+			break;
+		}
+
+		/* Write the command to the sensor hub */
+		err = stml0xx_spi_send_write_reg(I2C_PASSTHROUGH_COMMAND, buf,
+			STML0XX_PASSTHROUGH_SIZE);
+		if (err < 0) {
+			dev_err(&stml0xx_misc_data->spi->dev,
+				"Passthrough, write error %d",
+				err);
+			err = -EFAULT;
+			break;
+		}
+
+		/* Read the response from  the sensor hub */
+		loop_count = 0;
+		buf[0] = 0;
+		do {
+			err = stml0xx_spi_send_read_reg(
+				I2C_PASSTHROUGH_RESPONSE,
+				buf, STML0XX_PASSTHROUGH_SIZE);
+			if (err < 0) {
+				dev_err(&stml0xx_misc_data->spi->dev,
+					"Passthrough, read error %d",
+					err);
+				err = -EFAULT;
+				break;
+			}
+			loop_count++;
+			if (loop_count == 10)
+				break;
+		} while (buf[0] == 0);
+		if (buf[0] != 1) {
+			dev_err(&stml0xx_misc_data->spi->dev,
+				"Passthrough, read failed %d", buf[0]);
+			err = -EFAULT;
+			break;
+		}
+		err = 0;
+
+		if (read_write == 0) {
+			/* Return the hub register data read */
+			if (copy_to_user(argp, &buf[1], data_size)) {
+				dev_err(&stml0xx_misc_data->spi->dev,
+					"Passthrough, copy back error");
+				err = -EFAULT;
+				break;
+			}
+		}
+
+		break;
 	case STML0XX_IOCTL_SET_LOWPOWER_MODE:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_SET_LOWPOWER_MODE");
diff --git a/include/uapi/linux/stml0xx.h b/include/uapi/linux/stml0xx.h
index ec034e5d2b6..63270995f61 100644
--- a/include/uapi/linux/stml0xx.h
+++ b/include/uapi/linux/stml0xx.h
@@ -122,7 +122,9 @@
 		_IOR(STML0XX_IOCTL_BASE, 46, char[1])
 #define STML0XX_IOCTL_READ_REG \
 		_IOR(STML0XX_IOCTL_BASE, 47, char[1])
-/* 48-52 unused */
+#define STML0XX_IOCTL_PASSTHROUGH \
+		_IOR(STML0XX_IOCTL_BASE, 48, char[1])
+/* 49-52 unused */
 #define STML0XX_IOCTL_GET_BOOTED \
 		_IOR(STML0XX_IOCTL_BASE, 53, unsigned char)
 #define STML0XX_IOCTL_SET_LOWPOWER_MODE \
@@ -144,6 +146,7 @@
 #define STML0XX_AS_DATA_BUFF_SIZE 20
 #define STML0XX_MS_DATA_BUFF_SIZE 20
 #define STML0XX_ALGO_SIZE	2
+#define STML0XX_PASSTHROUGH_SIZE 16
 
 #define STML0XX_CAMERA_DATA 0x01
 
-- 
2.11.0

