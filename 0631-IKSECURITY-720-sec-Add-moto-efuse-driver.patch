From 3cf425ccf7330319aebec76519d266e6b076239a Mon Sep 17 00:00:00 2001
From: Mark Reed <mreed1@motorola.com>
Date: Fri, 22 Jan 2016 08:06:03 -0600
Subject: [PATCH 631/959] IKSECURITY-720 - sec: Add moto efuse driver.

enable security driver (read fuses)

Change-Id: I3b306bdb87233c81120614e240983a1086182007
Signed-off-by: mreed1 <mreed1@motorola.com>
Reviewed-on: http://gerrit.mot.com/811576
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Christopher Fries <cfries@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/misc/Kconfig        |   1 +
 drivers/misc/Makefile       |   1 +
 drivers/misc/sec/Kconfig    |  10 ++
 drivers/misc/sec/Makefile   |  19 +++
 drivers/misc/sec/sec_core.c | 347 ++++++++++++++++++++++++++++++++++++++++++++
 drivers/misc/sec/sec_core.h |  32 ++++
 include/linux/sec_export.h  |  25 ++++
 7 files changed, 435 insertions(+)
 create mode 100644 drivers/misc/sec/Kconfig
 create mode 100644 drivers/misc/sec/Makefile
 create mode 100644 drivers/misc/sec/sec_core.c
 create mode 100644 drivers/misc/sec/sec_core.h
 create mode 100644 include/linux/sec_export.h

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 3eda7a8dd30..0f3deffbe89 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -686,4 +686,5 @@ source "drivers/misc/mei/Kconfig"
 source "drivers/misc/vmw_vmci/Kconfig"
 source "drivers/misc/qcom/Kconfig"
 source "drivers/misc/stml0xx/Kconfig"
+source "drivers/misc/sec/Kconfig"
 endmenu
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index c2833508f7e..7f3db4de861 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -74,3 +74,4 @@ obj-$(CONFIG_ALSA_TO_H2W) += alsa-to-h2w-headset.o
 obj-$(CONFIG_MOT_UTAG) += utag/
 obj-$(CONFIG_SENSORS_STML0XX) += stml0xx/
 obj-$(CONFIG_DROPBOX) += dropbox.o
+obj-$(CONFIG_SEC_DRIVER) += sec/
diff --git a/drivers/misc/sec/Kconfig b/drivers/misc/sec/Kconfig
new file mode 100644
index 00000000000..0297d32e965
--- /dev/null
+++ b/drivers/misc/sec/Kconfig
@@ -0,0 +1,10 @@
+#
+# Sec configuration
+#
+
+menu "Motorola secuirty driver"
+
+config SEC_DRIVER
+	tristate "Motorola security driver"
+
+endmenu
diff --git a/drivers/misc/sec/Makefile b/drivers/misc/sec/Makefile
new file mode 100644
index 00000000000..78029932ba3
--- /dev/null
+++ b/drivers/misc/sec/Makefile
@@ -0,0 +1,19 @@
+#
+# Copyright (C) 2009 Motorola, Inc.
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 2 as
+# published by the Free Software Foundation.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# Motorola 2009-Mar-13 - Initial Creation
+#
+MODULE_NAME = sec
+
+obj-$(CONFIG_SEC_DRIVER) += $(MODULE_NAME).o
+
+$(MODULE_NAME)-objs := sec_core.o
diff --git a/drivers/misc/sec/sec_core.c b/drivers/misc/sec/sec_core.c
new file mode 100644
index 00000000000..2358a98f5c4
--- /dev/null
+++ b/drivers/misc/sec/sec_core.c
@@ -0,0 +1,347 @@
+/*
+ * Copyright (C) 2014 Motorola, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+
+/* Necessary includes for device drivers */
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/fs.h>
+#include <linux/errno.h>
+#include <linux/types.h>
+#include <linux/proc_fs.h>
+#include <linux/fcntl.h>
+#include <linux/uaccess.h>
+#include <linux/device.h>
+#include <linux/miscdevice.h>
+#include <linux/io.h>
+#include <linux/sec_export.h>
+#include <linux/platform_device.h>
+#include <asm/cacheflush.h>
+#include <soc/qcom/scm.h>
+#include "sec_core.h"
+
+static ssize_t sec_read(struct file *filp, char *buf,
+		size_t count, loff_t *f_pos);
+static int sec_open(struct inode *inode, struct file *filp);
+static int sec_release(struct inode *inode, struct file *filp);
+static long sec_ioctl(struct file *file, unsigned int ioctl_num,
+		unsigned long ioctl_param);
+static void sec_buf_prepare(void);
+static bool sec_buf_updated(void);
+
+#define TZ_OWNER_OEM 3
+#define TZBSP_SVC_OEM 254
+#define SEC_BUF_SIZE 32
+
+#define TZ_SYSCALL_CREATE_SMC_ID(o, s, f) \
+	((u32)((((o & 0x3f) << 24) | (s & 0xff) << 8) | (f & 0xff)))
+
+DEFINE_SCM_BUFFER(sec_shared_mem);
+static u32 sec_phy_mem;
+static int sec_failures;
+
+/* Structure that declares the usual file */
+/* access functions */
+const struct file_operations sec_fops = {
+	.owner = THIS_MODULE,
+	.read = sec_read,
+	.open = sec_open,
+	.release = sec_release,
+#ifdef CONFIG_COMPAT
+	.compat_ioctl = sec_ioctl,
+#endif
+	.unlocked_ioctl = sec_ioctl
+};
+
+struct sec_cmd {
+	u32 mot_cmd;
+	u32 parm1;
+	u32 parm2;
+	u32 parm3;
+};
+
+static struct miscdevice sec_dev = {
+	MISC_DYNAMIC_MINOR,
+	"sec",
+	&sec_fops
+};
+
+static DEFINE_MUTEX(sec_core_lock);
+
+/****************************************************************************/
+/*   KERNEL DRIVER APIs, ONLY IOCTL RESPONDS BACK TO USER SPACE REQUESTS    */
+/****************************************************************************/
+
+int sec_open(struct inode *inode, struct file *filp)
+{
+	/* Not supported, return Success */
+	return 0;
+}
+
+int sec_release(struct inode *inode, struct file *filp)
+{
+
+	/* Not supported, return Success */
+	return 0;
+}
+
+ssize_t sec_read(struct file *filp, char *buf,
+		 size_t count, loff_t *f_pos)
+{
+	/* Not supported, return Success */
+	return 0;
+}
+
+static void sec_buf_prepare(void)
+{
+	memset(sec_shared_mem, 0xff, SEC_BUF_SIZE);
+	dmac_flush_range(sec_shared_mem, sec_shared_mem + SEC_BUF_SIZE);
+	sec_phy_mem = SCM_BUFFER_PHYS(sec_shared_mem);
+}
+
+static bool sec_buf_updated(void)
+{
+	int i;
+
+	/* ARM64 invalidate cache memory */
+	dmac_inv_range(sec_shared_mem, sec_shared_mem + PAGE_SIZE);
+
+	for (i = 0; i < SEC_BUF_SIZE; i++)
+		if (sec_shared_mem[i] != 0xff)
+			return true;
+
+	return false;
+}
+
+static int sec_smc(u32 cmd, u32 param1, u32 param2)
+{
+	if (!is_scm_armv8()) {
+
+		struct sec_cmd my_cmd;
+
+		my_cmd.mot_cmd = cmd;
+		my_cmd.parm1 = param1;
+		my_cmd.parm2 = param2;
+
+		return scm_call(TZBSP_SVC_OEM, 1, &my_cmd,
+			sizeof(my_cmd), NULL, 0);
+	} else {
+
+		struct scm_desc desc = {0};
+		int ret;
+		u32 id = TZ_SYSCALL_CREATE_SMC_ID(TZ_OWNER_OEM, 0x0A, 0x0A);
+
+		desc.arginfo = SCM_ARGS(3);
+		desc.args[0] = cmd;
+		desc.args[1] = param1;
+		desc.args[2] = param2;
+		ret = scm_call2(id, &desc);
+
+		if (ret || desc.ret[0])
+			pr_err("sec: SCM fail %d %lld\n", ret, desc.ret[0]);
+
+		return ret;
+	}
+}
+
+long sec_ioctl(struct file *file, unsigned int ioctl_num,
+		unsigned long ioctl_param)
+{
+	struct SEC_EFUSE_PARM_T efuse_data;
+	long ret_val = SEC_KM_FAIL;
+	u32 ctr;
+	int ret;
+
+	mutex_lock(&sec_core_lock);
+
+	sec_buf_prepare();
+
+	switch (ioctl_num) {
+
+	case SEC_IOCTL_READ_PROC_ID:
+
+		for (ctr = 0; ctr < 5 && ret_val != SEC_KM_SUCCESS; ctr++) {
+
+			ret = sec_smc(10, sec_phy_mem, SEC_PROC_ID_SIZE);
+
+			if (ret == 0) {
+
+				if (copy_to_user((void __user *)ioctl_param,
+					(const void *) sec_shared_mem,
+					SEC_PROC_ID_SIZE) == 0) {
+
+					/* check data was actually updated */
+					if (sec_buf_updated())
+						ret_val = SEC_KM_SUCCESS;
+					else
+						pr_err("sec: not updated\n");
+
+					ret_val = SEC_KM_SUCCESS;
+				}
+			} else
+				 pr_err("sec: scm call failed!\n");
+		}
+
+
+		break;
+
+	case SEC_IOCTL_WRITE_FUSE:
+
+		if (copy_from_user(&efuse_data, (void __user *)
+			ioctl_param, sizeof(efuse_data)) != 0) {
+
+			break;
+		}
+
+		if (sec_smc(2, efuse_data.which_bank,
+			efuse_data.efuse_value) == 0) {
+
+			ret_val = SEC_KM_SUCCESS;
+		}
+
+		break;
+
+	case SEC_IOCTL_READ_FUSE:
+
+		if (copy_from_user(&efuse_data, (void *)ioctl_param,
+			sizeof(efuse_data)) != 0) {
+
+			break;
+		}
+
+		for (ctr = 0; ctr < 5 && ret_val != SEC_KM_SUCCESS; ctr++) {
+
+			ret = sec_smc(1, efuse_data.which_bank, sec_phy_mem);
+
+			if (ret == 0) {
+
+				efuse_data.efuse_value = *(u32 *)sec_shared_mem;
+
+				if (copy_to_user((void *)ioctl_param,
+					&efuse_data, sizeof(efuse_data)) == 0) {
+
+					/* check data was actually updated */
+					if (sec_buf_updated())
+						ret_val = SEC_KM_SUCCESS;
+					else
+						pr_err("sec: not updated!\n");
+				}
+			} else
+				pr_err("sec: scm call failed!\n");
+		}
+
+		break;
+
+	case SEC_IOCTL_GET_TZ_VERSION:
+
+		if (sec_smc(11, sec_phy_mem, 0) == 0) {
+
+			if (copy_to_user((void *)ioctl_param,
+				sec_shared_mem, 4) == 0) {
+
+				ret_val = SEC_KM_SUCCESS;
+			}
+		}
+
+		break;
+
+	case SEC_IOCTL_GET_TZ_CODES:
+
+		pr_err("sec: fail counter = %d\n", sec_failures);
+		print_hab_fail_codes();
+		break;
+
+	default:
+		 pr_err("sec: error\n");
+		break;
+	}
+
+	if (ret_val != SEC_KM_SUCCESS)
+		sec_failures++;
+
+	mutex_unlock(&sec_core_lock);
+
+	return ret_val;
+}
+
+void print_hab_fail_codes(void)
+{
+	mutex_lock(&sec_core_lock);
+
+	sec_buf_prepare();
+	sec_smc(9, 16, sec_phy_mem);
+
+	pr_err("HAB fail codes: 0x%x 0x%x 0x%x 0x%x\n",
+	sec_shared_mem[0], sec_shared_mem[1],
+	sec_shared_mem[2], sec_shared_mem[3]);
+
+	mutex_unlock(&sec_core_lock);
+}
+EXPORT_SYMBOL(print_hab_fail_codes);
+
+static int msm_efuse_probe(struct platform_device *pdev)
+{
+	int result;
+
+	result = misc_register(&sec_dev);
+
+	if (result) {
+		pr_err("sec: cannot obtain major number\n");
+		return result;
+	}
+
+	return 0;
+}
+
+static int msm_efuse_remove(struct platform_device *pdev)
+{
+	kzfree(sec_shared_mem);
+	return 0;
+}
+
+static struct of_device_id msm_match_table[] = {
+	{.compatible = "qcom,msm-efuse"},
+	{},
+};
+
+static struct platform_driver msm_efuse_driver = {
+	.probe = msm_efuse_probe,
+	.remove = msm_efuse_remove,
+	.driver         = {
+		.name = "msm_efuse",
+		.owner = THIS_MODULE,
+		.of_match_table = msm_match_table
+	},
+};
+
+static int __init msm_efuse_init(void)
+{
+	return platform_driver_register(&msm_efuse_driver);
+}
+
+static void __exit msm_efuse_exit(void)
+{
+	platform_driver_unregister(&msm_efuse_driver);
+}
+
+module_init(msm_efuse_init)
+module_exit(msm_efuse_exit)
+/****************************************************************************/
+/*Kernel Module License Information                                         */
+/****************************************************************************/
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("MOTOROLA");
diff --git a/drivers/misc/sec/sec_core.h b/drivers/misc/sec/sec_core.h
new file mode 100644
index 00000000000..b98b5873a9f
--- /dev/null
+++ b/drivers/misc/sec/sec_core.h
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2009 Motorola, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#define SEC_PROC_ID_SIZE   16
+
+#define SEC_IOCTL_WRITE_FUSE	_IOWR(0x99, 120, int)
+#define SEC_IOCTL_READ_FUSE	_IOWR(0x99, 121, int)
+#define SEC_IOCTL_READ_PROC_ID  _IOWR(0x99, 123, int)
+#define SEC_IOCTL_GET_TZ_VERSION _IOWR(0x99, 124, int)
+#define SEC_IOCTL_GET_TZ_CODES _IOWR(0x99, 125, int)
+
+struct SEC_EFUSE_PARM_T {
+	unsigned int which_bank;
+	unsigned int efuse_value;
+};
+
+enum SEC_KM_RESULT_T {
+	SEC_KM_SUCCESS = 98,
+	SEC_KM_FAIL = 99,
+};
diff --git a/include/linux/sec_export.h b/include/linux/sec_export.h
new file mode 100644
index 00000000000..e0b14de9e9b
--- /dev/null
+++ b/include/linux/sec_export.h
@@ -0,0 +1,25 @@
+#ifndef _LINUX_SEC_EXPORT_H
+#define _LINUX_SEC_EXPORT_H
+/*
+ * Copyright (C) 2009 Motorola, Inc.
+ * Copyright (C) 2013 Motorola Mobility LLC
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifdef CONFIG_SEC_DRIVER
+void print_hab_fail_codes(void);
+#else
+static inline void print_hab_fail_codes(void) { }
+#endif
+
+#endif
-- 
2.11.0

