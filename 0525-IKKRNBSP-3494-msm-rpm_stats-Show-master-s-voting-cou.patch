From 8e384f1d81408f8c557072e3dd0eb00188b6a1a2 Mon Sep 17 00:00:00 2001
From: yangjq <yangjq@lenovo.com>
Date: Tue, 8 Dec 2015 08:01:18 +0800
Subject: [PATCH 525/959] IKKRNBSP-3494 msm: rpm_stats: Show master's voting
 count

Collect master's voting count in RPM
Show the active count of masters in /sys/kernel/debug/rpm_stats
vlow: reserved[0]apps; reserved[1]modem; reserved[2]pronto;
vmin: reserved[0]tz; reserved[1]qdsp; reserved[2]check times
Calculate the voting count when suspend and wake to find the active master

Change-Id: If6ec03422e658a43955f2a3ed6962169f8078c4d
Signed-off-by: yangjq <yangjq@lenovo.com>
Reviewed-on: http://gerrit.mot.com/798275
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/soc/qcom/rpm_stats.c | 92 ++++++++++++++++++++++++++++++++++++++++++--
 drivers/soc/qcom/rpm_stats.h |  3 ++
 2 files changed, 92 insertions(+), 3 deletions(-)

diff --git a/drivers/soc/qcom/rpm_stats.c b/drivers/soc/qcom/rpm_stats.c
index 70d6383837e..cb5c71d498d 100644
--- a/drivers/soc/qcom/rpm_stats.c
+++ b/drivers/soc/qcom/rpm_stats.c
@@ -58,7 +58,7 @@ struct msm_rpmstats_private_data {
 	u32 num_records;
 	u32 read_idx;
 	u32 len;
-	char buf[320];
+	char buf[480];
 	struct msm_rpmstats_platform_data *platform_data;
 };
 
@@ -112,10 +112,14 @@ static inline int msm_rpmstats_append_data_to_buf(char *buf,
 	return  snprintf(buf , buflength,
 		"RPM Mode:%s\n\t count:%d\ntime in last mode(msec):%llu\n"
 		"time since last mode(sec):%llu\nactual last sleep(msec):%llu\n"
-		"client votes: %#010x\n\n",
+		"client votes: %#010x\n"
+		"reserved[0]: 0x%08x\n"
+		"reserved[1]: 0x%08x\n"
+		"reserved[2]: 0x%08x\n\n",
 		stat_type, data->count, time_in_last_mode,
 		time_since_last_mode, actual_last_sleep,
-		data->client_votes);
+		data->client_votes,
+		data->reserved[0], data->reserved[1], data->reserved[2]);
 }
 
 static inline u32 msm_rpmstats_read_long_register_v2(void __iomem *regbase,
@@ -164,6 +168,15 @@ static inline int msm_rpmstats_copy_stats_v2(
 		data.client_votes = msm_rpmstats_read_long_register_v2(reg,
 				i, offsetof(struct msm_rpm_stats_data_v2,
 					client_votes));
+		data.reserved[0] = msm_rpmstats_read_long_register_v2(reg,
+				i, offsetof(struct msm_rpm_stats_data_v2,
+					reserved));
+		data.reserved[1] = msm_rpmstats_read_long_register_v2(reg,
+				i, offsetof(struct msm_rpm_stats_data_v2,
+					reserved) + 4);
+		data.reserved[2] = msm_rpmstats_read_long_register_v2(reg,
+				i, offsetof(struct msm_rpm_stats_data_v2,
+					reserved) + 8);
 		length += msm_rpmstats_append_data_to_buf(prvdata->buf + length,
 				&data, sizeof(prvdata->buf) - length);
 		prvdata->read_idx++;
@@ -338,6 +351,77 @@ static int msm_rpmstats_file_close(struct inode *inode, struct file *file)
 	return 0;
 }
 
+#define MAX_MASTER_NUM 5
+
+enum {
+	DEBUG_RPM_SPM_LOG = 1U << 0,
+};
+
+static int debug_mask;
+module_param_named(debug_mask, debug_mask, int, S_IRUGO | S_IWUSR | S_IWGRP);
+
+static struct msm_rpmstats_platform_data *rpmstats;
+static u32 reserved[2][4];
+static u32 reserved0[2][4];
+
+static void msm_rpmstats_get_reserved(u32 reserved[][4])
+{
+	void __iomem *reg_base;
+	int i;
+
+	if (rpmstats == NULL) {
+		pr_err("%s: rpm stats has not been initialized\n", __func__);
+		return;
+	}
+
+	reg_base = ioremap_nocache(rpmstats->phys_addr_base,
+					rpmstats->phys_size);
+	if (reg_base == NULL) {
+		pr_err("%s: ERROR could not ioremap start=%p, len=%u\n",
+			__func__, (void *)rpmstats->phys_addr_base,
+			rpmstats->phys_size);
+		return;
+	}
+
+	for (i = 0; i < 2; i++) {
+		reserved[i][0] = msm_rpmstats_read_long_register_v2(reg_base,
+				i, offsetof(struct msm_rpm_stats_data_v2,
+					reserved));
+		reserved[i][1] = msm_rpmstats_read_long_register_v2(reg_base,
+				i, offsetof(struct msm_rpm_stats_data_v2,
+					reserved) + 4);
+		reserved[i][2] = msm_rpmstats_read_long_register_v2(reg_base,
+				i, offsetof(struct msm_rpm_stats_data_v2,
+					reserved) + 8);
+	}
+
+	iounmap(reg_base);
+}
+
+void msm_rpmstats_log_suspend_enter(void)
+{
+	if (debug_mask & DEBUG_RPM_SPM_LOG)
+		msm_rpmstats_get_reserved(reserved0);
+}
+
+void msm_rpmstats_log_suspend_exit(int error)
+{
+	uint32_t smem_value;
+	int i;
+
+	if (debug_mask & DEBUG_RPM_SPM_LOG && error == 0) {
+		msm_rpmstats_get_reserved(reserved);
+
+		for (i = 0; i <= MAX_MASTER_NUM; i++) {
+			smem_value = reserved[i / 3][i % 3]
+				- reserved0[i / 3][i % 3];
+			if (smem_value > 0)
+				pr_warn("rpm: %s[%d] = %d\n", "spm_active",
+					 i, smem_value);
+		}
+	}
+}
+
 static const struct file_operations msm_rpmstats_fops = {
 	.owner	  = THIS_MODULE,
 	.open	  = msm_rpmstats_file_open,
@@ -558,6 +642,7 @@ static int msm_rpmstats_probe(struct platform_device *pdev)
 	msm_rpmstats_create_sysfs(pdata);
 
 	platform_set_drvdata(pdev, dent);
+	rpmstats = pdata;
 	return 0;
 }
 
@@ -569,6 +654,7 @@ static int msm_rpmstats_remove(struct platform_device *pdev)
 	debugfs_remove(dent);
 	debugfs_remove(heap_dent);
 	platform_set_drvdata(pdev, NULL);
+	rpmstats = NULL;
 	return 0;
 }
 
diff --git a/drivers/soc/qcom/rpm_stats.h b/drivers/soc/qcom/rpm_stats.h
index 1437b40855f..1b8c7bdb2cd 100644
--- a/drivers/soc/qcom/rpm_stats.h
+++ b/drivers/soc/qcom/rpm_stats.h
@@ -39,4 +39,7 @@ struct msm_rpm_master_stats_platform_data {
 	 u32 master_offset;
 	 u32 version;
 };
+
+extern void msm_rpmstats_log_suspend_enter(void);
+extern void msm_rpmstats_log_suspend_exit(int error);
 #endif
-- 
2.11.0

