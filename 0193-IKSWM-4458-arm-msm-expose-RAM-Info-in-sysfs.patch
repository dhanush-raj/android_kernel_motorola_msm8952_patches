From c7c080143827783b0e5bbdbe6c46c2f3ba4176cf Mon Sep 17 00:00:00 2001
From: Alexander Filonenko <vtp684@motorola.com>
Date: Fri, 16 Nov 2012 14:01:31 -0600
Subject: [PATCH 193/959] IKSWM-4458 arm:msm: expose RAM Info in sysfs

Add module reading RAM Info from SMEM and exposing it
under /sys/ram.

Change-Id: Ic72a2f18a230ace3ca99d2da6531075736d98e50
Signed-off-by: Alexander Filonenko <vtp684@motorola.com>
Signed-off-by: Hong-Mei Li <a21834@motorola.com>
---
 drivers/soc/qcom/Kconfig        |   6 ++
 drivers/soc/qcom/Makefile       |   1 +
 drivers/soc/qcom/mmi-ram-info.c | 187 ++++++++++++++++++++++++++++++++++++++++
 include/soc/qcom/smem.h         |   1 +
 4 files changed, 195 insertions(+)
 create mode 100644 drivers/soc/qcom/mmi-ram-info.c

diff --git a/drivers/soc/qcom/Kconfig b/drivers/soc/qcom/Kconfig
index 57e11dff11b..761c815bff1 100644
--- a/drivers/soc/qcom/Kconfig
+++ b/drivers/soc/qcom/Kconfig
@@ -729,4 +729,10 @@ config MMI_SOC_INFO
 	help
 	  Provide mechanism to export MSM SOC info.
 
+config MMI_RAM_INFO
+	default n
+	bool "Motorola Mobility RAM Info"
+	help
+	Provide mechanism to access RAM size and MR registers values via sysfs.
+
 endif # ARCH_MSM
diff --git a/drivers/soc/qcom/Makefile b/drivers/soc/qcom/Makefile
index bd6cf32a4c3..6e767d79de3 100644
--- a/drivers/soc/qcom/Makefile
+++ b/drivers/soc/qcom/Makefile
@@ -95,3 +95,4 @@ obj-$(CONFIG_TRACER_PKT) += tracer_pkt.o
 obj-$(CONFIG_MSM_VSENS) += vsens.o
 obj-$(CONFIG_BOOTINFO) += bootinfo.o
 obj-$(CONFIG_MMI_SOC_INFO) += mmi_soc_info.o
+obj-$(CONFIG_MMI_RAM_INFO) += mmi-ram-info.o
diff --git a/drivers/soc/qcom/mmi-ram-info.c b/drivers/soc/qcom/mmi-ram-info.c
new file mode 100644
index 00000000000..f26318b20af
--- /dev/null
+++ b/drivers/soc/qcom/mmi-ram-info.c
@@ -0,0 +1,187 @@
+/*
+ * Copyright (C) 2012 Motorola Mobility LLC
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <soc/qcom/smsm.h>
+
+static struct {
+	unsigned mr5;
+	unsigned mr6;
+	unsigned mr7;
+	unsigned mr8;
+	unsigned ramsize;
+} *smem_ddr_info;
+
+static char sysfsram_type_name[20] = "unknown";
+static char sysfsram_vendor_name[20] = "unknown";
+static uint32_t sysfsram_ramsize;
+
+static ssize_t sysfsram_mr_register_show(struct kobject *kobj,
+			struct kobj_attribute *attr, char *buf)
+{
+	uint32_t val = 0;
+	const char *name = attr->attr.name;
+
+	if (smem_ddr_info != NULL &&
+		strnlen(name, 4) == 3 && name[0] == 'm' && name[1] == 'r')
+	{
+		switch (name[2]) {
+		case '5': val = smem_ddr_info->mr5; break;
+		case '6': val = smem_ddr_info->mr6; break;
+		case '7': val = smem_ddr_info->mr7; break;
+		case '8': val = smem_ddr_info->mr8; break;
+		}
+	}
+
+	return snprintf(buf, 6, "0x%02x\n", val);
+}
+
+static ssize_t sysfsram_size_show(struct kobject *kobj,
+			struct kobj_attribute *attr, char *buf)
+{
+	return snprintf(buf, 12, "%u\n", sysfsram_ramsize);
+}
+
+static ssize_t sysfsram_info_show(struct kobject *kobj,
+			struct kobj_attribute *attr, char *buf)
+{
+	return snprintf(buf, 60, "%s:%s:%uMB\n",
+			sysfsram_vendor_name,
+			sysfsram_type_name,
+			sysfsram_ramsize);
+}
+
+static ssize_t sysfsram_type_show(struct kobject *kobj,
+			struct kobj_attribute *attr, char *buf)
+{
+	return snprintf(buf, 20, "%s\n", sysfsram_type_name);
+}
+
+static struct kobj_attribute ddr_mr5_register_attr =
+	__ATTR(mr5, 0444, sysfsram_mr_register_show, NULL);
+
+static struct kobj_attribute ddr_mr6_register_attr =
+	__ATTR(mr6, 0444, sysfsram_mr_register_show, NULL);
+
+static struct kobj_attribute ddr_mr7_register_attr =
+	__ATTR(mr7, 0444, sysfsram_mr_register_show, NULL);
+
+static struct kobj_attribute ddr_mr8_register_attr =
+	__ATTR(mr8, 0444, sysfsram_mr_register_show, NULL);
+
+static struct kobj_attribute ddr_size_attr =
+	__ATTR(size, 0444, sysfsram_size_show, NULL);
+
+static struct kobj_attribute ddr_type_attr =
+	__ATTR(type, 0444, sysfsram_type_show, NULL);
+
+static struct kobj_attribute ddr_info_attr =
+	__ATTR(info, 0444, sysfsram_info_show, NULL);
+
+static struct attribute *ram_info_properties_attrs[] = {
+	&ddr_mr5_register_attr.attr,
+	&ddr_mr6_register_attr.attr,
+	&ddr_mr7_register_attr.attr,
+	&ddr_mr8_register_attr.attr,
+	&ddr_size_attr.attr,
+	&ddr_type_attr.attr,
+	&ddr_info_attr.attr,
+	NULL
+};
+
+static struct attribute_group ram_info_properties_attr_group = {
+	.attrs = ram_info_properties_attrs,
+};
+
+static int __init init_mmi_ram_info(void)
+{
+	int status = 0;
+	static struct kobject *ram_info_properties_kobj;
+	uint32_t vid, tid;
+	const char *tname = "unknown";
+	const char *vname = "unknown";
+	static const char *vendors[] = {
+		"unknown",
+		"Samsung",
+		"Qimonda",
+		"Elpida",
+		"Etron",
+		"Nanya",
+		"Hynix",
+		"Mosel",
+		"Winbond",
+		"ESMT",
+		"unknown",
+		"Spansion",
+		"SST",
+		"ZMOS",
+		"Intel"
+	};
+	static const char *types[] = {
+		"S4 SDRAM",
+		"S2 SDRAM",
+		"N NVM",
+		"Reserved"
+	};
+
+	smem_ddr_info = smem_alloc(SMEM_SDRAM_INFO, sizeof(*smem_ddr_info), 0,
+			SMEM_ANY_HOST_FLAG);
+
+	if (smem_ddr_info != NULL) {
+		/* identify vendor */
+		vid = smem_ddr_info->mr5 & 0xFF;
+		if (vid < (sizeof(vendors)/sizeof(vendors[0])))
+			vname = vendors[vid];
+		else if (vid == 0xFE)
+			vname = "Numonyx";
+		else if (vid == 0xFF)
+			vname = "Micron";
+
+		snprintf(sysfsram_vendor_name, sizeof(sysfsram_vendor_name),
+			"%s", vname);
+
+		/* identify type */
+		tid = smem_ddr_info->mr8 & 0x03;
+		if (tid < (sizeof(types)/sizeof(types[0])))
+			tname = types[tid];
+
+		snprintf(sysfsram_type_name, sizeof(sysfsram_type_name),
+			"%s", tname);
+
+		/* extract size */
+		sysfsram_ramsize = smem_ddr_info->ramsize;
+	}
+	else {
+		/* complain, but do not fail if SMEM was not allocated */
+		/* defaults will be reported */
+		pr_err("%s: failed to access RAM info in SMEM\n", __func__);
+	}
+
+	/* create sysfs object */
+	ram_info_properties_kobj = kobject_create_and_add("ram", NULL);
+
+	if (ram_info_properties_kobj)
+		status = sysfs_create_group(ram_info_properties_kobj,
+			&ram_info_properties_attr_group);
+
+	if (!ram_info_properties_kobj || status) {
+		pr_err("%s: failed to create /sys/ram\n", __func__);
+		return 1;
+	}
+	else
+		return 0;
+}
+
+module_init(init_mmi_ram_info);
+MODULE_DESCRIPTION("Motorola Mobility Inc. RAM Info");
+MODULE_LICENSE("GPL v2");
diff --git a/include/soc/qcom/smem.h b/include/soc/qcom/smem.h
index 5958af1686e..c633c7f2bca 100644
--- a/include/soc/qcom/smem.h
+++ b/include/soc/qcom/smem.h
@@ -109,6 +109,7 @@ enum {
 	SMEM_OSS_RRCASN1_BUF2,
 	SMEM_ID_VENDOR0,
 	SMEM_ID_VENDOR1,
+	SMEM_SDRAM_INFO = SMEM_ID_VENDOR1,
 	SMEM_ID_VENDOR2,
 	SMEM_HW_SW_BUILD_ID,
 	SMEM_SMD_BASE_ID_2,
-- 
2.11.0

