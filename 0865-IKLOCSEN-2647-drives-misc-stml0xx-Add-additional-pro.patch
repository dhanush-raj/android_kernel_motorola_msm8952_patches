From e945115809220efff04b4abae5df209d15fc1c68 Mon Sep 17 00:00:00 2001
From: wlgs03 <wlgs03@motorola.com>
Date: Fri, 22 Apr 2016 10:50:16 -0500
Subject: [PATCH 865/959] IKLOCSEN-2647 drives: misc: stml0xx: Add additional
 proximity logging

This will help when debugging proximity and stowed related
issues which result from bad hardware or miscalibrations

Change-Id: I23c15bedb30291e20a7f6ba008b69aba4c5ba9d6
Signed-off-by: wlgs03 <wlgs03@motorola.com>
Reviewed-on: http://gerrit.mot.com/846027
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Jason Jae Hyun Koh <jasonkoh@motorola.com>
Reviewed-by: Robert Wiegand <Robert.P.Wiegand@motorola.com>
Reviewed-by: Eric Hefner <ehefner@motorola.com>
Reviewed-by: Daniel Moore <dtmoore@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/misc/stml0xx/stml0xx_wake_irq.c | 26 +++++++++++++++++++-------
 include/linux/stml0xx.h                 | 11 +++++++++--
 include/uapi/linux/motosh_vmm.h         |  6 +++---
 3 files changed, 31 insertions(+), 12 deletions(-)

diff --git a/drivers/misc/stml0xx/stml0xx_wake_irq.c b/drivers/misc/stml0xx/stml0xx_wake_irq.c
index b855e052932..aad59b314e9 100644
--- a/drivers/misc/stml0xx/stml0xx_wake_irq.c
+++ b/drivers/misc/stml0xx/stml0xx_wake_irq.c
@@ -174,9 +174,16 @@ void stml0xx_irq_wake_work_func(struct work_struct *work)
 			0,
 			stm_ws->ts_ns);
 
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"Sending Proximity distance %d",
-			buf[WAKE_IRQ_IDX_PROX]);
+		dev_info(&stml0xx_misc_data->spi->dev,
+			"Sending Proximity distance %d als %d stowed %d raw_prox %d noise_floor %d recal_thresh %d low_thresh %d high_thresh %d\n",
+			buf[WAKE_IRQ_IDX_PROX],
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_ALS),
+			buf[WAKE_IRQ_IDX_STOWED],
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_RAW),
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_NOISE),
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_RECAL),
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_LTHRESH),
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_HTHRESH));
 	}
 	if (irq_status & M_COVER) {
 		int state = 0;
@@ -352,10 +359,15 @@ void stml0xx_irq_wake_work_func(struct work_struct *work)
 			stm_ws->ts_ns);
 
 		dev_info(&stml0xx_misc_data->spi->dev,
-			"Sending Stowed status %d, als %d, prox %d",
+			"Sending Stowed status %d als %d prox %d raw_prox %d noise_floor %d recal_thresh %d low_thresh %d high_thresh %d\n",
 			buf[WAKE_IRQ_IDX_STOWED],
-			SH_TO_H16(buf + WAKE_IRQ_IDX_STOWED_ALS),
-			buf[WAKE_IRQ_IDX_PROX]);
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_ALS),
+			buf[WAKE_IRQ_IDX_PROX],
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_RAW),
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_NOISE),
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_RECAL),
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_LTHRESH),
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_HTHRESH));
 	}
 	if (irq_status & M_CAMERA_GESTURE) {
 		stml0xx_as_data_buffer_write(ps_stml0xx, DT_CAMERA_ACT,
@@ -470,7 +482,7 @@ void stml0xx_irq_wake_work_func(struct work_struct *work)
 		dev_info(&stml0xx_misc_data->spi->dev,
 			"Sending algo stowed event %d, als %d, prox %d",
 			buf[WAKE_IRQ_IDX_MODALITY_STOWED + 3],
-			SH_TO_H16(buf + WAKE_IRQ_IDX_STOWED_ALS),
+			SH_TO_UH16(buf + WAKE_IRQ_IDX_PROX_ALS),
 			buf[WAKE_IRQ_IDX_PROX]);
 	}
 	if (irq2_status & M_ALGO_ACCUM_MODALITY) {
diff --git a/include/linux/stml0xx.h b/include/linux/stml0xx.h
index 821fd2f94b1..f27d2e32e4f 100644
--- a/include/linux/stml0xx.h
+++ b/include/linux/stml0xx.h
@@ -130,8 +130,14 @@ enum vmm_ids {
 #define WAKE_IRQ_IDX_MODALITY_ACCUM        50
 #define WAKE_IRQ_IDX_MODALITY_ACCUM_MVMT   52
 #define WAKE_IRQ_IDX_LOG_MSG               56
-#define WAKE_IRQ_IDX_STOWED_ALS		(WAKE_IRQ_IDX_LOG_MSG + LOG_MSG_SIZE)
-#define WAKE_IRQ_IDX_GLANCE                (WAKE_IRQ_IDX_STOWED_ALS + 2)
+#define WAKE_IRQ_IDX_GLANCE               (WAKE_IRQ_IDX_LOG_MSG + LOG_MSG_SIZE)
+#define WAKE_IRQ_IDX_PROX_ALS             (WAKE_IRQ_IDX_GLANCE + 2)
+#define WAKE_IRQ_IDX_PROX_UNUSED          (WAKE_IRQ_IDX_PROX_ALS + 2)
+#define WAKE_IRQ_IDX_PROX_RAW             (WAKE_IRQ_IDX_PROX_UNUSED + 1)
+#define WAKE_IRQ_IDX_PROX_NOISE           (WAKE_IRQ_IDX_PROX_RAW + 2)
+#define WAKE_IRQ_IDX_PROX_RECAL           (WAKE_IRQ_IDX_PROX_NOISE + 2)
+#define WAKE_IRQ_IDX_PROX_LTHRESH         (WAKE_IRQ_IDX_PROX_RECAL + 2)
+#define WAKE_IRQ_IDX_PROX_HTHRESH         (WAKE_IRQ_IDX_PROX_LTHRESH + 2)
 
 /* Non-wake IRQ work function flags */
 #define IRQ_WORK_FLAG_NONE                   0x00
@@ -181,6 +187,7 @@ enum vmm_ids {
 /* The following macros are intended to be called with the sensorhub IRQ
    handlers only and refer to local variables in those functions. */
 #define SH_TO_H16(buf) (int16_t)(*(buf) << 8 | *((buf)+1))
+#define SH_TO_UH16(buf) (uint16_t)(*(buf) << 8 | *((buf)+1))
 #define SH_TO_H32(buf) (int32_t)(*(buf) << 24 | *((buf)+1) << 16 \
 				| *((buf)+2) << 8 | *((buf)+3))
 
diff --git a/include/uapi/linux/motosh_vmm.h b/include/uapi/linux/motosh_vmm.h
index 06d7edf5289..1537d5c76d3 100644
--- a/include/uapi/linux/motosh_vmm.h
+++ b/include/uapi/linux/motosh_vmm.h
@@ -376,11 +376,11 @@ VMM_ENTRY(0x6B, DISP_BRIGHTNESS_DATA,					FALSE,
 		&vmm_disp_brightness_data,
 		sizeof(vmm_disp_brightness_data))
 VMM_ENTRY(0x6C, PROXIMITY_DATA,						FALSE,
-		&vmm_proximity_data,
+		vmm_proximity_data,
 		sizeof(vmm_proximity_data))
 VMM_ENTRY(0x6D, STOWED_DATA,						FALSE,
-		&vmm_stowed_data,
-		sizeof(vmm_stowed_data))
+		&vmm_stowed_event,
+		sizeof(vmm_stowed_event))
 VMM_ENTRY(0x6E, UNUSED_6E,						FALSE,
 		0,
 		0)
-- 
2.11.0

