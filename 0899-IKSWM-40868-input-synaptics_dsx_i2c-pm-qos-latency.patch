From 0d27fe3d17e3ea77c8e1c33dded4a71f88b4edc4 Mon Sep 17 00:00:00 2001
From: Konstantin Makariev <kmakariev@motorola.com>
Date: Tue, 24 May 2016 16:24:18 -0500
Subject: [PATCH 899/959] IKSWM-40868 input: synaptics_dsx_i2c: pm qos latency

Register touch IRQ to PM QOS service to enforce scheduling
latency.

Change-Id: Ia12adccfd081c98b501bb868fe6d2387baa54bbf
Signed-off-by: Konstantin Makariev <kmakariev@motorola.com>
Reviewed-on: http://gerrit.mot.com/861424
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/input/touchscreen/synaptics_dsx_i2c.c | 57 +++++++++++++++++++++++++++
 drivers/input/touchscreen/synaptics_dsx_i2c.h |  3 ++
 2 files changed, 60 insertions(+)

diff --git a/drivers/input/touchscreen/synaptics_dsx_i2c.c b/drivers/input/touchscreen/synaptics_dsx_i2c.c
index b43cdd372c2..118350a6cf6 100644
--- a/drivers/input/touchscreen/synaptics_dsx_i2c.c
+++ b/drivers/input/touchscreen/synaptics_dsx_i2c.c
@@ -50,6 +50,10 @@
 #define INPUT_PHYS_NAME "synaptics_dsx_i2c/input0"
 #define TYPE_B_PROTOCOL
 
+#define IRQ_DISPATCH_LATENCY	5000
+
+static int latency_in_effect = IRQ_DISPATCH_LATENCY;
+
 #define RMI4_WAIT_READY 0
 #define RMI4_HW_RESET 1
 #define RMI4_SW_RESET 2
@@ -2106,6 +2110,12 @@ static ssize_t synaptics_rmi4_drv_irq_show(struct device *dev,
 static ssize_t synaptics_rmi4_drv_irq_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count);
 
+static ssize_t synaptics_rmi4_pm_opt_show(struct device *dev,
+		struct device_attribute *attr, char *buf);
+
+static ssize_t synaptics_rmi4_pm_opt_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count);
+
 static ssize_t synaptics_rmi4_hw_irqstat_show(struct device *dev,
 		struct device_attribute *attr, char *buf);
 
@@ -2306,6 +2316,9 @@ static struct device_attribute attrs[] = {
 	__ATTR(tsi, S_IRUSR | S_IRGRP,
 			synaptics_rmi4_ud_show,
 			synaptics_rmi4_store_error),
+	__ATTR(pm_opt, (S_IRUSR | S_IRGRP | S_IWUSR | S_IWGRP),
+			synaptics_rmi4_pm_opt_show,
+			synaptics_rmi4_pm_opt_store),
 };
 
 struct synaptics_exp_fn_ctrl {
@@ -3419,6 +3432,38 @@ static ssize_t synaptics_rmi4_drv_irq_store(struct device *dev,
 	return count;
 }
 
+static ssize_t synaptics_rmi4_pm_opt_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	return scnprintf(buf, PAGE_SIZE, "%d\n", latency_in_effect);
+}
+
+static ssize_t synaptics_rmi4_pm_opt_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	unsigned long value = 0;
+	int err = 0;
+
+	err = kstrtoul(buf, 10, &value);
+	if (err < 0) {
+		pr_err("Failed to convert value\n");
+		return -EINVAL;
+	}
+
+	switch (value) {
+	case 0:
+		latency_in_effect = PM_QOS_DEFAULT_VALUE;
+		break;
+	case 1:
+		latency_in_effect = IRQ_DISPATCH_LATENCY;
+		break;
+	default:
+		pr_err("Invalid value\n");
+		return -EINVAL;
+	}
+	return count;
+}
+
 static ssize_t synaptics_rmi4_0dbutton_show(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
@@ -7159,6 +7204,10 @@ static int synaptics_rmi4_probe(struct i2c_client *client,
 			rmi4_data->is_fps_registered = true;
 	}
 
+	rmi4_data->pm_qos_irq.type = PM_QOS_REQ_AFFINE_IRQ;
+	rmi4_data->pm_qos_irq.irq = rmi4_data->irq;
+	pm_qos_add_request(&rmi4_data->pm_qos_irq, PM_QOS_CPU_DMA_LATENCY,
+			latency_in_effect);
 	return retval;
 
 err_sysfs:
@@ -7268,9 +7317,12 @@ static int synaptics_rmi4_remove(struct i2c_client *client)
 #endif
 	if (rmi4_data->charger_detection_enabled)
 		ps_notifier_unregister(rmi4_data);
+
 	if (rmi4_data->is_fps_registered)
 		FPS_unregister_notifier(&rmi4_data->fps_notif, 0xBEEF);
 
+	pm_qos_remove_request(&rmi4_data->pm_qos_irq);
+
 	kfree(rmi4_data);
 	return 0;
 }
@@ -7537,6 +7589,8 @@ static int synaptics_rmi4_suspend(struct device *dev)
 		rmi4_data->ic_on = false;
 	}
 
+	pm_qos_update_request(&rmi4_data->pm_qos_irq, PM_QOS_DEFAULT_VALUE);
+
 	return 0;
 }
 
@@ -7563,6 +7617,9 @@ static int synaptics_rmi4_resume(struct device *dev)
 	if (atomic_cmpxchg(&rmi4_data->touch_stopped, 1, 0) == 0)
 		return 0;
 
+	pm_qos_update_request(&rmi4_data->pm_qos_irq, latency_in_effect);
+	pr_debug("set pm_qos latency %d\n", latency_in_effect);
+
 	synaptics_dsx_resumeinfo_start(rmi4_data);
 
 	if (!rmi4_data->ic_on) {
diff --git a/drivers/input/touchscreen/synaptics_dsx_i2c.h b/drivers/input/touchscreen/synaptics_dsx_i2c.h
index 9323a3e5281..714b7bac838 100644
--- a/drivers/input/touchscreen/synaptics_dsx_i2c.h
+++ b/drivers/input/touchscreen/synaptics_dsx_i2c.h
@@ -28,6 +28,7 @@
 #include <linux/version.h>
 #include <linux/ktime.h>
 #include <linux/semaphore.h>
+#include <linux/pm_qos.h>
 #if defined(USB_CHARGER_DETECTION)
 #include <linux/usb.h>
 #include <linux/power_supply.h>
@@ -581,6 +582,8 @@ struct synaptics_rmi4_data {
 
 	struct mutex rmi4_exp_init_mutex;
 	unsigned long event_blank;
+	int pm_qos_latency;
+	struct pm_qos_request pm_qos_irq;
 };
 
 struct time_keeping {
-- 
2.11.0

