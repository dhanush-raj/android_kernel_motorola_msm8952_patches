From 54ced8a4839148f56d4f613fb47150c091b0c240 Mon Sep 17 00:00:00 2001
From: Jingnan Zhu <e3334c@motorola.com>
Date: Fri, 29 Jan 2016 10:07:33 -0600
Subject: [PATCH 662/959] IKSWM-18556: input:misc: vl53l0: fix report sticking

1. fixing the reporting sticking issue
2. apply the xtalk compensation
3. disable sigma check
4. disable the debug log

Change-Id: Ied6a741fb5356ef59411f7317c25ce1753b884f3
Signed-off-by: Jingnan Zhu <e3334c@motorola.com>
Reviewed-on: http://gerrit.mot.com/817300
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Hideki Yoshino <hideki.yoshino@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/input/misc/vl53L0/stmvl53l0.h        |  5 ++--
 drivers/input/misc/vl53L0/stmvl53l0_module.c | 35 +++++++++++++++++++++++++---
 2 files changed, 35 insertions(+), 5 deletions(-)

diff --git a/drivers/input/misc/vl53L0/stmvl53l0.h b/drivers/input/misc/vl53L0/stmvl53l0.h
index 7d5daa6e420..1e5a84d1c69 100644
--- a/drivers/input/misc/vl53L0/stmvl53l0.h
+++ b/drivers/input/misc/vl53L0/stmvl53l0.h
@@ -36,10 +36,10 @@
 /* #define INT_POLLING_DELAY	20 */
 
 /* if don't want to have output from vl6180_dbgmsg, comment out #DEBUG macro */
-#define DEBUG
+/*#define DEBUG*/
 /* #define vl6180_dbgmsg(str, args...) pr_debug("%s: " str, __func__, ##args) */
 #define vl53l0_dbgmsg(str, args...)	\
-	printk(KERN_INFO "%s: " str, __func__, ##args)
+	pr_debug("%s: " str, __func__, ##args)
 /* #define vl6180_errmsg(str, args...) pr_err("%s: " str, __func__, ##args) */
 #define vl53l0_errmsg(str, args...) \
 	printk(KERN_ERR "%s: " str, __func__, ##args)
@@ -159,6 +159,7 @@ struct stmvl53l0_data {
 	uint8_t cut_v;
 	unsigned int xtalkCalDistance;
 	unsigned int offsetCalDistance;
+	VL53L0_GpioFunctionality gpio_function;
 };
 
 /*
diff --git a/drivers/input/misc/vl53L0/stmvl53l0_module.c b/drivers/input/misc/vl53L0/stmvl53l0_module.c
index ee597945b12..307f10e83fd 100644
--- a/drivers/input/misc/vl53L0/stmvl53l0_module.c
+++ b/drivers/input/misc/vl53L0/stmvl53l0_module.c
@@ -739,16 +739,23 @@ static void stmvl53l0_enter_off(struct stmvl53l0_data *data, uint8_t from)
 }
 static void stmvl53l0_enter_cam(struct stmvl53l0_data *data, uint8_t from)
 {
+	VL53L0_RangingMeasurementData_t    RMData;
+
 	mutex_lock(&data->work_mutex);
 	vl53l0_dbgmsg("Enter, stmvl53l0_enter_cam from:%d\n", from);
 	/* turn on tof sensor */
 	if (data->enable_ps_sensor == 0)
 		stmvl53l0_start(data);
 
+	papi_func_tbl->SetDeviceMode(data,
+		VL53L0_DEVICEMODE_SINGLE_RANGING);
+	papi_func_tbl->PerformSingleRangingMeasurement(data,
+		&RMData);
 	vl53l0_dbgmsg("Call of VL53L0_DEVICEMODE_CONTINUOUS_RANGING\n");
 	papi_func_tbl->SetGpioConfig(data, 0, 0,
 		VL53L0_GPIOFUNCTIONALITY_NEW_MEASURE_READY,
 		VL53L0_INTERRUPTPOLARITY_LOW);
+	data->gpio_function = VL53L0_GPIOFUNCTIONALITY_NEW_MEASURE_READY;
 	papi_func_tbl->SetDeviceMode(data,
 		VL53L0_DEVICEMODE_CONTINUOUS_RANGING);
 	papi_func_tbl->StartMeasurement(data);
@@ -779,6 +786,7 @@ static void stmvl53l0_enter_sar(struct stmvl53l0_data *data, uint8_t from)
 	papi_func_tbl->SetGpioConfig(data, 0, 0,
 		VL53L0_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW,
 		VL53L0_INTERRUPTPOLARITY_LOW);
+	data->gpio_function = VL53L0_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW;
 	papi_func_tbl->SetInterruptThresholds(data,
 		0, data->lowv << 16, data->highv << 16);
 	papi_func_tbl->SetDeviceMode(data,
@@ -796,9 +804,12 @@ static void stmvl53l0_enter_super(struct stmvl53l0_data *data, uint8_t from)
 	vl53l0_dbgmsg("Enter, stmvl53l0_enter_super flag:%d\n", from);
 	if (from == SAR_MODE) {
 		vl53l0_dbgmsg("Call of VL53L0_DEVICEMODE_CONTINUOUS_RANGING\n");
+		papi_func_tbl->StopMeasurement(data);
+		papi_func_tbl->ClearInterruptMask(data, 0);
 		papi_func_tbl->SetGpioConfig(data, 0, 0,
 			VL53L0_GPIOFUNCTIONALITY_NEW_MEASURE_READY,
 			VL53L0_INTERRUPTPOLARITY_LOW);
+		data->gpio_function = VL53L0_GPIOFUNCTIONALITY_NEW_MEASURE_READY;
 		papi_func_tbl->SetDeviceMode(data,
 			VL53L0_DEVICEMODE_CONTINUOUS_RANGING);
 		papi_func_tbl->StartMeasurement(data);
@@ -989,7 +1000,7 @@ data->rangeData.MeasurementTimeUsec = tv.tv_usec;
 wake_up(&data->range_data_wait);
 	if (CAM_MODE == data->w_mode) {
 		vl53l0_dbgmsg("CAM_MODE\n");
-
+		 papi_func_tbl->StartMeasurement(data);
 		if (data->enableDebug)
 			vl53l0_errmsg("range:%d, signalRateRtnMegaCps:%d, \
 				error:0x%x,rtnambrate:%u,Dmax:%d,measuretime:%u\n",
@@ -1003,10 +1014,13 @@ wake_up(&data->range_data_wait);
 		vl53l0_dbgmsg("SAR_MODE\n");
 		if (RMData.RangeMilliMeter < data->lowv) {
 			vl53l0_dbgmsg("SAR enter LOW\n");
+			papi_func_tbl->StopMeasurement(vl53l0_dev);
+			papi_func_tbl->ClearInterruptMask(vl53l0_dev, 0);
 			stmvl53l0_ps_read_measurement(vl53l0_dev);
 			papi_func_tbl->SetGpioConfig(data, 0, 0,
 			VL53L0_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH,
 			VL53L0_INTERRUPTPOLARITY_LOW);
+			data->gpio_function = VL53L0_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH;
 			papi_func_tbl->SetInterMeasurementPeriodMilliSeconds(
 				data, data->delay_ms);
 			papi_func_tbl->SetMeasurementTimingBudgetMicroSeconds(
@@ -1022,10 +1036,13 @@ wake_up(&data->range_data_wait);
 			vl53l0_dbgmsg("SAR enter LOW sent uevent\n");
 		} else if (RMData.RangeMilliMeter > data->highv) {
 			vl53l0_dbgmsg("SAR enter HIGH\n");
+			papi_func_tbl->StopMeasurement(vl53l0_dev);
+			papi_func_tbl->ClearInterruptMask(vl53l0_dev, 0);
 			stmvl53l0_ps_read_measurement(vl53l0_dev);
 			papi_func_tbl->SetGpioConfig(data, 0, 0,
 			VL53L0_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW,
 			VL53L0_INTERRUPTPOLARITY_LOW);
+			data->gpio_function = VL53L0_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW;
 			papi_func_tbl->SetInterMeasurementPeriodMilliSeconds(
 				data, data->delay_ms);
 			papi_func_tbl->SetMeasurementTimingBudgetMicroSeconds(
@@ -1073,9 +1090,13 @@ static void stmvl53l0_work_handler(struct work_struct *work)
 			vl53l0_dev, &InterruptMask);
 
 		vl53l0_dbgmsg(" InterruptMasksssss :%d\n", InterruptMask);
-		if (InterruptMask > 0 && InterruptMask <= 4 && data->interrupt_received == 1) {
+		if (InterruptMask == data->gpio_function  && data->interrupt_received == 1) {
 			data->interrupt_received = 0;
 			stmvl53l0_state_process();
+		} else if (InterruptMask > 0) {
+			papi_func_tbl->StopMeasurement(data);
+			papi_func_tbl->ClearInterruptMask(data, 0);
+			papi_func_tbl->StartMeasurement(data);
 		}
 	}
 
@@ -1172,6 +1193,7 @@ struct device_attribute *attr, const char *buf, size_t count)
 		Status = papi_func_tbl->SetGpioConfig(data, 0, 0,
 			VL53L0_GPIOFUNCTIONALITY_NEW_MEASURE_READY,
 			VL53L0_INTERRUPTPOLARITY_LOW);
+		data->gpio_function = VL53L0_GPIOFUNCTIONALITY_NEW_MEASURE_READY;
 		Status = papi_func_tbl->SetDeviceMode(data,
 			VL53L0_DEVICEMODE_SINGLE_RANGING);
 		papi_func_tbl->SetMeasurementTimingBudgetMicroSeconds(
@@ -1184,6 +1206,7 @@ struct device_attribute *attr, const char *buf, size_t count)
 		Status = papi_func_tbl->SetGpioConfig(data, 0, 0,
 			VL53L0_GPIOFUNCTIONALITY_NEW_MEASURE_READY,
 			VL53L0_INTERRUPTPOLARITY_LOW);
+		data->gpio_function = VL53L0_GPIOFUNCTIONALITY_NEW_MEASURE_READY;
 		Status = papi_func_tbl->SetDeviceMode(data,
 			VL53L0_DEVICEMODE_CONTINUOUS_RANGING);
 		papi_func_tbl->StartMeasurement(data);
@@ -1192,6 +1215,7 @@ struct device_attribute *attr, const char *buf, size_t count)
 		Status = papi_func_tbl->SetGpioConfig(data, 0, 0,
 			VL53L0_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW,
 			VL53L0_INTERRUPTPOLARITY_LOW);
+			data->gpio_function = VL53L0_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW;
 		Status = papi_func_tbl->SetDeviceMode(data,
 			VL53L0_DEVICEMODE_CONTINUOUS_RANGING);
 		papi_func_tbl->SetInterruptThresholds
@@ -1205,7 +1229,7 @@ struct device_attribute *attr, const char *buf, size_t count)
 		papi_func_tbl->SetGpioConfig(data, 0, 0,
 			VL53L0_GPIOFUNCTIONALITY_NEW_MEASURE_READY,
 			VL53L0_INTERRUPTPOLARITY_LOW);
-
+		data->gpio_function = VL53L0_GPIOFUNCTIONALITY_NEW_MEASURE_READY;
 		papi_func_tbl->SetInterruptThresholds
 			(data, 0, 30 << 16, 40 << 16);
 		Status = papi_func_tbl->SetDeviceMode(data,
@@ -1216,6 +1240,7 @@ struct device_attribute *attr, const char *buf, size_t count)
 		Status = papi_func_tbl->SetGpioConfig(data, 0, 0,
 			VL53L0_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH,
 			VL53L0_INTERRUPTPOLARITY_LOW);
+		data->gpio_function = VL53L0_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH;
 		Status = papi_func_tbl->SetDeviceMode(data,
 			VL53L0_DEVICEMODE_CONTINUOUS_RANGING);
 		papi_func_tbl->SetInterruptThresholds
@@ -1972,6 +1997,10 @@ static int stmvl53l0_init_client(struct stmvl53l0_data *data)
 	if (data->xtalk != 0)
 		papi_func_tbl->SetXTalkCompensationRateMegaCps(
 		vl53l0_dev, (FixPoint1616_t)data->xtalk);
+	papi_func_tbl->SetXTalkCompensationEnable(vl53l0_dev, 1);
+	papi_func_tbl->SetLimitCheckEnable(vl53l0_dev,
+		VL53L0_CHECKENABLE_SIGMA_FINAL_RANGE, 0);
+
 #ifdef CALIBRATION_FILE
 	/*stmvl53l0_read_calibration_file(data);*/
 #endif
-- 
2.11.0

