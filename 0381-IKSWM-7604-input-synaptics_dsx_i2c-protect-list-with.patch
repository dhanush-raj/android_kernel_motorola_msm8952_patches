From 34d3969583ebad66b438cc97e3f422c33f65dcac Mon Sep 17 00:00:00 2001
From: Konstantin Makariev <kmakariev@motorola.com>
Date: Tue, 28 Jul 2015 16:57:45 -0500
Subject: [PATCH 381/959] IKSWM-7604 input: synaptics_dsx_i2c: protect list
 with semaphore

Originally list of patches was updated synchronously and did not
require protection. Introduction of charger detection created
opportunity when list of patches can be modified asyncronously
whenever charger detection callback is called. Thus adding a
semaphore to prevent list from being modified during config update.

Change-Id: I8c70e55dbc6c4831d4905d197eac1f28fad4243c
Signed-off-by: Konstantin Makariev <kmakariev@motorola.com>
---
 drivers/input/touchscreen/synaptics_dsx_i2c.c | 91 ++++++++++++++++++---------
 drivers/input/touchscreen/synaptics_dsx_i2c.h |  2 +
 2 files changed, 65 insertions(+), 28 deletions(-)

diff --git a/drivers/input/touchscreen/synaptics_dsx_i2c.c b/drivers/input/touchscreen/synaptics_dsx_i2c.c
index 707a2684466..f5fa40009b4 100644
--- a/drivers/input/touchscreen/synaptics_dsx_i2c.c
+++ b/drivers/input/touchscreen/synaptics_dsx_i2c.c
@@ -2217,6 +2217,7 @@ static void synaptics_dsx_patch_func(
 	function = regs->f_number & 0xff;
 	rt_mod = register_type_to_ascii(regs->f_number & 0xf00);
 	pr_debug("patching F%x%c\n",  function, rt_mod);
+	down(&patch->list_sema);
 	list_for_each_entry(fp, &patch->cfg_head, link) {
 		if (fp->func != f_number)
 			continue;
@@ -2237,7 +2238,7 @@ static void synaptics_dsx_patch_func(
 			error =	synaptics_rmi4_read_packet_reg(
 					rmi4_data, regs, reg->r_number);
 			if (error < 0)
-				return;
+				goto unlock_and_leave;
 #if defined(CONFIG_DYNAMIC_DEBUG) || defined(DEBUG)
 			{
 				int ss, kk;
@@ -2305,6 +2306,9 @@ static void synaptics_dsx_patch_func(
 		}
 		reg->updated = false;
 	}
+
+unlock_and_leave:
+	up(&patch->list_sema);
 }
 
 static void synaptics_dsx_enable_wakeup_source(
@@ -5691,23 +5695,28 @@ exit:
 }
 EXPORT_SYMBOL(synaptics_rmi4_new_function);
 
-static void synaptics_dsx_free_patch(struct synaptics_dsx_patch *patch)
+static void synaptics_dsx_free_patch(struct synaptics_dsx_patch *patch_set)
 {
-	struct synaptics_dsx_func_patch *fp;
-	list_for_each_entry(fp, &patch->cfg_head, link)
+	struct synaptics_dsx_func_patch *fp, *next_list_entry;
+	down(&patch_set->list_sema);
+	list_for_each_entry_safe(fp, next_list_entry,
+				&patch_set->cfg_head, link) {
 		kfree(fp->data);
-	kfree(patch);
+		list_del(&fp->link);
+	}
+	up(&patch_set->list_sema);
 }
 
 static struct synaptics_dsx_patch *synaptics_dsx_init_patch(const char *name)
 {
-	struct synaptics_dsx_patch *patch;
-	patch = kzalloc(sizeof(struct synaptics_dsx_patch), GFP_KERNEL);
-	if (patch) {
-		patch->name = name;
-		INIT_LIST_HEAD(&patch->cfg_head);
+	struct synaptics_dsx_patch *patch_set;
+	patch_set = kzalloc(sizeof(struct synaptics_dsx_patch), GFP_KERNEL);
+	if (patch_set) {
+		patch_set->name = name;
+		sema_init(&patch_set->list_sema, 1);
+		INIT_LIST_HEAD(&patch_set->cfg_head);
 	}
-	return patch;
+	return patch_set;
 }
 
 static int synaptics_dsx_init_mode(struct synaptics_rmi4_data *data,
@@ -5813,6 +5822,20 @@ static int rmi_reboot(struct notifier_block *nb,
 }
 
 #if defined(USB_CHARGER_DETECTION)
+static void synaptics_dsx_modify_patch(struct synaptics_dsx_patch *patch_set,
+	struct synaptics_dsx_func_patch *patch, bool remove)
+{
+	down(&patch_set->list_sema);
+	if (!remove) {
+		list_add_tail(&patch->link, &patch_set->cfg_head);
+		patch_set->cfg_num++;
+	} else {
+		list_del(&patch->link);
+		patch_set->cfg_num--;
+	}
+	up(&patch_set->list_sema);
+}
+
 /***************************************************************/
 /* USB charging source info from power_supply driver directly  */
 /***************************************************************/
@@ -5824,13 +5847,25 @@ static enum power_supply_property ps_props[] = {
 static const char * const ps_usb_supply[] = { "usb", };
 static bool ps_usb_present;
 static unsigned char ps_data[2] = { 0x20, 0 };
-static struct synaptics_dsx_func_patch ps_active = {
-	.func = 1,
-	.regstr = 0,
-	.subpkt = 0,
-	.size = 1,
-	.bitmask = 0x20,
-	.data = &ps_data[0],
+/* need separate copies of the same patch, since it has */
+/* to be added into active and suspended configurations */
+static struct synaptics_dsx_func_patch ps_on[MAX_NUM_STATES] = {
+	{
+		.func = 1,
+		.regstr = 0,
+		.subpkt = 0,
+		.size = 1,
+		.bitmask = 0x20,
+		.data = &ps_data[0],
+	},
+	{
+		.func = 1,
+		.regstr = 0,
+		.subpkt = 0,
+		.size = 1,
+		.bitmask = 0x20,
+		.data = &ps_data[0],
+	},
 };
 static struct synaptics_dsx_func_patch ps_set = {
 	.func = 1,
@@ -5881,16 +5916,14 @@ static void ps_external_power_changed(struct power_supply *psy)
 	dev_dbg(dev, "external_power_changed: %d\n", pval.intval);
 
 	if (ps_usb_present != (pval.intval == 1)) {
-		int index = !!pval.intval;
-		struct synaptics_dsx_patch *patch_ptr =
-				rmi4_data->default_mode->patch_data[ACTIVE_IDX];
-		if (index == 1) {
-			list_add_tail(&ps_active.link, &patch_ptr->cfg_head);
-			patch_ptr->cfg_num++;
-		} else {
-			list_del(&ps_active.link);
-			patch_ptr->cfg_num--;
-		}
+		int i, index = !!pval.intval;
+
+		/* charging patch has to be added into */
+		/* both patch sets: active and suspend */
+		for (i = 0; i < MAX_NUM_STATES; i++)
+			synaptics_dsx_modify_patch(
+				rmi4_data->default_mode->patch_data[i],
+				&ps_on[i], index == 0);
 
 		state = synaptics_dsx_get_state_safe(rmi4_data);
 		dev_info(dev, "power supply presence %d in state %d\n",
@@ -5920,9 +5953,11 @@ static int ps_notifier_register(struct synaptics_rmi4_data *rmi4_data)
 	rmi4_data->psy.external_power_changed = ps_external_power_changed;
 
 	INIT_LIST_HEAD(&ps_patch[0].cfg_head);
+	sema_init(&ps_patch[0].list_sema, 1);
 	list_add_tail(&ps_clear.link, &ps_patch[0].cfg_head);
 
 	INIT_LIST_HEAD(&ps_patch[1].cfg_head);
+	sema_init(&ps_patch[1].list_sema, 1);
 	list_add_tail(&ps_set.link, &ps_patch[1].cfg_head);
 
 	error = power_supply_register(dev, &rmi4_data->psy);
diff --git a/drivers/input/touchscreen/synaptics_dsx_i2c.h b/drivers/input/touchscreen/synaptics_dsx_i2c.h
index f939f6123ed..dd0fed355f7 100644
--- a/drivers/input/touchscreen/synaptics_dsx_i2c.h
+++ b/drivers/input/touchscreen/synaptics_dsx_i2c.h
@@ -24,6 +24,7 @@
 
 #include <linux/version.h>
 #include <linux/ktime.h>
+#include <linux/semaphore.h>
 #if defined(USB_CHARGER_DETECTION)
 #include <linux/usb.h>
 #include <linux/power_supply.h>
@@ -232,6 +233,7 @@ struct synaptics_dsx_func_patch {
 struct synaptics_dsx_patch {
 	const char *name;
 	int	cfg_num;
+	struct semaphore list_sema;
 	struct list_head cfg_head;
 };
 
-- 
2.11.0

