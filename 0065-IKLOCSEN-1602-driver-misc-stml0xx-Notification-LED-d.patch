From bf1aeb05d603753e6c27fe2ef34e9ddafc6f65ee Mon Sep 17 00:00:00 2001
From: Robert Wiegand <qa2113@motorola.com>
Date: Wed, 13 Aug 2014 10:59:02 -0500
Subject: [PATCH 065/959] IKLOCSEN-1602 driver: misc: stml0xx: Notification LED
 driver improvements

Store the notification LED state in the LED device's storage rather
than in the SMTL0XX's data.
Add some standard Linux LED APIs.
Use #defines for data values.

Change-Id: I3b8f5430322064bea2b9b89fd34fc0a0d8fb2766
Signed-off-by: Robert Wiegand <qa2113@motorola.com>
Reviewed-on: http://gerrit.mot.com/662401
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Jason Jae Hyun Koh <jasonkoh@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/misc/stml0xx/stml0xx_core.c  |   6 ++
 drivers/misc/stml0xx/stml0xx_led.c   | 105 +++++++++++++++++++++++------------
 drivers/misc/stml0xx/stml0xx_reset.c |   2 +-
 include/linux/stml0xx.h              |  17 ++++--
 4 files changed, 86 insertions(+), 44 deletions(-)

diff --git a/drivers/misc/stml0xx/stml0xx_core.c b/drivers/misc/stml0xx/stml0xx_core.c
index bc6f3980214..76922600546 100644
--- a/drivers/misc/stml0xx/stml0xx_core.c
+++ b/drivers/misc/stml0xx/stml0xx_core.c
@@ -873,6 +873,12 @@ static int stml0xx_probe(struct spi_device *spi)
 	}
 
 	ps_stml0xx->led_cdev.name =  STML0XX_LED_NAME;
+	ps_stml0xx->led_cdev.brightness_set = stml0xx_brightness_set;
+	ps_stml0xx->led_cdev.brightness_get = stml0xx_brightness_get;
+	ps_stml0xx->led_cdev.blink_set = stml0xx_blink_set;
+	ps_stml0xx->led_cdev.blink_delay_on = 1000;
+	ps_stml0xx->led_cdev.blink_delay_off = 1000;
+	ps_stml0xx->led_cdev.max_brightness = STML0XX_LED_MAX_BRIGHTNESS;
 	err = led_classdev_register(&spi->dev, &ps_stml0xx->led_cdev);
 	if (err < 0) {
 		dev_err(&ps_stml0xx->spi->dev,
diff --git a/drivers/misc/stml0xx/stml0xx_led.c b/drivers/misc/stml0xx/stml0xx_led.c
index 96e219aca32..df465c0658c 100644
--- a/drivers/misc/stml0xx/stml0xx_led.c
+++ b/drivers/misc/stml0xx/stml0xx_led.c
@@ -23,25 +23,25 @@
 
 #include <linux/stml0xx.h>
 
-int stml0xx_led_set(struct stml0xx_data *ps_stml0xx)
+int stml0xx_led_set(struct led_classdev *led_cdev)
 {
 	unsigned char buf[SPI_MSG_SIZE];
 	int err;
 
-	buf[0] = ps_stml0xx->led_rgb >> 24;
-	buf[1] = (ps_stml0xx->led_rgb >> 16) & 0xFF;
-	buf[2] = (ps_stml0xx->led_rgb >> 8) & 0xFF;
-	buf[3] = ps_stml0xx->led_rgb & 0xFF;
+	buf[0] = led_cdev->brightness >> 24;
+	buf[1] = (led_cdev->brightness >> 16) & 0xFF;
+	buf[2] = (led_cdev->brightness >> 8) & 0xFF;
+	buf[3] = led_cdev->brightness & 0xFF;
 
-	buf[4] = ps_stml0xx->led_ms_on >> 24;
-	buf[5] = (ps_stml0xx->led_ms_on >> 16) & 0xFF;
-	buf[6] = (ps_stml0xx->led_ms_on >> 8) & 0xFF;
-	buf[7] = ps_stml0xx->led_ms_on & 0xFF;
+	buf[4] = led_cdev->blink_delay_on >> 24;
+	buf[5] = (led_cdev->blink_delay_on >> 16) & 0xFF;
+	buf[6] = (led_cdev->blink_delay_on >> 8) & 0xFF;
+	buf[7] = led_cdev->blink_delay_on & 0xFF;
 
-	buf[8] = ps_stml0xx->led_ms_off >> 24;
-	buf[9] = (ps_stml0xx->led_ms_off >> 16) & 0xFF;
-	buf[10] = (ps_stml0xx->led_ms_off >> 8) & 0xFF;
-	buf[11] = ps_stml0xx->led_ms_off & 0xFF;
+	buf[8] = led_cdev->blink_delay_off >> 24;
+	buf[9] = (led_cdev->blink_delay_off >> 16) & 0xFF;
+	buf[10] = (led_cdev->blink_delay_off >> 8) & 0xFF;
+	buf[11] = led_cdev->blink_delay_off & 0xFF;
 
 	err = stml0xx_spi_send_write_reg(LED_NOTIF_CONTROL, buf, 12);
 	if (err < 0)
@@ -53,15 +53,12 @@ int stml0xx_led_set(struct stml0xx_data *ps_stml0xx)
 static ssize_t notification_show_control(struct device *dev,
 	struct device_attribute *attr, char *buf)
 {
-	struct led_classdev *led = dev_get_drvdata(dev);
-	struct stml0xx_data *ps_stml0xx =
-		container_of(led, struct stml0xx_data, led_cdev);
+	struct led_classdev *led_cdev = dev_get_drvdata(dev);
 
 	scnprintf(buf, PAGE_SIZE,
-		"RGB=0x%08X, on/off=%d/%d ms, ramp=%d%%/%d%%\n",
-		ps_stml0xx->led_rgb, ps_stml0xx->led_ms_on,
-		ps_stml0xx->led_ms_off, ps_stml0xx->led_ramp_up,
-		ps_stml0xx->led_ramp_down);
+		"RGB=0x%08X, on/off=%ld/%ld ms, ramp=%d%%/%d%%\n",
+		led_cdev->brightness, led_cdev->blink_delay_on,
+		led_cdev->blink_delay_off, 0, 0);
 
 	return strlen(buf);
 }
@@ -70,9 +67,9 @@ static ssize_t notification_store_control(struct device *dev,
 	struct device_attribute *attr,
 	const char *buf, size_t len)
 {
-	struct led_classdev *led = dev_get_drvdata(dev);
+	struct led_classdev *led_cdev = dev_get_drvdata(dev);
 	struct stml0xx_data *ps_stml0xx =
-		container_of(led, struct stml0xx_data, led_cdev);
+		container_of(led_cdev, struct stml0xx_data, led_cdev);
 	unsigned rgb = 0, ms_on = 0, ms_off = 0, rup = 0, rdown = 0;
 
 	if (len == 0)
@@ -88,26 +85,61 @@ static ssize_t notification_store_control(struct device *dev,
 		ms_on = 0;
 		ms_off = 0;
 	}
-	/* Total ramp time cannot be more than 100% */
-	if (rup + rdown > 100) {
-		rup = 50;
-		rdown = 50;
-	}
-	/* If ms_on is not 0 but ms_off is 0 we won't blink */
-	if (ms_off == 0)
-		ms_on = 0;
 
-	ps_stml0xx->led_rgb = rgb;
-	ps_stml0xx->led_ms_on = ms_on;
-	ps_stml0xx->led_ms_off = ms_off;
-	ps_stml0xx->led_ramp_up = rup;
-	ps_stml0xx->led_ramp_down = rdown;
+	led_cdev->brightness = rgb;
+	led_cdev->blink_delay_on = ms_on;
+	led_cdev->blink_delay_off = ms_off;
 
-	stml0xx_led_set(ps_stml0xx);
+	stml0xx_led_set(led_cdev);
 
 	return len;
 }
 
+void stml0xx_brightness_set(struct led_classdev *led_cdev,
+	enum led_brightness value)
+{
+	switch (value) {
+	case LED_OFF:
+		led_cdev->brightness = STML0XX_LED_OFF;
+		break;
+	case LED_HALF:
+		led_cdev->brightness = STML0XX_LED_HALF_BRIGHTNESS;
+		break;
+	case LED_FULL:
+		led_cdev->brightness = STML0XX_LED_MAX_BRIGHTNESS;
+		break;
+	}
+
+	stml0xx_led_set(led_cdev);
+}
+
+enum led_brightness stml0xx_brightness_get(struct led_classdev *led_cdev)
+{
+	if (led_cdev->brightness == STML0XX_LED_OFF)
+		return LED_OFF;
+	else if (led_cdev->brightness == STML0XX_LED_MAX_BRIGHTNESS)
+		return LED_FULL;
+	else
+		return LED_HALF;
+
+}
+
+int stml0xx_blink_set(struct led_classdev *led_cdev,
+	unsigned long *delay_on, unsigned long *delay_off)
+{
+	if (*delay_on > STML0XX_LED_MAX_DELAY)
+		*delay_on = STML0XX_LED_MAX_DELAY;
+	if (*delay_off > STML0XX_LED_MAX_DELAY)
+		*delay_off = STML0XX_LED_MAX_DELAY;
+
+	led_cdev->blink_delay_on = *delay_on;
+	led_cdev->blink_delay_off = *delay_off;
+
+	stml0xx_led_set(led_cdev);
+
+	return 0;
+}
+
 static DEVICE_ATTR(control, S_IRUGO | S_IWUSR,
 	notification_show_control, notification_store_control);
 
@@ -119,4 +151,3 @@ static struct attribute *notification_led_attributes[] = {
 struct attribute_group stml0xx_notification_attribute_group = {
 	.attrs = notification_led_attributes
 };
-
diff --git a/drivers/misc/stml0xx/stml0xx_reset.c b/drivers/misc/stml0xx/stml0xx_reset.c
index b0d3d93173e..5626526db2f 100644
--- a/drivers/misc/stml0xx/stml0xx_reset.c
+++ b/drivers/misc/stml0xx/stml0xx_reset.c
@@ -144,7 +144,7 @@ int stml0xx_reset_and_init(void)
 		ret_err = err;
 	}
 
-	err = stml0xx_led_set(stml0xx_misc_data);
+	err = stml0xx_led_set(&stml0xx_misc_data->led_cdev);
 	if (err < 0)
 		ret_err =  err;
 
diff --git a/include/linux/stml0xx.h b/include/linux/stml0xx.h
index 372b4bf5b9e..1b01ab09708 100644
--- a/include/linux/stml0xx.h
+++ b/include/linux/stml0xx.h
@@ -517,6 +517,11 @@ struct stm_response {
 #define SIM_DATA	0
 #define STEP_DETECT	0
 
+#define STML0XX_LED_MAX_DELAY 0xFFFF
+#define STML0XX_LED_MAX_BRIGHTNESS 0x00FFFFFF
+#define STML0XX_LED_HALF_BRIGHTNESS 0x007F7F7F
+#define STML0XX_LED_OFF 0x00000000
+
 /* The following macros are intended to be called with the stm IRQ handlers */
 /* only and refer to local variables in those functions. */
 #define STM16_TO_HOST(x) ((short) be16_to_cpu( \
@@ -606,11 +611,6 @@ struct stml0xx_data {
 	bool pending_wake_work;
 
 	struct led_classdev led_cdev;
-	unsigned int led_rgb;
-	unsigned int led_ms_on;
-	unsigned int led_ms_off;
-	unsigned int led_ramp_up;
-	unsigned int led_ramp_down;
 };
 
 /* per algo config, request, and event registers */
@@ -690,7 +690,12 @@ int stml0xx_get_version(struct stml0xx_data *ps_stml0xx);
 int switch_stml0xx_mode(enum stm_mode mode);
 int stml0xx_bootloadermode(struct stml0xx_data *ps_stml0xx);
 
-int stml0xx_led_set(struct stml0xx_data *ps_stml0xx);
+int stml0xx_led_set(struct led_classdev *led_cdev);
+void stml0xx_brightness_set(struct led_classdev *led_cdev,
+	enum led_brightness value);
+enum led_brightness stml0xx_brightness_get(struct led_classdev *led_cdev);
+int stml0xx_blink_set(struct led_classdev *led_cdev,
+	unsigned long *delay_on, unsigned long *delay_off);
 
 extern struct stml0xx_data *stml0xx_misc_data;
 
-- 
2.11.0

