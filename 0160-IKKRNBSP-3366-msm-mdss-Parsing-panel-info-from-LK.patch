From a571cc929f069cc497904f57aa543ca954d4983b Mon Sep 17 00:00:00 2001
From: Shiyong Li <a22381@motorola.com>
Date: Tue, 22 Sep 2015 17:25:19 -0700
Subject: [PATCH 160/959] IKKRNBSP-3366: msm: mdss: Parsing panel info from LK

Parse and store panel information passed from LK, including:
panel_name, manufacture_id, controller_ver, controller_drv_ver,
esd, bare_board.

Port from f0d58cad with some updates.

Change-Id: I8ffa5e0ed91215aa140a7c753576725708b6dd8b
Signed-off-by: Shiyong Li <a22381@motorola.com>
Reviewed-on: http://gerrit.mot.com/784113
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Bang Nguyen <bangnguyen@motorola.com>
Reviewed-by: Zachary Crosby <zac@motorola.com>
Reviewed-by: Joseph Swantek <jswantek@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/video/msm/mdss/mdss_dsi.c       |  8 +++++
 drivers/video/msm/mdss/mdss_dsi.h       |  9 +++++
 drivers/video/msm/mdss/mdss_dsi_panel.c | 59 +++++++++++++++++++++++++++++++++
 3 files changed, 76 insertions(+)

diff --git a/drivers/video/msm/mdss/mdss_dsi.c b/drivers/video/msm/mdss/mdss_dsi.c
index 9ba42360998..892f38937c4 100644
--- a/drivers/video/msm/mdss/mdss_dsi.c
+++ b/drivers/video/msm/mdss/mdss_dsi.c
@@ -2428,6 +2428,14 @@ static struct device_node *mdss_dsi_config_panel(struct platform_device *pdev)
 		pr_warn("%s:%d:dsi specific cfg not present\n",
 			__func__, __LINE__);
 
+	/* Parse panel config */
+	rc = mdss_panel_parse_panel_config_dt(ctrl_pdata);
+	if (rc) {
+		pr_err("%s: failed to parse panel config dt, rc = %d\n",
+								__func__, rc);
+		return NULL;
+	}
+
 	/* find panel device node */
 	dsi_pan_node = mdss_dsi_find_panel_of_node(pdev, panel_cfg);
 	if (!dsi_pan_node) {
diff --git a/drivers/video/msm/mdss/mdss_dsi.h b/drivers/video/msm/mdss/mdss_dsi.h
index ac45ef26a23..18502881ee1 100644
--- a/drivers/video/msm/mdss/mdss_dsi.h
+++ b/drivers/video/msm/mdss/mdss_dsi.h
@@ -338,6 +338,13 @@ struct dsi_kickoff_action {
 	void *data;
 };
 
+struct mdss_panel_config {
+	bool esd_enable;
+	bool bare_board;
+	char panel_name[32];
+	u64 panel_ver;
+};
+
 struct dsi_pinctrl_res {
 	struct pinctrl *pinctrl;
 	struct pinctrl_state *gpio_state_active;
@@ -379,6 +386,7 @@ struct mdss_dsi_ctrl_pdata {
 	int (*cmdlist_commit)(struct mdss_dsi_ctrl_pdata *ctrl, int from_mdp);
 	void (*switch_mode) (struct mdss_panel_data *pdata, int mode);
 	struct mdss_panel_data panel_data;
+	struct mdss_panel_config panel_config;
 	unsigned char *ctrl_base;
 	struct dss_io_data ctrl_io;
 	struct dss_io_data mmss_misc_io;
@@ -599,6 +607,7 @@ int mdss_dsi_register_recovery_handler(struct mdss_dsi_ctrl_pdata *ctrl,
 void mdss_dsi_unregister_bl_settings(struct mdss_dsi_ctrl_pdata *ctrl_pdata);
 int mdss_dsi_panel_ioctl_handler(struct mdss_panel_data *pdata,
 					u32 cmd, void *arg);
+int mdss_panel_parse_panel_config_dt(struct mdss_dsi_ctrl_pdata *ctrl_pdata);
 
 static inline const char *__mdss_dsi_pm_name(enum dsi_pm_type module)
 {
diff --git a/drivers/video/msm/mdss/mdss_dsi_panel.c b/drivers/video/msm/mdss/mdss_dsi_panel.c
index e8f8fbf45f9..dec47129659 100644
--- a/drivers/video/msm/mdss/mdss_dsi_panel.c
+++ b/drivers/video/msm/mdss/mdss_dsi_panel.c
@@ -28,6 +28,8 @@
 #include "mdss_dsi.h"
 #include "mdss_dba_utils.h"
 
+#define MDSS_PANEL_DEFAULT_VER 0xffffffffffffffff
+#define MDSS_PANEL_UNKNOWN_NAME "unknown"
 #define DT_CMD_HDR 6
 #define MIN_REFRESH_RATE 48
 #define DEFAULT_MDP_TRANSFER_TIME 14000
@@ -436,6 +438,63 @@ static int mdss_dsi_roi_merge(struct mdss_dsi_ctrl_pdata *ctrl,
 	return ans;
 }
 
+int mdss_panel_parse_panel_config_dt(struct mdss_dsi_ctrl_pdata *ctrl_pdata)
+{
+	struct device_node *np;
+	const char *pname;
+	u32 panel_ver, tmp;
+	struct mdss_panel_config *pconf = &ctrl_pdata->panel_config;
+
+	np = of_find_node_by_path("/chosen");
+	/* Disable ESD only if the prop "mmi,esd" exists and is equal to 0 */
+	if (!of_property_read_u32(np, "mmi,esd", &tmp) && tmp == 0) {
+		pconf->esd_enable = false;
+		pr_warn("%s: ESD detection is disabled by UTAGS\n", __func__);
+	} else
+		pconf->esd_enable = true;
+
+	/*
+	 * Enable bare board only if the prop "mmi,bare_board" exists and is
+	 * equal to 1.
+	 */
+	if (!of_property_read_u32(np, "mmi,bare_board", &tmp) && tmp == 1) {
+		pconf->bare_board = true;
+		pr_warn("%s: bare board is enabled by UTAGS\n", __func__);
+	} else
+		pconf->bare_board = false;
+
+	pconf->panel_ver = MDSS_PANEL_DEFAULT_VER;
+	of_property_read_u64(np, "mmi,panel_ver", &pconf->panel_ver);
+
+	pname = of_get_property(np, "mmi,panel_name", NULL);
+	if (!pname || strlen(pname) == 0) {
+		pr_warn("Failed to get mmi,panel_name\n");
+		strlcpy(pconf->panel_name, MDSS_PANEL_UNKNOWN_NAME,
+				sizeof(pconf->panel_name));
+	} else
+		strlcpy(pconf->panel_name, pname, sizeof(pconf->panel_name));
+
+	pr_debug("%s: esd_enable=%d bare_board_bl=%d panel_name=%s\n",
+		__func__,
+		pconf->esd_enable,
+		pconf->bare_board,
+		pconf->panel_name);
+
+	panel_ver = (u32)pconf->panel_ver;
+	pr_info("%s: BL: panel=%s, manufacture_id(0xDA)= 0x%02X "
+		"controller_ver(0xDB)= 0x%02X controller_drv_ver(0XDC)= 0x%02X, "
+		"full=0x%016llX\n",
+		__func__,
+		pconf->panel_name,
+		panel_ver & 0xff, (panel_ver & 0xff00) >> 8,
+		(panel_ver & 0xff0000) >> 16,
+		pconf->panel_ver);
+
+	of_node_put(np);
+
+	return 0;
+}
+
 static char caset[] = {0x2a, 0x00, 0x00, 0x03, 0x00};	/* DTYPE_DCS_LWRITE */
 static char paset[] = {0x2b, 0x00, 0x00, 0x05, 0x00};	/* DTYPE_DCS_LWRITE */
 
-- 
2.11.0

