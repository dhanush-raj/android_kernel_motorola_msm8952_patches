From 7b487d0410ad45fbf7cabd06f5f127ab368a36dd Mon Sep 17 00:00:00 2001
From: Jaegeuk Kim <jaegeuk@motorola.com>
Date: Mon, 28 Sep 2015 15:35:02 -0700
Subject: [PATCH 792/959] IKSWM-24901 - dm-crypt: GFP_KERNEL goes into deadlock

This is a deadlock condition between cryptd and FS.

1. cryptd
[  815.320878,0] [<ffffffc000204e78>] __switch_to+0x70/0x7c
[  815.326172,0] [<ffffffc000c1b698>] __schedule+0x584/0x788
[  815.331562,0] [<ffffffc000c1b900>] schedule+0x64/0x70
[  815.336596,0] [<ffffffc000c1c26c>] rwsem_down_read_failed+0xd0/0xf0
[  815.342845,0] [<ffffffc000c1a868>] down_read+0x24/0x30
[  815.347978,0] [<ffffffc000400a4c>] f2fs_evict_inode+0x154/0x2f8
[  815.353876,0] [<ffffffc00030b320>] evict+0x9c/0x154
[  815.358726,0] [<ffffffc00030b410>] dispose_list+0x38/0x4c
[  815.364109,0] [<ffffffc00030cda8>] prune_icache_sb+0x2c4/0x2f0
[  815.369929,0] [<ffffffc0002f8cec>] prune_super+0xb8/0x12c
[  815.375312,0] [<ffffffc0002c82ac>] shrink_slab+0x220/0x32c
[  815.380776,0] [<ffffffc0002ca990>] try_to_free_pages+0x398/0x53c
[  815.386765,0] [<ffffffc0002c0fb4>] __alloc_pages_nodemask+0x514/0x7f0
[  815.393190,0] [<ffffffc0002ef8c0>] new_slab+0x80/0x220
[  815.398316,0] [<ffffffc0002f0c5c>] __slab_alloc.isra.60.constprop.64+0x1f4/0x2cc
[  815.400187,1] healthd: battery l=91 v=4322 t=36.0 h=2 st=2 c=-327 chg=u
[  815.412289,0] [<ffffffc0002f0f68>] kmem_cache_alloc+0x70/0x18c
[  815.418108,0] [<ffffffc0002bb3a0>] mempool_alloc_slab+0x14/0x20
[  815.424003,0] [<ffffffc0002bb5a8>] mempool_alloc+0x64/0x154
[  815.429573,0] [<ffffffc0008c8f64>] req_cryptd_crypt+0x268/0xc00
[  815.435465,0] [<ffffffc000237894>] process_one_work+0x260/0x3c4
[  815.441366,0] [<ffffffc0002388b0>] worker_thread+0x1f8/0x348
[  815.447015,0] [<ffffffc00023dcf4>] kthread+0xac/0xb8

2. FS
[  816.118708,0] [<ffffffc000204e78>] __switch_to+0x70/0x7c
[  816.124005,0] [<ffffffc000c1b698>] __schedule+0x584/0x788
[  816.129384,0] [<ffffffc000c1b900>] schedule+0x64/0x70
[  816.134418,0] [<ffffffc000c1bb1c>] io_schedule+0x5c/0x90
[  816.139717,0] [<ffffffc000409238>] wait_on_all_pages_writeback+0x60/0x84
[  816.146399,0] [<ffffffc00040adfc>] write_checkpoint+0x5b4/0x984
[  816.152303,0] [<ffffffc000405c44>] f2fs_sync_fs+0xc0/0xf0
[  816.157682,0] [<ffffffc0003fd170>] f2fs_sync_file+0x29c/0x52c
[  816.163419,0] [<ffffffc00031d8c0>] vfs_fsync_range+0x1c/0x30
[  816.169056,0] [<ffffffc00031d8e8>] vfs_fsync+0x14/0x20
[  816.174176,0] [<ffffffc00031dcf0>] SyS_fdatasync+0x2c/0x54

Here, cryptd tries to reclaim memory from FS, but FS needs cryptd's write.
Normally, IO path should not use GFP_KERNEL, instead use GFP_NOIO.

Change-Id: I6b7425ee144c13202291632a8634a24d495394ed
Signed-off-by: Jaegeuk Kim <jaegeuk@motorola.com>
Reviewed-on: http://gerrit.mot.com/786823
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Zhi-Ming Yuan <a14194@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>

Conflicts:
	drivers/md/dm-req-crypt.c
Change-Id: Ibe396cf711343b12c5f7c36ed19b9e8421640e67
Reviewed-on: http://gerrit.mot.com/832109
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Sheng-Zhe Zhao <a18689@motorola.com>
Reviewed-by: Zhi-Ming Yuan <a14194@motorola.com>
Reviewed-by: Jiang-Li Yuan <jlyuan@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/md/dm-req-crypt.c | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/drivers/md/dm-req-crypt.c b/drivers/md/dm-req-crypt.c
index e61cc01f19c..e8e6e627869 100644
--- a/drivers/md/dm-req-crypt.c
+++ b/drivers/md/dm-req-crypt.c
@@ -321,7 +321,7 @@ static void req_cryptd_crypt_read_convert(struct req_dm_crypt_io *io)
 	mutex_unlock(&engine_list_mutex);
 
 	req_sg_read = (struct scatterlist *)mempool_alloc(req_scatterlist_pool,
-								GFP_KERNEL);
+								GFP_NOIO);
 	if (!req_sg_read) {
 		DMERR("%s req_sg_read allocation failed\n",
 						__func__);
@@ -353,7 +353,7 @@ static void req_cryptd_crypt_read_convert(struct req_dm_crypt_io *io)
 
 	if (split_transfers) {
 		split_io = kzalloc(sizeof(struct req_dm_split_req_io)
-				* engine_list_total, GFP_KERNEL);
+				* engine_list_total, GFP_NOIO);
 		if (!split_io) {
 			DMERR("%s split_io allocation failed\n", __func__);
 			error = DM_REQ_CRYPT_ERROR;
@@ -388,7 +388,7 @@ static void req_cryptd_crypt_read_convert(struct req_dm_crypt_io *io)
 		}
 	} else {
 		split_io = kzalloc(sizeof(struct req_dm_split_req_io),
-				GFP_KERNEL);
+				GFP_NOIO);
 		if (!split_io) {
 			DMERR("%s split_io allocation failed\n", __func__);
 			error = DM_REQ_CRYPT_ERROR;
@@ -500,7 +500,7 @@ static void req_cryptd_crypt_write_convert(struct req_dm_crypt_io *io)
 
 	req_crypt_inc_pending(io);
 
-	req = ablkcipher_request_alloc(tfm, GFP_KERNEL);
+	req = ablkcipher_request_alloc(tfm, GFP_NOIO);
 	if (!req) {
 		DMERR("%s ablkcipher request allocation failed\n",
 					__func__);
@@ -554,7 +554,7 @@ static void req_cryptd_crypt_write_convert(struct req_dm_crypt_io *io)
 	crypto_ablkcipher_setkey(tfm, NULL, KEY_SIZE_XTS);
 
 	req_sg_in = (struct scatterlist *)mempool_alloc(req_scatterlist_pool,
-								GFP_KERNEL);
+								GFP_NOIO);
 	if (!req_sg_in) {
 		DMERR("%s req_sg_in allocation failed\n",
 					__func__);
@@ -564,7 +564,7 @@ static void req_cryptd_crypt_write_convert(struct req_dm_crypt_io *io)
 	memset(req_sg_in, 0, sizeof(struct scatterlist) * MAX_SG_LIST);
 
 	req_sg_out = (struct scatterlist *)mempool_alloc(req_scatterlist_pool,
-								GFP_KERNEL);
+								GFP_NOIO);
 	if (!req_sg_out) {
 		DMERR("%s req_sg_out allocation failed\n",
 					__func__);
@@ -746,7 +746,7 @@ static void req_cryptd_split_req_queue_cb(struct work_struct *work)
 		/* If io is not populated this should not be called */
 		BUG();
 	}
-	req = ablkcipher_request_alloc(tfm, GFP_KERNEL);
+	req = ablkcipher_request_alloc(tfm, GFP_NOIO);
 	if (!req) {
 		DMERR("%s ablkcipher request allocation failed\n", __func__);
 		err = DM_REQ_CRYPT_ERROR;
@@ -1281,7 +1281,7 @@ static int req_crypt_ctr(struct dm_target *ti, unsigned int argc, char **argv)
 	if (encryption_mode == DM_REQ_CRYPT_ENCRYPTION_MODE_TRANSPARENT) {
 		/* configure ICE settings */
 		ice_settings =
-			kzalloc(sizeof(struct ice_crypto_setting), GFP_KERNEL);
+			kzalloc(sizeof(struct ice_crypto_setting), GFP_NOIO);
 		if (!ice_settings) {
 			err = -ENOMEM;
 			goto ctr_exit;
-- 
2.11.0

