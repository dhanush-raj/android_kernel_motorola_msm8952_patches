From dbea6947dda66a50a0c9cfeb2502810300bad8a1 Mon Sep 17 00:00:00 2001
From: mahj2 <mahj2@motorola.com>
Date: Fri, 11 Mar 2016 18:43:25 +0800
Subject: [PATCH 794/959] IKSWM-22017: rerun APSD when slow insert charger

When slow insert charger,PMI8952 will detect usb type to SDP.
Then usb will detect to DCP when D+ D- shorted and want to
draw high current.But PMI8952 can't draw high current when
it detect usb type to SDP. So unit want to draw high current
must rerun APSD.

Change-Id: I77cb44b9706cbf99ef40d3a9ddd7498c96021d3c
Signed-off-by: mahj2 <mahj2@motorola.com>
Reviewed-on: http://gerrit.mot.com/832142
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Kenneth Kessler <kennykessler@motorola.com>
Reviewed-by: Huosheng Liao <liaohs@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/power/qpnp-smbcharger-mmi.c | 41 +++++++++++++++++++++++++++++++++++++
 1 file changed, 41 insertions(+)

diff --git a/drivers/power/qpnp-smbcharger-mmi.c b/drivers/power/qpnp-smbcharger-mmi.c
index 992ddd0e1f5..f1a709a1968 100644
--- a/drivers/power/qpnp-smbcharger-mmi.c
+++ b/drivers/power/qpnp-smbcharger-mmi.c
@@ -3689,6 +3689,39 @@ static void smbchg_rate_check(struct smbchg_chip *chip)
 
 }
 
+#define IDEV_CHG_MIN 500
+static int smbchg_is_ta_charger(struct power_supply *psy, int current_limit)
+{
+	struct smbchg_chip *chip = container_of(psy,
+				struct smbchg_chip, batt_psy);
+	union power_supply_propval prop = {0,};
+	enum power_supply_type usb_supply_type;
+	char *usb_type_name = "null";
+	int rc, type;
+	u8 reg = 0;
+
+	smbchg_read(chip, &reg, chip->misc_base + IDEV_STS, 1);
+	type = get_type(reg);
+	usb_type_name = get_usb_type_name(type);
+	usb_supply_type = get_usb_supply_type(type);
+
+	rc = chip->usb_psy->get_property(chip->usb_psy,
+				POWER_SUPPLY_PROP_TYPE, &prop);
+	if (rc < 0) {
+		pr_smb(PR_MISC, "could not read USB type, rc=%d\n",
+				rc);
+		return 0;
+	}
+	pr_smb(PR_MISC, "usb_type_name =%s, type = %d, current_limit = %d\n",
+		usb_type_name, prop.intval, current_limit);
+	if ((usb_supply_type == POWER_SUPPLY_TYPE_USB)
+		&& (prop.intval == POWER_SUPPLY_TYPE_USB_DCP)
+		&& (current_limit > IDEV_CHG_MIN))
+		return 1;
+	else
+		return 0;
+}
+
 #define UNKNOWN_BATT_TYPE	"Unknown Battery"
 #define LOADING_BATT_TYPE	"Loading Battery Data"
 static void smbchg_external_power_changed(struct power_supply *psy)
@@ -3756,6 +3789,14 @@ static void smbchg_external_power_changed(struct power_supply *psy)
 		pr_smb(PR_STATUS, "changed current_limit = %d\n",
 				current_limit);
 		chip->usb_target_current_ma = current_limit;
+
+		if (smbchg_is_ta_charger(psy, current_limit)) {
+			pr_smb(PR_MISC, "Maybe is Ta charger, rerun APSD!\n");
+			smbchg_force_apsd(chip);
+			mutex_unlock(&chip->current_change_lock);
+			return;
+		}
+
 		rc = smbchg_set_thermal_limited_usb_current_max(chip,
 				current_limit);
 		if (rc < 0)
-- 
2.11.0

