From 62cc340bf6e65fe533a494a063ae22a3be0f4048 Mon Sep 17 00:00:00 2001
From: Robert Wiegand <qa2113@motorola.com>
Date: Mon, 9 Nov 2015 09:52:21 -0600
Subject: [PATCH 461/959] IKLOCSEN-2439 drivers/misc: stml0xx: Restore gyro
 rate on reset

Write the gyro data rate to the sensor hub after a hub reset.
Move algorithm and sensor activations to the end of the reset
function.
Fix spelling for stml0xx_algo_request_t and stml0xx_g_algo_request.

Change-Id: I102c93c0913def1cdf20369de9c9906633912c27
Signed-off-by: Robert Wiegand <qa2113@motorola.com>
Reviewed-on: http://gerrit.mot.com/796919
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Eric Hefner <ehefner@motorola.com>
Reviewed-by: Jason Jae Hyun Koh <jasonkoh@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/misc/stml0xx/stml0xx_core.c  |  2 +-
 drivers/misc/stml0xx/stml0xx_ioctl.c |  4 +-
 drivers/misc/stml0xx/stml0xx_reset.c | 79 ++++++++++++++++++++----------------
 include/linux/stml0xx.h              |  4 +-
 4 files changed, 48 insertions(+), 41 deletions(-)

diff --git a/drivers/misc/stml0xx/stml0xx_core.c b/drivers/misc/stml0xx/stml0xx_core.c
index d55f7720d6e..dbb9dd30b9a 100644
--- a/drivers/misc/stml0xx/stml0xx_core.c
+++ b/drivers/misc/stml0xx/stml0xx_core.c
@@ -80,7 +80,7 @@ bool stml0xx_g_booted;
 /* Store log message */
 unsigned char stat_string[LOG_MSG_SIZE + 1];
 
-struct stml0xx_algo_requst_t stml0xx_g_algo_requst[STML0XX_NUM_ALGOS];
+struct stml0xx_algo_request_t stml0xx_g_algo_request[STML0XX_NUM_ALGOS];
 
 unsigned char *stml0xx_boot_cmdbuff;
 unsigned char *stml0xx_boot_readbuff;
diff --git a/drivers/misc/stml0xx/stml0xx_ioctl.c b/drivers/misc/stml0xx/stml0xx_ioctl.c
index 8c4c518a005..a8b2adcfce2 100644
--- a/drivers/misc/stml0xx/stml0xx_ioctl.c
+++ b/drivers/misc/stml0xx/stml0xx_ioctl.c
@@ -463,8 +463,8 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			err = -EFAULT;
 			break;
 		}
-		stml0xx_g_algo_requst[algo_idx].size = len;
-		memcpy(stml0xx_g_algo_requst[algo_idx].data, buf, len);
+		stml0xx_g_algo_request[algo_idx].size = len;
+		memcpy(stml0xx_g_algo_request[algo_idx].data, buf, len);
 		if (stml0xx_g_booted)
 			err = stml0xx_spi_send_write_reg(stml0xx_algo_info
 					       [algo_idx].req_register, buf,
diff --git a/drivers/misc/stml0xx/stml0xx_reset.c b/drivers/misc/stml0xx/stml0xx_reset.c
index c2838ce2833..111e141d2e2 100644
--- a/drivers/misc/stml0xx/stml0xx_reset.c
+++ b/drivers/misc/stml0xx/stml0xx_reset.c
@@ -119,6 +119,12 @@ void stml0xx_initialize_work_func(struct work_struct *work)
 	if (err < 0)
 		ret_err = err;
 
+	buf[0] = stml0xx_g_gyro_delay;
+	err = stml0xx_spi_send_write_reg_reset(GYRO_UPDATE_RATE, buf,
+			1, RESET_NOT_ALLOWED);
+	if (err < 0)
+		ret_err = err;
+
 	stml0xx_spi_retry_delay = 10;
 
 	buf[0] = stml0xx_g_als_delay >> 8;
@@ -135,42 +141,6 @@ void stml0xx_initialize_work_func(struct work_struct *work)
 	if (err < 0)
 		ret_err = err;
 
-	buf[0] = stml0xx_g_algo_state & 0xFF;
-	buf[1] = stml0xx_g_algo_state >> 8;
-	err = stml0xx_spi_send_write_reg_reset(ALGO_CONFIG, buf, 2,
-			RESET_NOT_ALLOWED);
-	if (err < 0)
-		ret_err = err;
-
-	buf[0] = stml0xx_g_motion_dur;
-	err = stml0xx_spi_send_write_reg_reset(MOTION_DUR, buf,
-			1, RESET_NOT_ALLOWED);
-	if (err < 0)
-		ret_err = err;
-
-	buf[0] = stml0xx_g_zmotion_dur;
-	err = stml0xx_spi_send_write_reg_reset(ZMOTION_DUR, buf,
-			1, RESET_NOT_ALLOWED);
-	if (err < 0)
-		ret_err = err;
-
-	for (i = 0; i < STML0XX_NUM_ALGOS; i++) {
-		if (stml0xx_g_algo_requst[i].size > 0) {
-			memcpy(buf,
-			       stml0xx_g_algo_requst[i].data,
-			       stml0xx_g_algo_requst[i].size);
-			err =
-			    stml0xx_spi_send_write_reg_reset(
-						       stml0xx_algo_info
-						       [i].req_register, buf,
-						       stml0xx_g_algo_requst
-						       [i].size,
-						       RESET_NOT_ALLOWED);
-			if (err < 0)
-				ret_err = err;
-		}
-	}
-
 	buf[0] = (pdata->ct406_detect_threshold >> 8) & 0xff;
 	buf[1] = pdata->ct406_detect_threshold & 0xff;
 	buf[2] = (pdata->ct406_undetect_threshold >> 8) & 0xff;
@@ -279,6 +249,43 @@ void stml0xx_initialize_work_func(struct work_struct *work)
 		ret_err = err;
 	}
 #endif
+	/* Enable of algos and sensors should be the last things written */
+
+	buf[0] = stml0xx_g_motion_dur;
+	err = stml0xx_spi_send_write_reg_reset(MOTION_DUR, buf,
+			1, RESET_NOT_ALLOWED);
+	if (err < 0)
+		ret_err = err;
+
+	buf[0] = stml0xx_g_zmotion_dur;
+	err = stml0xx_spi_send_write_reg_reset(ZMOTION_DUR, buf,
+			1, RESET_NOT_ALLOWED);
+	if (err < 0)
+		ret_err = err;
+
+	buf[0] = stml0xx_g_algo_state & 0xFF;
+	buf[1] = stml0xx_g_algo_state >> 8;
+	err = stml0xx_spi_send_write_reg_reset(ALGO_CONFIG, buf, 2,
+			RESET_NOT_ALLOWED);
+	if (err < 0)
+		ret_err = err;
+
+	for (i = 0; i < STML0XX_NUM_ALGOS; i++) {
+		if (stml0xx_g_algo_request[i].size > 0) {
+			memcpy(buf,
+			       stml0xx_g_algo_request[i].data,
+			       stml0xx_g_algo_request[i].size);
+			err =
+			    stml0xx_spi_send_write_reg_reset(
+						       stml0xx_algo_info
+						       [i].req_register, buf,
+						       stml0xx_g_algo_request
+						       [i].size,
+						       RESET_NOT_ALLOWED);
+			if (err < 0)
+				ret_err = err;
+		}
+	}
 
 	/* Enable sensors last after other initialization is done */
 	buf[0] = stml0xx_g_nonwake_sensor_state & 0xFF;
diff --git a/include/linux/stml0xx.h b/include/linux/stml0xx.h
index d943a40de04..40b77ec42de 100644
--- a/include/linux/stml0xx.h
+++ b/include/linux/stml0xx.h
@@ -325,7 +325,7 @@ struct stml0xx_algo_info_t {
 };
 
 #define ALGO_RQST_DATA_SIZE 28
-struct stml0xx_algo_requst_t {
+struct stml0xx_algo_request_t {
 	char size;
 	char data[ALGO_RQST_DATA_SIZE];
 };
@@ -440,7 +440,7 @@ extern unsigned short stml0xx_spi_retry_delay;
 
 extern const struct stml0xx_algo_info_t stml0xx_algo_info[];
 
-extern struct stml0xx_algo_requst_t stml0xx_g_algo_requst[];
+extern struct stml0xx_algo_request_t stml0xx_g_algo_request[];
 
 extern long stml0xx_time_delta;
 
-- 
2.11.0

