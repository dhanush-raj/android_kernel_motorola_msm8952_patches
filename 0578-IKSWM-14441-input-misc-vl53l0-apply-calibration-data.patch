From 8e2f120afc3b421e05868f98c74e07296e9ad408 Mon Sep 17 00:00:00 2001
From: Jingnan Zhu <e3334c@motorola.com>
Date: Sun, 27 Dec 2015 19:39:12 -0600
Subject: [PATCH 578/959] IKSWM-14441: input: misc: vl53l0: apply calibration
 data

apply laser sensor calibration data when boot

Change-Id: Ia2e8582dc00ce0d9d79b202ee8aebcabbedaa2e0
Signed-off-by: Jingnan Zhu <e3334c@motorola.com>

aaa

Change-Id: I089c1c6c2f1f2baf131bf55e518199e3d8ed63ac
Reviewed-on: http://gerrit.mot.com/809616
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/input/misc/vl53L0/stmvl53l0.h        |   7 +-
 drivers/input/misc/vl53L0/stmvl53l0_module.c | 671 +++++++++++++++++++++++----
 2 files changed, 597 insertions(+), 81 deletions(-)

diff --git a/drivers/input/misc/vl53L0/stmvl53l0.h b/drivers/input/misc/vl53L0/stmvl53l0.h
index 96ae261466a..87a10283f01 100644
--- a/drivers/input/misc/vl53L0/stmvl53l0.h
+++ b/drivers/input/misc/vl53L0/stmvl53l0.h
@@ -31,7 +31,7 @@
 #define STMVL53L0_DRV_NAME	"stmvl53l0"
 #define STMVL53L0_SLAVE_ADDR	(0x52>>1)
 
-#define DRIVER_VERSION		"1.0.8"
+#define DRIVER_VERSION		"1.1.11"
 #define I2C_M_WR			0x00
 /* #define INT_POLLING_DELAY	20 */
 
@@ -136,7 +136,8 @@ struct stmvl53l0_data {
 
 	/* Range Data */
 	VL53L0_RangingMeasurementData_t rangeData;
-
+	int offset;
+	int xtalk;
 
 	/* delay time in miniseconds*/
 	unsigned int delay_ms;
@@ -153,6 +154,8 @@ struct stmvl53l0_data {
 	uint8_t bus_type;
 	uint32_t lowv;
 	uint32_t highv;
+	wait_queue_head_t range_data_wait;
+	uint8_t d_ready;
 };
 
 /*
diff --git a/drivers/input/misc/vl53L0/stmvl53l0_module.c b/drivers/input/misc/vl53L0/stmvl53l0_module.c
index 7502b1766e4..5f8f24ff340 100644
--- a/drivers/input/misc/vl53L0/stmvl53l0_module.c
+++ b/drivers/input/misc/vl53L0/stmvl53l0_module.c
@@ -49,6 +49,7 @@
 
 #define USE_INT
 #define IRQ_NUM	   59
+#define DATA_TIMEOUT  msecs_to_jiffies(150)
 /*#define DEBUG_TIME_LOG*/
 #ifdef DEBUG_TIME_LOG
 struct timeval start_tv, stop_tv;
@@ -78,68 +79,278 @@ struct stmvl53l0_module_fn_t *pmodule_func_tbl;
 
 
 struct stmvl53l0_api_fn_t {
-	VL53L0_Error(*DataInit)(VL53L0_DEV Dev);
+	VL53L0_Error(*GetVersion)(VL53L0_Version_t *pVersion);
+	VL53L0_Error(*GetPalSpecVersion)(VL53L0_Version_t *pPalSpecVersion);
+
+	VL53L0_Error(*GetProductRevision)(VL53L0_DEV Dev,
+		uint8_t *pProductRevisionMajor,
+		uint8_t *pProductRevisionMinor);
 	VL53L0_Error(*GetDeviceInfo)(VL53L0_DEV Dev,
 		VL53L0_DeviceInfo_t *pVL53L0_DeviceInfo);
+	VL53L0_Error(*GetDeviceErrorStatus)(VL53L0_DEV Dev,
+		VL53L0_DeviceError * pDeviceErrorStatus);
+	VL53L0_Error(*GetDeviceErrorString)(VL53L0_DeviceError ErrorCode,
+		char *pDeviceErrorString);
+	VL53L0_Error(*GetPalErrorString)(VL53L0_Error PalErrorCode,
+		char *pPalErrorString);
+	VL53L0_Error(*GetPalState)(VL53L0_DEV Dev, VL53L0_State * pPalState);
+	VL53L0_Error(*SetPowerMode)(VL53L0_DEV Dev,
+		VL53L0_PowerModes PowerMode);
+	VL53L0_Error(*GetPowerMode)(VL53L0_DEV Dev,
+		VL53L0_PowerModes * pPowerMode);
+	VL53L0_Error(*SetOffsetCalibrationDataMicroMeter)(VL53L0_DEV Dev,
+		int32_t OffsetCalibrationDataMicroMeter);
+	VL53L0_Error(*GetOffsetCalibrationDataMicroMeter)(VL53L0_DEV Dev,
+		int32_t *pOffsetCalibrationDataMicroMeter);
+	VL53L0_Error(*SetGroupParamHold)(VL53L0_DEV Dev,
+		uint8_t GroupParamHold);
+	VL53L0_Error(*GetUpperLimitMilliMeter)(VL53L0_DEV Dev,
+		uint16_t *pUpperLimitMilliMeter);
+	VL53L0_Error(*SetDeviceAddress)(VL53L0_DEV Dev,
+		uint8_t DeviceAddress);
+	VL53L0_Error(*DataInit)(VL53L0_DEV Dev);
+	VL53L0_Error(*SetTuningSettingBuffer)(VL53L0_DEV Dev,
+		uint8_t *pTuningSettingBuffer,
+		uint8_t UseInternalTuningSettings);
+	VL53L0_Error(*GetTuningSettingBuffer)(VL53L0_DEV Dev,
+		uint8_t *pTuningSettingBuffer,
+		uint8_t *pUseInternalTuningSettings);
 	VL53L0_Error(*StaticInit)(VL53L0_DEV Dev);
+	VL53L0_Error(*WaitDeviceBooted)(VL53L0_DEV Dev);
+	VL53L0_Error(*ResetDevice)(VL53L0_DEV Dev);
+	VL53L0_Error(*SetDeviceParameters)(VL53L0_DEV Dev,
+		const VL53L0_DeviceParameters_t *pDeviceParameters);
+	VL53L0_Error(*GetDeviceParameters)(VL53L0_DEV Dev,
+		VL53L0_DeviceParameters_t *pDeviceParameters);
 	VL53L0_Error(*SetDeviceMode)(VL53L0_DEV Dev,
 		VL53L0_DeviceModes DeviceMode);
+	VL53L0_Error(*GetDeviceMode)(VL53L0_DEV Dev,
+		VL53L0_DeviceModes * pDeviceMode);
+	VL53L0_Error(*SetHistogramMode)(VL53L0_DEV Dev,
+		VL53L0_HistogramModes HistogramMode);
+	VL53L0_Error(*GetHistogramMode)(VL53L0_DEV Dev,
+		VL53L0_HistogramModes * pHistogramMode);
+	VL53L0_Error(*SetMeasurementTimingBudgetMicroSeconds)(VL53L0_DEV Dev,
+		uint32_t  MeasurementTimingBudgetMicroSeconds);
+	VL53L0_Error(*GetMeasurementTimingBudgetMicroSeconds)(
+		VL53L0_DEV Dev,
+		uint32_t *pMeasurementTimingBudgetMicroSeconds);
+	VL53L0_Error(*GetVcselPulsePeriod)(VL53L0_DEV Dev,
+		VL53L0_VcselPeriod VcselPeriodType,
+		uint8_t	*pVCSELPulsePeriod);
+	VL53L0_Error(*SetVcselPulsePeriod)(VL53L0_DEV Dev,
+		VL53L0_VcselPeriod VcselPeriodType,
+		uint8_t VCSELPulsePeriod);
+	VL53L0_Error(*SetSequenceStepEnable)(VL53L0_DEV Dev,
+		VL53L0_SequenceStepId SequenceStepId,
+		uint8_t SequenceStepEnabled);
+	VL53L0_Error(*GetSequenceStepEnable)(VL53L0_DEV Dev,
+		VL53L0_SequenceStepId SequenceStepId,
+		uint8_t *pSequenceStepEnabled);
+	VL53L0_Error(*GetSequenceStepEnables)(VL53L0_DEV Dev,
+		VL53L0_SchedulerSequenceSteps_t *pSchedulerSequenceSteps);
+	VL53L0_Error(*SetSequenceStepTimeout)(VL53L0_DEV Dev,
+		VL53L0_SequenceStepId SequenceStepId,
+		FixPoint1616_t TimeOutMilliSecs);
+	VL53L0_Error(*GetSequenceStepTimeout)(VL53L0_DEV Dev,
+		VL53L0_SequenceStepId SequenceStepId,
+		FixPoint1616_t *pTimeOutMilliSecs);
+	VL53L0_Error(*GetNumberOfSequenceSteps)(VL53L0_DEV Dev,
+		uint8_t *pNumberOfSequenceSteps);
+	VL53L0_Error(*GetSequenceStepsInfo)(VL53L0_DEV Dev,
+		VL53L0_SequenceStepId SequenceStepId,
+		char *pSequenceStepsString);
+	VL53L0_Error(*SetInterMeasurementPeriodMilliSeconds)(
+		VL53L0_DEV Dev,
+		uint32_t InterMeasurementPeriodMilliSeconds);
+	VL53L0_Error(*GetInterMeasurementPeriodMilliSeconds)(
+		VL53L0_DEV Dev,
+		uint32_t *pInterMeasurementPeriodMilliSeconds);
+	VL53L0_Error(*SetXTalkCompensationEnable)(VL53L0_DEV Dev,
+		uint8_t XTalkCompensationEnable);
+	VL53L0_Error(*GetXTalkCompensationEnable)(VL53L0_DEV Dev,
+		uint8_t *pXTalkCompensationEnable);
+	VL53L0_Error(*SetXTalkCompensationRateMegaCps)(
+		VL53L0_DEV Dev,
+		FixPoint1616_t XTalkCompensationRateMegaCps);
+	VL53L0_Error(*GetXTalkCompensationRateMegaCps)(
+		VL53L0_DEV Dev,
+		FixPoint1616_t *pXTalkCompensationRateMegaCps);
+	VL53L0_Error(*GetNumberOfLimitCheck)(
+		uint16_t *pNumberOfLimitCheck);
+	VL53L0_Error(*GetLimitCheckInfo)(VL53L0_DEV Dev,
+		uint16_t LimitCheckId, char *pLimitCheckString);
+	VL53L0_Error(*SetLimitCheckEnable)(VL53L0_DEV Dev,
+		uint16_t LimitCheckId,
+		uint8_t LimitCheckEnable);
+	VL53L0_Error(*GetLimitCheckEnable)(VL53L0_DEV Dev,
+		uint16_t LimitCheckId, uint8_t *pLimitCheckEnable);
 	VL53L0_Error(*SetLimitCheckValue)(VL53L0_DEV Dev,
 		uint16_t LimitCheckId,
 		FixPoint1616_t LimitCheckValue);
-	VL53L0_Error(*SetLimitCheckEnable)(VL53L0_DEV Dev,
+	VL53L0_Error(*GetLimitCheckValue)(VL53L0_DEV Dev,
 		uint16_t LimitCheckId,
-		uint8_t LimitCheckEnable);
+		FixPoint1616_t *pLimitCheckValue);
+	VL53L0_Error(*GetLimitCheckCurrent)(VL53L0_DEV Dev,
+		uint16_t LimitCheckId, FixPoint1616_t *pLimitCheckCurrent);
 	VL53L0_Error(*SetWrapAroundCheckEnable)(VL53L0_DEV Dev,
 		uint8_t WrapAroundCheckEnable);
+	VL53L0_Error(*GetWrapAroundCheckEnable)(VL53L0_DEV Dev,
+		uint8_t *pWrapAroundCheckEnable);
+	VL53L0_Error(*PerformSingleMeasurement)(VL53L0_DEV Dev);
+	VL53L0_Error(*PerformRefCalibration)(VL53L0_DEV Dev);
 	VL53L0_Error(*PerformXTalkCalibration)(VL53L0_DEV Dev,
 		FixPoint1616_t XTalkCalDistance,
 		FixPoint1616_t *pXTalkCompensationRateMegaCps);
 	VL53L0_Error(*PerformOffsetCalibration)(VL53L0_DEV Dev,
 		FixPoint1616_t CalDistanceMilliMeter,
 		int32_t *pOffsetMicroMeter);
+	VL53L0_Error(*StartMeasurement)(VL53L0_DEV Dev);
+	VL53L0_Error(*StopMeasurement)(VL53L0_DEV Dev);
+	VL53L0_Error(*GetMeasurementDataReady)(VL53L0_DEV Dev,
+		uint8_t *pMeasurementDataReady);
+	VL53L0_Error(*WaitDeviceReadyForNewMeasurement)(VL53L0_DEV Dev,
+		uint32_t MaxLoop);
+	VL53L0_Error(*GetRangingMeasurementData)(VL53L0_DEV Dev,
+		VL53L0_RangingMeasurementData_t *pRangingMeasurementData);
+	VL53L0_Error(*GetHistogramMeasurementData)(VL53L0_DEV Dev,
+		VL53L0_HistogramMeasurementData_t *pHistogramMeasurementData);
+	VL53L0_Error(*PerformSingleRangingMeasurement)(VL53L0_DEV Dev,
+		VL53L0_RangingMeasurementData_t *pRangingMeasurementData);
+	VL53L0_Error(*PerformSingleHistogramMeasurement)(VL53L0_DEV Dev,
+		VL53L0_HistogramMeasurementData_t *pHistogramMeasurementData);
+	VL53L0_Error(*SetNumberOfROIZones)(VL53L0_DEV Dev,
+		uint8_t NumberOfROIZones);
+	VL53L0_Error(*GetNumberOfROIZones)(VL53L0_DEV Dev,
+		uint8_t *pNumberOfROIZones);
+	VL53L0_Error(*GetMaxNumberOfROIZones)(VL53L0_DEV Dev,
+		uint8_t *pMaxNumberOfROIZones);
 	VL53L0_Error(*SetGpioConfig)(VL53L0_DEV Dev,
 		uint8_t Pin,
 		VL53L0_DeviceModes DeviceMode,
 		VL53L0_GpioFunctionality Functionality,
 		VL53L0_InterruptPolarity Polarity);
+	VL53L0_Error(*GetGpioConfig)(VL53L0_DEV Dev,
+		uint8_t Pin,
+		VL53L0_DeviceModes * pDeviceMode,
+		VL53L0_GpioFunctionality * pFunctionality,
+		VL53L0_InterruptPolarity * pPolarity);
 	VL53L0_Error(*SetInterruptThresholds)(VL53L0_DEV Dev,
 		VL53L0_DeviceModes DeviceMode,
 		FixPoint1616_t ThresholdLow,
 		FixPoint1616_t ThresholdHigh);
+	VL53L0_Error(*GetInterruptThresholds)(VL53L0_DEV Dev,
+		VL53L0_DeviceModes DeviceMode,
+		FixPoint1616_t *pThresholdLow,
+		FixPoint1616_t *pThresholdHigh);
 	VL53L0_Error(*ClearInterruptMask)(VL53L0_DEV Dev,
 		uint32_t InterruptMask);
-	VL53L0_Error(*GetRangingMeasurementData)(VL53L0_DEV Dev,
-		VL53L0_RangingMeasurementData_t *pRangingMeasurementData);
-	VL53L0_Error(*StartMeasurement)(VL53L0_DEV Dev);
-	VL53L0_Error(*SetInterMeasurementPeriodMilliSeconds)(VL53L0_DEV Dev,
-		uint32_t InterMeasurementPeriodMilliSeconds);
-	VL53L0_Error(*PerformSingleRangingMeasurement)(VL53L0_DEV Dev,
-		VL53L0_RangingMeasurementData_t *pRangingMeasurementData);
-	VL53L0_Error(*SetXTalkCompensationEnable)(VL53L0_DEV Dev,
-		uint8_t XTalkCompensationEnable);
-	VL53L0_Error(*StopMeasurement)(VL53L0_DEV Dev);
+	VL53L0_Error(*GetInterruptMaskStatus)(VL53L0_DEV Dev,
+		uint32_t *pInterruptMaskStatus);
+	VL53L0_Error(*EnableInterruptMask)(VL53L0_DEV Dev,
+		uint32_t InterruptMask);
+	VL53L0_Error(*SetSpadAmbientDamperThreshold)(VL53L0_DEV Dev,
+		uint16_t SpadAmbientDamperThreshold);
+	VL53L0_Error(*GetSpadAmbientDamperThreshold)(VL53L0_DEV Dev,
+		uint16_t *pSpadAmbientDamperThreshold);
+	VL53L0_Error(*SetSpadAmbientDamperFactor)(VL53L0_DEV Dev,
+		uint16_t SpadAmbientDamperFactor);
+	VL53L0_Error(*GetSpadAmbientDamperFactor)(VL53L0_DEV Dev,
+		uint16_t *pSpadAmbientDamperFactor);
+	VL53L0_Error(*PerformRefSpadManagement)(VL53L0_DEV Dev);
 };
 
 static struct stmvl53l0_api_fn_t stmvl53l0_api_func_tbl = {
-	.DataInit = VL53L0_DataInit,
+	.GetVersion = VL53L0_GetVersion,
+	.GetPalSpecVersion = VL53L0_GetPalSpecVersion,
+	.GetProductRevision = VL53L0_GetProductRevision,
 	.GetDeviceInfo = VL53L0_GetDeviceInfo,
+	.GetDeviceErrorStatus = VL53L0_GetDeviceErrorStatus,
+	.GetDeviceErrorString = VL53L0_GetDeviceErrorString,
+	.GetPalErrorString = VL53L0_GetPalErrorString,
+	.GetPalState = VL53L0_GetPalState,
+	.SetPowerMode = VL53L0_SetPowerMode,
+	.GetPowerMode = VL53L0_GetPowerMode,
+	.SetOffsetCalibrationDataMicroMeter =
+	VL53L0_SetOffsetCalibrationDataMicroMeter,
+	.GetOffsetCalibrationDataMicroMeter =
+	VL53L0_GetOffsetCalibrationDataMicroMeter,
+	.SetGroupParamHold = VL53L0_SetGroupParamHold,
+	.GetUpperLimitMilliMeter = VL53L0_GetUpperLimitMilliMeter,
+	.SetDeviceAddress = VL53L0_SetDeviceAddress,
+	.DataInit = VL53L0_DataInit,
+	.SetTuningSettingBuffer = VL53L0_SetTuningSettingBuffer,
+	.GetTuningSettingBuffer = VL53L0_GetTuningSettingBuffer,
 	.StaticInit = VL53L0_StaticInit,
+	.WaitDeviceBooted = VL53L0_WaitDeviceBooted,
+	.ResetDevice = VL53L0_ResetDevice,
+	.SetDeviceParameters = VL53L0_SetDeviceParameters,
 	.SetDeviceMode = VL53L0_SetDeviceMode,
-	.SetLimitCheckValue = VL53L0_SetLimitCheckValue,
+	.GetDeviceMode = VL53L0_GetDeviceMode,
+	.SetHistogramMode = VL53L0_SetHistogramMode,
+	.GetHistogramMode = VL53L0_GetHistogramMode,
+	.SetMeasurementTimingBudgetMicroSeconds =
+	VL53L0_SetMeasurementTimingBudgetMicroSeconds,
+	.GetMeasurementTimingBudgetMicroSeconds =
+	VL53L0_GetMeasurementTimingBudgetMicroSeconds,
+	.GetVcselPulsePeriod = VL53L0_GetVcselPulsePeriod,
+	.SetVcselPulsePeriod = VL53L0_SetVcselPulsePeriod,
+	.SetSequenceStepEnable = VL53L0_SetSequenceStepEnable,
+	.GetSequenceStepEnable = VL53L0_GetSequenceStepEnable,
+	.GetSequenceStepEnables = VL53L0_GetSequenceStepEnables,
+	.SetSequenceStepTimeout = VL53L0_SetSequenceStepTimeout,
+	.GetSequenceStepTimeout = VL53L0_GetSequenceStepTimeout,
+	.GetNumberOfSequenceSteps = VL53L0_GetNumberOfSequenceSteps,
+	.GetSequenceStepsInfo = VL53L0_GetSequenceStepsInfo,
+	.SetInterMeasurementPeriodMilliSeconds =
+	VL53L0_SetInterMeasurementPeriodMilliSeconds,
+	.GetInterMeasurementPeriodMilliSeconds =
+	VL53L0_GetInterMeasurementPeriodMilliSeconds,
+	.SetXTalkCompensationEnable = VL53L0_SetXTalkCompensationEnable,
+	.GetXTalkCompensationEnable = VL53L0_GetXTalkCompensationEnable,
+	.SetXTalkCompensationRateMegaCps =
+	VL53L0_SetXTalkCompensationRateMegaCps,
+	.GetXTalkCompensationRateMegaCps =
+	VL53L0_GetXTalkCompensationRateMegaCps,
+	.GetNumberOfLimitCheck = VL53L0_GetNumberOfLimitCheck,
+	.GetLimitCheckInfo = VL53L0_GetLimitCheckInfo,
 	.SetLimitCheckEnable = VL53L0_SetLimitCheckEnable,
+	.GetLimitCheckEnable = VL53L0_GetLimitCheckEnable,
+	.SetLimitCheckValue = VL53L0_SetLimitCheckValue,
+	.GetLimitCheckValue = VL53L0_GetLimitCheckValue,
+	.GetLimitCheckCurrent = VL53L0_GetLimitCheckCurrent,
 	.SetWrapAroundCheckEnable = VL53L0_SetWrapAroundCheckEnable,
+	.GetWrapAroundCheckEnable = VL53L0_GetWrapAroundCheckEnable,
+	.PerformSingleMeasurement = VL53L0_PerformSingleMeasurement,
+	.PerformRefCalibration = VL53L0_PerformRefCalibration,
 	.PerformXTalkCalibration = VL53L0_PerformXTalkCalibration,
 	.PerformOffsetCalibration = VL53L0_PerformOffsetCalibration,
-	.SetGpioConfig = VL53L0_SetGpioConfig,
-	.SetInterruptThresholds = VL53L0_SetInterruptThresholds,
-	.ClearInterruptMask = VL53L0_ClearInterruptMask,
-	.GetRangingMeasurementData = VL53L0_GetRangingMeasurementData,
 	.StartMeasurement = VL53L0_StartMeasurement,
-	.SetInterMeasurementPeriodMilliSeconds =
-	VL53L0_SetInterMeasurementPeriodMilliSeconds,
+	.StopMeasurement = VL53L0_StopMeasurement,
+	.GetMeasurementDataReady = VL53L0_GetMeasurementDataReady,
+	.WaitDeviceReadyForNewMeasurement =
+	VL53L0_WaitDeviceReadyForNewMeasurement,
+	.GetRangingMeasurementData = VL53L0_GetRangingMeasurementData,
+	.GetHistogramMeasurementData = VL53L0_GetHistogramMeasurementData,
 	.PerformSingleRangingMeasurement =
 	VL53L0_PerformSingleRangingMeasurement,
+	.PerformSingleHistogramMeasurement =
+	VL53L0_PerformSingleHistogramMeasurement,
+	.SetNumberOfROIZones = VL53L0_SetNumberOfROIZones,
+	.GetNumberOfROIZones = VL53L0_GetNumberOfROIZones,
+	.GetMaxNumberOfROIZones = VL53L0_GetMaxNumberOfROIZones,
+	.SetGpioConfig = VL53L0_SetGpioConfig,
+	.GetGpioConfig = VL53L0_GetGpioConfig,
+	.SetInterruptThresholds = VL53L0_SetInterruptThresholds,
+	.GetInterruptThresholds = VL53L0_GetInterruptThresholds,
+	.ClearInterruptMask = VL53L0_ClearInterruptMask,
+	.GetInterruptMaskStatus = VL53L0_GetInterruptMaskStatus,
+	.EnableInterruptMask = VL53L0_EnableInterruptMask,
+	.SetSpadAmbientDamperThreshold = VL53L0_SetSpadAmbientDamperThreshold,
+	.GetSpadAmbientDamperThreshold = VL53L0_GetSpadAmbientDamperThreshold,
+	.SetSpadAmbientDamperFactor = VL53L0_SetSpadAmbientDamperFactor,
+	.GetSpadAmbientDamperFactor = VL53L0_GetSpadAmbientDamperFactor,
+	.PerformRefSpadManagement = VL53L0_PerformRefSpadManagement,
 };
 struct stmvl53l0_api_fn_t *papi_func_tbl;
 
@@ -156,66 +367,257 @@ static void stmvl53l0_setupAPIFunctions(struct stmvl53l0_data *data)
 	if (revision == 1) {
 		/*cut 1.1*/
 		vl53l0_errmsg("to setup API cut 1.1\n");
-		papi_func_tbl->DataInit = VL53L0_DataInit;
+		papi_func_tbl->GetVersion = VL53L0_GetVersion;
+		papi_func_tbl->GetPalSpecVersion = VL53L0_GetPalSpecVersion;
+		papi_func_tbl->GetProductRevision = VL53L0_GetProductRevision;
 		papi_func_tbl->GetDeviceInfo = VL53L0_GetDeviceInfo;
+		papi_func_tbl->GetDeviceErrorStatus =
+			VL53L0_GetDeviceErrorStatus;
+		papi_func_tbl->GetDeviceErrorString =
+			VL53L0_GetDeviceErrorString;
+		papi_func_tbl->GetPalErrorString = VL53L0_GetPalErrorString;
+		papi_func_tbl->GetPalState = VL53L0_GetPalState;
+		papi_func_tbl->SetPowerMode = VL53L0_SetPowerMode;
+		papi_func_tbl->GetPowerMode = VL53L0_GetPowerMode;
+		papi_func_tbl->SetOffsetCalibrationDataMicroMeter =
+			VL53L0_SetOffsetCalibrationDataMicroMeter;
+		papi_func_tbl->GetOffsetCalibrationDataMicroMeter =
+			VL53L0_GetOffsetCalibrationDataMicroMeter;
+		papi_func_tbl->SetGroupParamHold = VL53L0_SetGroupParamHold;
+		papi_func_tbl->GetUpperLimitMilliMeter =
+			VL53L0_GetUpperLimitMilliMeter;
+		papi_func_tbl->SetDeviceAddress = VL53L0_SetDeviceAddress;
+		papi_func_tbl->DataInit = VL53L0_DataInit;
+		papi_func_tbl->SetTuningSettingBuffer =
+			VL53L0_SetTuningSettingBuffer;
+		papi_func_tbl->GetTuningSettingBuffer =
+			VL53L0_GetTuningSettingBuffer;
 		papi_func_tbl->StaticInit = VL53L0_StaticInit;
+		papi_func_tbl->WaitDeviceBooted = VL53L0_WaitDeviceBooted;
+		papi_func_tbl->ResetDevice = VL53L0_ResetDevice;
+		papi_func_tbl->SetDeviceParameters = VL53L0_SetDeviceParameters;
 		papi_func_tbl->SetDeviceMode = VL53L0_SetDeviceMode;
+		papi_func_tbl->GetDeviceMode = VL53L0_GetDeviceMode;
+		papi_func_tbl->SetHistogramMode = VL53L0_SetHistogramMode;
+		papi_func_tbl->GetHistogramMode = VL53L0_GetHistogramMode;
+		papi_func_tbl->SetMeasurementTimingBudgetMicroSeconds =
+			VL53L0_SetMeasurementTimingBudgetMicroSeconds;
+		papi_func_tbl->GetMeasurementTimingBudgetMicroSeconds =
+			VL53L0_GetMeasurementTimingBudgetMicroSeconds;
+		papi_func_tbl->GetVcselPulsePeriod = VL53L0_GetVcselPulsePeriod;
+		papi_func_tbl->SetVcselPulsePeriod = VL53L0_SetVcselPulsePeriod;
+		papi_func_tbl->SetSequenceStepEnable =
+			VL53L0_SetSequenceStepEnable;
+		papi_func_tbl->GetSequenceStepEnable =
+			VL53L0_GetSequenceStepEnable;
+		papi_func_tbl->GetSequenceStepEnables =
+			VL53L0_GetSequenceStepEnables;
+		papi_func_tbl->SetSequenceStepTimeout =
+			VL53L0_SetSequenceStepTimeout;
+		papi_func_tbl->GetSequenceStepTimeout =
+			VL53L0_GetSequenceStepTimeout;
+		papi_func_tbl->GetNumberOfSequenceSteps =
+			VL53L0_GetNumberOfSequenceSteps;
+		papi_func_tbl->GetSequenceStepsInfo =
+			VL53L0_GetSequenceStepsInfo;
+		papi_func_tbl->SetInterMeasurementPeriodMilliSeconds =
+			VL53L0_SetInterMeasurementPeriodMilliSeconds;
+		papi_func_tbl->GetInterMeasurementPeriodMilliSeconds =
+			VL53L0_GetInterMeasurementPeriodMilliSeconds;
+		papi_func_tbl->SetXTalkCompensationEnable =
+			VL53L0_SetXTalkCompensationEnable;
+		papi_func_tbl->GetXTalkCompensationEnable =
+			VL53L0_GetXTalkCompensationEnable;
+		papi_func_tbl->SetXTalkCompensationRateMegaCps =
+			VL53L0_SetXTalkCompensationRateMegaCps;
+		papi_func_tbl->GetXTalkCompensationRateMegaCps =
+			VL53L0_GetXTalkCompensationRateMegaCps;
+		papi_func_tbl->GetNumberOfLimitCheck =
+			VL53L0_GetNumberOfLimitCheck;
+		papi_func_tbl->GetLimitCheckInfo = VL53L0_GetLimitCheckInfo;
+		papi_func_tbl->SetLimitCheckEnable = VL53L0_SetLimitCheckEnable;
+		papi_func_tbl->GetLimitCheckEnable = VL53L0_GetLimitCheckEnable;
 		papi_func_tbl->SetLimitCheckValue = VL53L0_SetLimitCheckValue;
-		papi_func_tbl->SetLimitCheckEnable =
-			VL53L0_SetLimitCheckEnable;
+		papi_func_tbl->GetLimitCheckValue = VL53L0_GetLimitCheckValue;
+		papi_func_tbl->GetLimitCheckCurrent =
+			VL53L0_GetLimitCheckCurrent;
 		papi_func_tbl->SetWrapAroundCheckEnable =
 			VL53L0_SetWrapAroundCheckEnable;
+		papi_func_tbl->GetWrapAroundCheckEnable =
+			VL53L0_GetWrapAroundCheckEnable;
+		papi_func_tbl->PerformSingleMeasurement =
+			VL53L0_PerformSingleMeasurement;
+		papi_func_tbl->PerformRefCalibration =
+			VL53L0_PerformRefCalibration;
 		papi_func_tbl->PerformXTalkCalibration =
 			VL53L0_PerformXTalkCalibration;
 		papi_func_tbl->PerformOffsetCalibration =
 			VL53L0_PerformOffsetCalibration;
-		papi_func_tbl->SetGpioConfig = VL53L0_SetGpioConfig;
-		papi_func_tbl->SetInterruptThresholds =
-			VL53L0_SetInterruptThresholds;
-		papi_func_tbl->ClearInterruptMask =
-			VL53L0_ClearInterruptMask;
+		papi_func_tbl->StartMeasurement = VL53L0_StartMeasurement;
+		papi_func_tbl->StopMeasurement = VL53L0_StopMeasurement;
+		papi_func_tbl->GetMeasurementDataReady =
+			VL53L0_GetMeasurementDataReady;
+		papi_func_tbl->WaitDeviceReadyForNewMeasurement =
+			VL53L0_WaitDeviceReadyForNewMeasurement;
 		papi_func_tbl->GetRangingMeasurementData =
 			VL53L0_GetRangingMeasurementData;
-		papi_func_tbl->StartMeasurement = VL53L0_StartMeasurement;
-		papi_func_tbl->SetInterMeasurementPeriodMilliSeconds =
-			VL53L0_SetInterMeasurementPeriodMilliSeconds;
+		papi_func_tbl->GetHistogramMeasurementData =
+			VL53L0_GetHistogramMeasurementData;
 		papi_func_tbl->PerformSingleRangingMeasurement =
 			VL53L0_PerformSingleRangingMeasurement;
-		papi_func_tbl->SetXTalkCompensationEnable =
-			VL53L0_SetXTalkCompensationEnable;
-		papi_func_tbl->StopMeasurement = VL53L0_StopMeasurement;
+		papi_func_tbl->PerformSingleHistogramMeasurement =
+			VL53L0_PerformSingleHistogramMeasurement;
+		papi_func_tbl->SetNumberOfROIZones = VL53L0_SetNumberOfROIZones;
+		papi_func_tbl->GetNumberOfROIZones = VL53L0_GetNumberOfROIZones;
+		papi_func_tbl->GetMaxNumberOfROIZones =
+			VL53L0_GetMaxNumberOfROIZones;
+		papi_func_tbl->SetGpioConfig = VL53L0_SetGpioConfig;
+		papi_func_tbl->GetGpioConfig = VL53L0_GetGpioConfig;
+		papi_func_tbl->SetInterruptThresholds =
+			VL53L0_SetInterruptThresholds;
+		papi_func_tbl->GetInterruptThresholds =
+			VL53L0_GetInterruptThresholds;
+		papi_func_tbl->ClearInterruptMask = VL53L0_ClearInterruptMask;
+		papi_func_tbl->GetInterruptMaskStatus =
+			VL53L0_GetInterruptMaskStatus;
+		papi_func_tbl->EnableInterruptMask =
+			VL53L0_EnableInterruptMask;
+		papi_func_tbl->SetSpadAmbientDamperThreshold =
+			VL53L0_SetSpadAmbientDamperThreshold;
+		papi_func_tbl->GetSpadAmbientDamperThreshold =
+			VL53L0_GetSpadAmbientDamperThreshold;
+		papi_func_tbl->SetSpadAmbientDamperFactor =
+			VL53L0_SetSpadAmbientDamperFactor;
+		papi_func_tbl->GetSpadAmbientDamperFactor =
+			VL53L0_GetSpadAmbientDamperFactor;
+		papi_func_tbl->PerformRefSpadManagement =
+			VL53L0_PerformRefSpadManagement;
 
 	} else if (revision == 0) {
 		/*cut 1.0*/
-		vl53l0_errmsg("to setup API cut 1.0\n");
-		papi_func_tbl->DataInit = VL53L010_DataInit;
+		papi_func_tbl->GetVersion = VL53L010_GetVersion;
+		papi_func_tbl->GetPalSpecVersion = VL53L010_GetPalSpecVersion;
 		papi_func_tbl->GetDeviceInfo = VL53L010_GetDeviceInfo;
+		papi_func_tbl->GetDeviceErrorStatus =
+			VL53L010_GetDeviceErrorStatus;
+		papi_func_tbl->GetDeviceErrorString =
+			VL53L010_GetDeviceErrorString;
+		papi_func_tbl->GetPalErrorString = VL53L010_GetPalErrorString;
+		papi_func_tbl->GetPalState = VL53L010_GetPalState;
+		papi_func_tbl->SetPowerMode = VL53L010_SetPowerMode;
+		papi_func_tbl->GetPowerMode = VL53L010_GetPowerMode;
+		papi_func_tbl->SetOffsetCalibrationDataMicroMeter =
+			VL53L010_SetOffsetCalibrationDataMicroMeter;
+		papi_func_tbl->GetOffsetCalibrationDataMicroMeter =
+			VL53L010_GetOffsetCalibrationDataMicroMeter;
+		papi_func_tbl->SetGroupParamHold = VL53L010_SetGroupParamHold;
+		papi_func_tbl->GetUpperLimitMilliMeter =
+			VL53L010_GetUpperLimitMilliMeter;
+		papi_func_tbl->SetDeviceAddress = VL53L010_SetDeviceAddress;
+		papi_func_tbl->DataInit = VL53L010_DataInit;
+		/*
+		papi_func_tbl->SetTuningSettingBuffer = NULL;
+		papi_func_tbl->GetTuningSettingBuffer = NULL;
+		*/
 		papi_func_tbl->StaticInit = VL53L010_StaticInit;
+		papi_func_tbl->WaitDeviceBooted = VL53L010_WaitDeviceBooted;
+		papi_func_tbl->ResetDevice = VL53L010_ResetDevice;
+		papi_func_tbl->SetDeviceParameters =
+			VL53L010_SetDeviceParameters;
 		papi_func_tbl->SetDeviceMode = VL53L010_SetDeviceMode;
-		papi_func_tbl->SetLimitCheckValue =
-			VL53L010_SetLimitCheckValue;
+		papi_func_tbl->GetDeviceMode = VL53L010_GetDeviceMode;
+		papi_func_tbl->SetHistogramMode = VL53L010_SetHistogramMode;
+		papi_func_tbl->GetHistogramMode = VL53L010_GetHistogramMode;
+		papi_func_tbl->SetMeasurementTimingBudgetMicroSeconds =
+			VL53L010_SetMeasurementTimingBudgetMicroSeconds;
+		papi_func_tbl->GetMeasurementTimingBudgetMicroSeconds =
+			VL53L010_GetMeasurementTimingBudgetMicroSeconds;
+		/*
+		papi_func_tbl->GetVcselPulsePeriod = NULL;
+		papi_func_tbl->SetVcselPulsePeriod = NULL;
+		papi_func_tbl->SetSequenceStepEnable = NULL;
+		papi_func_tbl->GetSequenceStepEnable = NULL;
+		papi_func_tbl->GetSequenceStepEnables = NULL;
+		papi_func_tbl->SetSequenceStepTimeout = NULL;
+		papi_func_tbl->GetSequenceStepTimeout = NULL;
+		papi_func_tbl->GetNumberOfSequenceSteps =NULL;
+		papi_func_tbl->GetSequenceStepsInfo = NULL;
+		*/
+		papi_func_tbl->SetInterMeasurementPeriodMilliSeconds =
+			VL53L010_SetInterMeasurementPeriodMilliSeconds;
+		papi_func_tbl->GetInterMeasurementPeriodMilliSeconds =
+			VL53L010_GetInterMeasurementPeriodMilliSeconds;
+		papi_func_tbl->SetXTalkCompensationEnable =
+			VL53L010_SetXTalkCompensationEnable;
+		papi_func_tbl->GetXTalkCompensationEnable =
+			VL53L010_GetXTalkCompensationEnable;
+		papi_func_tbl->SetXTalkCompensationRateMegaCps =
+			VL53L010_SetXTalkCompensationRateMegaCps;
+		papi_func_tbl->GetXTalkCompensationRateMegaCps =
+			VL53L010_GetXTalkCompensationRateMegaCps;
+		papi_func_tbl->GetNumberOfLimitCheck =
+			VL53L010_GetNumberOfLimitCheck;
+		papi_func_tbl->GetLimitCheckInfo = VL53L010_GetLimitCheckInfo;
 		papi_func_tbl->SetLimitCheckEnable =
 			VL53L010_SetLimitCheckEnable;
+		papi_func_tbl->GetLimitCheckEnable =
+			VL53L010_GetLimitCheckEnable;
+		papi_func_tbl->SetLimitCheckValue = VL53L010_SetLimitCheckValue;
+		papi_func_tbl->GetLimitCheckValue = VL53L010_GetLimitCheckValue;
+		papi_func_tbl->GetLimitCheckCurrent =
+			VL53L010_GetLimitCheckCurrent;
 		papi_func_tbl->SetWrapAroundCheckEnable =
 			VL53L010_SetWrapAroundCheckEnable;
+		papi_func_tbl->GetWrapAroundCheckEnable =
+			VL53L010_GetWrapAroundCheckEnable;
+		papi_func_tbl->PerformSingleMeasurement =
+			VL53L010_PerformSingleMeasurement;
+		papi_func_tbl->PerformRefCalibration =
+			VL53L010_PerformRefCalibration;
 		papi_func_tbl->PerformXTalkCalibration =
 			VL53L010_PerformXTalkCalibration;
 		papi_func_tbl->PerformOffsetCalibration =
 			VL53L010_PerformOffsetCalibration;
-		papi_func_tbl->SetGpioConfig = VL53L010_SetGpioConfig;
-		papi_func_tbl->SetInterruptThresholds =
-			VL53L010_SetInterruptThresholds;
-		papi_func_tbl->ClearInterruptMask = VL53L010_ClearInterruptMask;
+		papi_func_tbl->StartMeasurement = VL53L010_StartMeasurement;
+		papi_func_tbl->StopMeasurement = VL53L010_StopMeasurement;
+		papi_func_tbl->GetMeasurementDataReady =
+			VL53L010_GetMeasurementDataReady;
+		papi_func_tbl->WaitDeviceReadyForNewMeasurement =
+			VL53L010_WaitDeviceReadyForNewMeasurement;
 		papi_func_tbl->GetRangingMeasurementData =
 			VL53L010_GetRangingMeasurementData;
-		papi_func_tbl->StartMeasurement = VL53L010_StartMeasurement;
-		papi_func_tbl->SetInterMeasurementPeriodMilliSeconds =
-			VL53L010_SetInterMeasurementPeriodMilliSeconds;
+		papi_func_tbl->GetHistogramMeasurementData =
+			VL53L010_GetHistogramMeasurementData;
 		papi_func_tbl->PerformSingleRangingMeasurement =
 			VL53L010_PerformSingleRangingMeasurement;
-		papi_func_tbl->SetXTalkCompensationEnable =
-			VL53L010_SetXTalkCompensationEnable;
-		papi_func_tbl->StopMeasurement = VL53L010_StopMeasurement;
+		papi_func_tbl->PerformSingleHistogramMeasurement =
+			VL53L010_PerformSingleHistogramMeasurement;
+		papi_func_tbl->SetNumberOfROIZones =
+			VL53L010_SetNumberOfROIZones;
+		papi_func_tbl->GetNumberOfROIZones =
+			VL53L010_GetNumberOfROIZones;
+		papi_func_tbl->GetMaxNumberOfROIZones =
+			VL53L010_GetMaxNumberOfROIZones;
+		papi_func_tbl->SetGpioConfig = VL53L010_SetGpioConfig;
+		papi_func_tbl->GetGpioConfig = VL53L010_GetGpioConfig;
+		papi_func_tbl->SetInterruptThresholds =
+			VL53L010_SetInterruptThresholds;
+		papi_func_tbl->GetInterruptThresholds =
+			VL53L010_GetInterruptThresholds;
+		papi_func_tbl->ClearInterruptMask =
+			VL53L010_ClearInterruptMask;
+		papi_func_tbl->GetInterruptMaskStatus =
+			VL53L010_GetInterruptMaskStatus;
+		papi_func_tbl->EnableInterruptMask =
+			VL53L010_EnableInterruptMask;
+		papi_func_tbl->SetSpadAmbientDamperThreshold =
+			VL53L010_SetSpadAmbientDamperThreshold;
+		papi_func_tbl->GetSpadAmbientDamperThreshold =
+			VL53L010_GetSpadAmbientDamperThreshold;
+		papi_func_tbl->SetSpadAmbientDamperFactor =
+			VL53L010_SetSpadAmbientDamperFactor;
+		papi_func_tbl->GetSpadAmbientDamperFactor =
+			VL53L010_GetSpadAmbientDamperFactor;
 	}
 
 }
@@ -235,7 +637,8 @@ static void stmvl53l0_setupAPIFunctions(struct stmvl53l0_data *data)
 			_IOWR('p', 0x0c, struct stmvl53l0_register)
 #define VL53L0_IOCTL_PARAMETER \
 			_IOWR('p', 0x0d, struct stmvl53l0_parameter)
-
+#define VL53L0_IOCTL_GETDATAS_BLOCK \
+			_IOR('p', 0x0e, VL53L0_RangingMeasurementData_t)
 
 static long stmvl53l0_ioctl(struct file *file,
 							unsigned int cmd,
@@ -267,8 +670,10 @@ static void stmvl53l0_ps_read_measurement(struct stmvl53l0_data *data)
 	struct timeval tv;
 
 	do_gettimeofday(&tv);
+	data->ps_data = 100;
+	if (data->rangeData.RangeMilliMeter < data->lowv)
+		data->ps_data = 10;
 
-	data->ps_data = data->rangeData.RangeMilliMeter;
 	input_report_abs(data->input_dev_ps, ABS_DISTANCE,
 		(int)(data->ps_data + 5) / 10);
 	input_report_abs(data->input_dev_ps, ABS_HAT0X, tv.tv_sec);
@@ -333,12 +738,21 @@ static void stmvl53l0_enter_cam(struct stmvl53l0_data *data, uint8_t from)
 }
 static void stmvl53l0_enter_sar(struct stmvl53l0_data *data, uint8_t from)
 {
+	VL53L0_RangingMeasurementData_t    RMData;
 	mutex_lock(&data->work_mutex);
 	vl53l0_dbgmsg("Enter,  from:%d\n", from);
 	/* turn on tof sensor */
 	if (data->enable_ps_sensor == 0)
 		stmvl53l0_start(data);
 
+	papi_func_tbl->SetDeviceMode(data,
+		VL53L0_DEVICEMODE_SINGLE_RANGING);
+
+	papi_func_tbl->PerformSingleRangingMeasurement(data,
+		&RMData);
+	memcpy(&(data->rangeData), &RMData,
+		sizeof(VL53L0_RangingMeasurementData_t));
+	stmvl53l0_ps_read_measurement(data);
 	papi_func_tbl->SetInterMeasurementPeriodMilliSeconds
 		(data, data->delay_ms);
 
@@ -383,10 +797,10 @@ static void stmvl53l0_enter_xtalkcal(struct stmvl53l0_data *data,
 	if (data->enable_ps_sensor == 0)
 		stmvl53l0_start(data);
 
-	VL53L0_SetXTalkCompensationEnable(data, 0);
+	papi_func_tbl->SetXTalkCompensationEnable(data, 0);
 
-	VL53L0_PerformXTalkCalibration(data,
-		(100 << 16), &XTalkCompensationRateMegaCps);
+	papi_func_tbl->PerformXTalkCalibration(data,
+		(400 << 16), &XTalkCompensationRateMegaCps);
 	vl53l0_dbgmsg("End\n");
 	mutex_unlock(&data->work_mutex);
 }
@@ -398,8 +812,14 @@ static void stmvl53l0_enter_offsetcal(struct stmvl53l0_data *data,
 	if (data->enable_ps_sensor == 0)
 		stmvl53l0_start(data);
 
-	VL53L0_SetXTalkCompensationEnable(data, 0);
-	VL53L0_SetOffsetCalibrationDataMicroMeter(data, 0);
+	papi_func_tbl->SetXTalkCompensationEnable(data, 0);
+	papi_func_tbl->SetOffsetCalibrationDataMicroMeter(data, 0);
+	papi_func_tbl->SetGpioConfig(data, 0, 0,
+		VL53L0_GPIOFUNCTIONALITY_NEW_MEASURE_READY,
+		VL53L0_INTERRUPTPOLARITY_LOW);
+	papi_func_tbl->SetDeviceMode(data,
+		VL53L0_DEVICEMODE_CONTINUOUS_RANGING);
+	papi_func_tbl->StartMeasurement(data);
 	vl53l0_dbgmsg("End\n");
 	mutex_unlock(&data->work_mutex);
 }
@@ -538,19 +958,33 @@ struct stmvl53l0_data *data = gp_vl53l0_data;
 VL53L0_DEV vl53l0_dev = data;
 char *envplow[2] = { "SAR LOW=1", NULL };
 char *envphigh[2] = { "SAR HIGH=1", NULL };
+struct timeval tv;
 
+do_gettimeofday(&tv);
 papi_func_tbl->GetRangingMeasurementData(vl53l0_dev, &RMData);
 
 vl53l0_dbgmsg("which MODE =%d\n", data->w_mode);
-VL53L0_ClearInterruptMask(vl53l0_dev, 0);
+papi_func_tbl->ClearInterruptMask(vl53l0_dev, 0);
 memcpy(&(data->rangeData), &RMData,
 	sizeof(VL53L0_RangingMeasurementData_t));
+data->d_ready = 1;
+
+data->rangeData.TimeStamp = tv.tv_sec;
+data->rangeData.MeasurementTimeUsec = tv.tv_usec;
+wake_up(&data->range_data_wait);
 	if (CAM_MODE == data->w_mode) {
 		vl53l0_dbgmsg("CAM_MODE\n");
+		papi_func_tbl->SetMeasurementTimingBudgetMicroSeconds(
+			data, 120000);
+
 		if (data->enableDebug)
-			pr_err("range:%d, signalRateRtnMegaCps:%d",
-			RMData.RangeMilliMeter,
-			RMData.SignalRateRtnMegaCps);
+			vl53l0_errmsg("range:%d, signalRateRtnMegaCps:%d, \
+				error:0x%x,rtnambrate:%u,measuretime:%u\n",
+				data->rangeData.RangeMilliMeter,
+				data->rangeData.SignalRateRtnMegaCps,
+				data->rangeData.RangeStatus,
+				data->rangeData.AmbientRateRtnMegaCps,
+				data->rangeData.MeasurementTimeUsec);
 	} else if (SAR_MODE == data->w_mode) {
 		vl53l0_dbgmsg("SAR_MODE\n");
 		if (RMData.RangeMilliMeter < data->lowv) {
@@ -561,8 +995,8 @@ memcpy(&(data->rangeData), &RMData,
 			VL53L0_INTERRUPTPOLARITY_LOW);
 			papi_func_tbl->SetInterMeasurementPeriodMilliSeconds(
 				data, data->delay_ms);
-			VL53L0_SetMeasurementTimingBudgetMicroSeconds(
-				data, 120);
+			papi_func_tbl->SetMeasurementTimingBudgetMicroSeconds(
+				data, 120000);
 			papi_func_tbl->SetInterruptThresholds(
 			data, 0, data->lowv << 16, data->highv << 16);
 			papi_func_tbl->SetDeviceMode(data,
@@ -580,8 +1014,8 @@ memcpy(&(data->rangeData), &RMData,
 			VL53L0_INTERRUPTPOLARITY_LOW);
 			papi_func_tbl->SetInterMeasurementPeriodMilliSeconds(
 				data, data->delay_ms);
-			VL53L0_SetMeasurementTimingBudgetMicroSeconds(
-				data, 33);
+			papi_func_tbl->SetMeasurementTimingBudgetMicroSeconds(
+				data, 33000);
 			papi_func_tbl->SetInterruptThresholds(
 				data, 0, data->lowv << 16, data->highv << 16);
 			papi_func_tbl->SetDeviceMode(data,
@@ -621,7 +1055,8 @@ static void stmvl53l0_work_handler(struct work_struct *work)
 	mutex_lock(&data->work_mutex);
 
 	if (data->enable_ps_sensor == 1) {
-		VL53L0_GetInterruptMaskStatus(vl53l0_dev, &InterruptMask);
+		papi_func_tbl->GetInterruptMaskStatus(
+			vl53l0_dev, &InterruptMask);
 
 		vl53l0_dbgmsg(" InterruptMasksssss :%d\n", InterruptMask);
 		if (InterruptMask > 0 && data->interrupt_received == 1) {
@@ -725,7 +1160,8 @@ struct device_attribute *attr, const char *buf, size_t count)
 			VL53L0_INTERRUPTPOLARITY_LOW);
 		Status = papi_func_tbl->SetDeviceMode(data,
 			VL53L0_DEVICEMODE_SINGLE_RANGING);
-		VL53L0_SetMeasurementTimingBudgetMicroSeconds(data, 50);
+		papi_func_tbl->SetMeasurementTimingBudgetMicroSeconds(
+			data, 50000);
 		Status = papi_func_tbl->PerformSingleRangingMeasurement(data,
 			&RMData);
 		stmvl53l0_ps_read_measurement(data);
@@ -816,9 +1252,8 @@ struct device_attribute *attr, const char *buf, size_t count)
 static DEVICE_ATTR(enable_sar, S_IWUSR | S_IRUGO,
 	stmvl53l0_show_enable_sar, stmvl53l0_store_enable_sar);
 
-
 static ssize_t stmvl53l0_show_enable_debug(struct device *dev,
-				struct device_attribute *attr, char *buf)
+	struct device_attribute *attr, char *buf)
 {
 	struct stmvl53l0_data *data = gp_vl53l0_data;
 
@@ -827,14 +1262,14 @@ static ssize_t stmvl53l0_show_enable_debug(struct device *dev,
 
 /* for debug */
 static ssize_t stmvl53l0_store_enable_debug(struct device *dev,
-		struct device_attribute *attr, const char *buf, size_t count)
+struct device_attribute *attr, const char *buf, size_t count)
 {
 	struct stmvl53l0_data *data = gp_vl53l0_data;
 	long on;
 
 	if (kstrtoul(buf, 10, &on))
 		return count;
-	if ((on != 0) &&  (on != 1)) {
+	if ((on != 0) && (on != 1)) {
 		vl53l0_errmsg("%d,set debug=%ld\n", __LINE__, on);
 		return count;
 	}
@@ -847,8 +1282,65 @@ static ssize_t stmvl53l0_store_enable_debug(struct device *dev,
 static DEVICE_ATTR(enable_debug, S_IWUSR | S_IRUGO,
 	stmvl53l0_show_enable_debug, stmvl53l0_store_enable_debug);
 
+static ssize_t stmvl53l0_show_offset(struct device *dev,
+	struct device_attribute *attr, char *buf)
+{
+	struct stmvl53l0_data *data = gp_vl53l0_data;
+
+	return snprintf(buf, 5, "%d\n", data->offset);
+}
+
+static ssize_t stmvl53l0_store_offset(struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct stmvl53l0_data *data = gp_vl53l0_data;
+	long on;
+
+	if (buf[0] == '-') {
+		if (kstrtoul(&buf[1], 10, &on))
+			return count;
+		on = 0 - on;
+	} else {
+		if (kstrtoul(buf, 10, &on))
+			return count;
+	}
+	vl53l0_errmsg("%d,set offset=%ld\n", __LINE__, on);
+	data->offset = on * 1000;
+
+	return count;
+}
+
+/* DEVICE_ATTR(name,mode,show,store) */
+static DEVICE_ATTR(offset, S_IWUSR | S_IRUGO,
+	stmvl53l0_show_offset, stmvl53l0_store_offset);
+
+static ssize_t stmvl53l0_show_xtalk(struct device *dev,
+	struct device_attribute *attr, char *buf)
+{
+	struct stmvl53l0_data *data = gp_vl53l0_data;
+
+	return snprintf(buf, 5, "%d\n", data->xtalk);
+}
+
+static ssize_t stmvl53l0_store_xtalk(struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct stmvl53l0_data *data = gp_vl53l0_data;
+	long on;
+
+	if (kstrtoul(buf, 10, &on))
+		return count;
+	data->xtalk = on;
+	vl53l0_errmsg("%d,set xtalk=%ld\n", __LINE__, on);
+	return count;
+}
+
+/* DEVICE_ATTR(name,mode,show,store) */
+static DEVICE_ATTR(xtalk, S_IWUSR | S_IRUGO,
+	stmvl53l0_show_xtalk, stmvl53l0_store_xtalk);
+
 static ssize_t stmvl53l0_show_set_delay_ms(struct device *dev,
-				struct device_attribute *attr, char *buf)
+	struct device_attribute *attr, char *buf)
 {
 	struct stmvl53l0_data *data = gp_vl53l0_data;
 
@@ -903,10 +1395,12 @@ static DEVICE_ATTR(near, S_IRUGO,
 static struct attribute *stmvl53l0_attributes[] = {
 	&dev_attr_enable_ps_sensor.attr,
 	&dev_attr_enable_debug.attr,
-	&dev_attr_set_delay_ms.attr ,
+	&dev_attr_set_delay_ms.attr,
 	&dev_attr_set_mode.attr,
 	&dev_attr_enable_sar.attr,
 	&dev_attr_near.attr,
+	&dev_attr_xtalk.attr,
+	&dev_attr_offset.attr,
 	NULL
 };
 
@@ -962,7 +1456,7 @@ static int stmvl53l0_ioctl_handler(struct file *file,
 		stmvl53l0_work_state(data, OFFSETCAL_ON);
 		break;
 	case VL53L0_IOCTL_STOPCALB:
-		vl53l0_dbgmsg("VL53L0_IOCTL_OFFCALB\n");
+		vl53l0_dbgmsg("VL53L0_IOCTL_STOPCALB\n");
 		stmvl53l0_work_state(data, CAL_OFF);
 		break;
 		/* set up offset value */
@@ -980,6 +1474,19 @@ static int stmvl53l0_ioctl_handler(struct file *file,
 		vl53l0_dbgmsg("VL53L0_IOCTL_STOP\n");
 		stmvl53l0_work_state(data, CAL_OFF);
 		break;
+	case VL53L0_IOCTL_GETDATAS_BLOCK:
+		vl53l0_dbgmsg("VL53L0_IOCTL_GETDATAS_BLOCK\n");
+		data->d_ready = 0;
+		wait_event_timeout(data->range_data_wait,
+			data->d_ready > 0,
+			DATA_TIMEOUT);
+		if (copy_to_user((VL53L0_RangingMeasurementData_t *)p,
+			&(data->rangeData),
+			sizeof(VL53L0_RangingMeasurementData_t))) {
+			vl53l0_errmsg("%d, fail\n", __LINE__);
+			return -EFAULT;
+		}
+		break;
 		/* Get all range data */
 	case VL53L0_IOCTL_GETDATAS:
 		vl53l0_dbgmsg("VL53L0_IOCTL_GETDATAS\n");
@@ -1070,11 +1577,11 @@ static int stmvl53l0_ioctl_handler(struct file *file,
 		case (OFFSET_PAR):
 			if (parameter.is_read)
 				parameter.status =
-				VL53L0_GetOffsetCalibrationDataMicroMeter(
+				papi_func_tbl->GetOffsetCalibrationDataMicroMeter(
 				vl53l0_dev, &parameter.value);
 			else
 				parameter.status =
-				VL53L0_SetOffsetCalibrationDataMicroMeter(
+				papi_func_tbl->SetOffsetCalibrationDataMicroMeter(
 					vl53l0_dev, parameter.value);
 			break;
 		case (XTALKRATE_PAR):
@@ -1084,18 +1591,18 @@ static int stmvl53l0_ioctl_handler(struct file *file,
 				vl53l0_dev, (FixPoint1616_t *)&parameter.value);
 			else
 				parameter.status =
-				VL53L0_SetXTalkCompensationRateMegaCps(
+				papi_func_tbl->SetXTalkCompensationRateMegaCps(
 				vl53l0_dev, (FixPoint1616_t)parameter.value);
 
 			break;
 		case (XTALKENABLE_PAR):
 			if (parameter.is_read)
 				parameter.status =
-				VL53L0_GetXTalkCompensationEnable(
+				papi_func_tbl->GetXTalkCompensationEnable(
 				vl53l0_dev, (uint8_t *)&parameter.value);
 			else
 				parameter.status =
-				VL53L0_SetXTalkCompensationEnable(
+				papi_func_tbl->SetXTalkCompensationEnable(
 				vl53l0_dev, (uint8_t)parameter.value);
 			break;
 		case (SIGMAVAL_PRA):
@@ -1369,7 +1876,12 @@ static int stmvl53l0_init_client(struct stmvl53l0_data *data)
 
 	if (Status == VL53L0_ERROR_NONE)
 		Status = papi_func_tbl->SetWrapAroundCheckEnable(vl53l0_dev, 1);
-
+	if (data->offset != 0)
+		papi_func_tbl->SetOffsetCalibrationDataMicroMeter(
+			vl53l0_dev, data->offset);
+	if (data->xtalk != 0)
+		papi_func_tbl->SetXTalkCompensationRateMegaCps(
+		vl53l0_dev, (FixPoint1616_t)data->xtalk);
 #ifdef CALIBRATION_FILE
 	/*stmvl53l0_read_calibration_file(data);*/
 #endif
@@ -1511,6 +2023,7 @@ int stmvl53l0_setup(struct stmvl53l0_data *data, uint8_t type)
 	mutex_init(&data->update_lock);
 	mutex_init(&data->work_mutex);
 	data->w_mode = OFF_MODE;
+	init_waitqueue_head(&data->range_data_wait);
 	/* init work handler */
 	INIT_DELAYED_WORK(&data->dwork, stmvl53l0_work_handler);
 
-- 
2.11.0

