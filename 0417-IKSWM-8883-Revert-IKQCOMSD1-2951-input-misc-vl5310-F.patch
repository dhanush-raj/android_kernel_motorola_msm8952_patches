From 53db394996bc8303ae9364cefd782bac99158db8 Mon Sep 17 00:00:00 2001
From: Jingnan Zhu <e3334c@motorola.com>
Date: Sat, 24 Oct 2015 11:33:01 -0500
Subject: [PATCH 417/959] IKSWM-8883: Revert "IKQCOMSD1-2951:input: misc:
 vl5310: Fix ST Laser driver bugs"

This reverts commit 598e9de9dac3aa5061afc3820b461b163c8ebf83.
Signed-off-by: Jingnan Zhu <e3334c@motorola.com>
Change-Id: I8e499a76c5aa8e94f8414bdad20b425d86224e28
Reviewed-on: http://gerrit.mot.com/794297
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Oleg Klementiev <oleg@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/input/misc/vl53L0/Makefile              |   3 +-
 drivers/input/misc/vl53L0/src/vl53l0_api.c      |  27 +++-
 drivers/input/misc/vl53L0/src/vl53l0_platform.c |   2 +-
 drivers/input/misc/vl53L0/src/vl53l0_port_i2c.c | 199 ++++++++++++------------
 4 files changed, 123 insertions(+), 108 deletions(-)

diff --git a/drivers/input/misc/vl53L0/Makefile b/drivers/input/misc/vl53L0/Makefile
index b29f07f24cf..2f885d8f898 100644
--- a/drivers/input/misc/vl53L0/Makefile
+++ b/drivers/input/misc/vl53L0/Makefile
@@ -3,7 +3,8 @@
 #
 
 # Each configuration option enables a list of files.
-FEATURE_USE_CCI := true
+FEATURE_USE_CCI := false
+#FEATURE_USE_CCI := true
 
 ifeq ($(FEATURE_USE_CCI), true)
 ccflags-y	+= -Idrivers/input/misc/vl53L0/inc -DCAMERA_CCI
diff --git a/drivers/input/misc/vl53L0/src/vl53l0_api.c b/drivers/input/misc/vl53L0/src/vl53l0_api.c
index adee43e2930..1e94d664ec4 100644
--- a/drivers/input/misc/vl53L0/src/vl53l0_api.c
+++ b/drivers/input/misc/vl53L0/src/vl53l0_api.c
@@ -100,6 +100,8 @@
 			(uint16_t)((((uint16_t)msb) << 8) + (uint16_t)lsb)
 
 /* Internal functions declaration */
+static VL53L0_Error VL53L0_set_vcsel_pulse_period(VL53L0_DEV Dev,
+				uint8_t VCSELPulsePeriod);
 static VL53L0_Error VL53L0_get_vcsel_pulse_period(VL53L0_DEV Dev,
 				uint8_t *pVCSELPulsePeriod, uint8_t RangeIndex);
 static uint8_t VL53L0_encode_vcsel_period(uint8_t vcsel_period_pclks);
@@ -2914,6 +2916,22 @@ static uint32_t VL53L0_calc_macro_period_ps(VL53L0_DEV Dev,
 static uint16_t VL53L0_encode_timeout(uint32_t timeout_mclks);
 static uint32_t VL53L0_decode_timeout(uint16_t encoded_timeout);
 
+static VL53L0_Error VL53L0_set_vcsel_pulse_period(VL53L0_DEV Dev, uint8_t
+	VCSELPulsePeriod)
+{
+	VL53L0_Error Status = VL53L0_ERROR_NONE;
+	uint8_t vcsel_period_reg;
+	LOG_FUNCTION_START("");
+
+	vcsel_period_reg = VL53L0_encode_vcsel_period((uint8_t)
+		VCSELPulsePeriod);
+	Status = VL53L0_WrByte(Dev, VL53L0_REG_RNGA_CONFIG_VCSEL_PERIOD,
+		vcsel_period_reg);
+
+	LOG_FUNCTION_END(Status);
+	return Status;
+}
+
 static VL53L0_Error VL53L0_get_vcsel_pulse_period(VL53L0_DEV Dev, uint8_t
 	*pVCSELPulsePeriod, uint8_t RangeIndex)
 {
@@ -4171,9 +4189,9 @@ static VL53L0_Error VL53L0_get_pal_range_status(VL53L0_DEV Dev,
 	uint8_t tmpByte;
 	uint8_t SigmaLimitCheckEnable;
 	uint8_t SignalLimitCheckEnable;
-/*	FixPoint1616_t SigmaEstimate;*/
+	FixPoint1616_t SigmaEstimate;
 	FixPoint1616_t SignalEstimate;
-/*	FixPoint1616_t SigmaLimitValue;*/
+	FixPoint1616_t SigmaLimitValue;
 	FixPoint1616_t SignalLimitValue;
 	uint8_t DeviceRangeStatusInternal = 0;
 	LOG_FUNCTION_START("");
@@ -4204,8 +4222,7 @@ static VL53L0_Error VL53L0_get_pal_range_status(VL53L0_DEV Dev,
 	Status =  VL53L0_GetSigmaLimitCheckEnable(Dev,
 		VL53L0_CHECKPOSITION_EARLY,
 		&SigmaLimitCheckEnable);
-#if 0
-	/* temp fix of kernel panic as divide 0 some time*/
+
 	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0_ERROR_NONE)) {
 		/*
 		* compute the Sigma and check with limit
@@ -4226,7 +4243,7 @@ static VL53L0_Error VL53L0_get_pal_range_status(VL53L0_DEV Dev,
 			}
 		}
 	}
-#endif
+
 	/*
 	* Check if Signal limit is enabled, if yes then do comparison with
 	* limit value and put the result back into pPalRangeStatus.
diff --git a/drivers/input/misc/vl53L0/src/vl53l0_platform.c b/drivers/input/misc/vl53L0/src/vl53l0_platform.c
index 4cae251d4ab..0f9e6860a1e 100644
--- a/drivers/input/misc/vl53L0/src/vl53l0_platform.c
+++ b/drivers/input/misc/vl53L0/src/vl53l0_platform.c
@@ -234,7 +234,7 @@ VL53L0_Error  VL53L0_RdDWord(VL53L0_DEV Dev, uint8_t index, uint32_t *data)
 VL53L0_Error VL53L0_PollingDelay(VL53L0_DEV Dev)
 {
 	VL53L0_Error status = VL53L0_ERROR_NONE;
-
+	volatile uint32_t i;
 	LOG_FUNCTION_START("");
 	/*
 	for(i=0;i<VL53L0_POLLINGDELAY_LOOPNB;i++){
diff --git a/drivers/input/misc/vl53L0/src/vl53l0_port_i2c.c b/drivers/input/misc/vl53L0/src/vl53l0_port_i2c.c
index d601fc1dad5..499048128f3 100644
--- a/drivers/input/misc/vl53L0/src/vl53l0_port_i2c.c
+++ b/drivers/input/misc/vl53L0/src/vl53l0_port_i2c.c
@@ -11,13 +11,32 @@
 #include "stmvl53l0-cci.h"
 #include "vl53l0_platform.h"
 #include "vl53l0_i2c_platform.h"
-#include "stmvl53l0.h"
 
 #define I2C_M_WR			0x00
-#define STATUS_OK			0x00
-#define STATUS_FAIL			(-1)
-/** int  VL53L0_I2CWrite(VL53L0_Dev_t dev, void *buff, uint8_t len);
- * @brief       Write data buffer to VL53L0 device via i2c
+#if 0
+#ifdef CAMERA_CCI
+static struct msm_camera_i2c_client *pclient;
+#else
+static struct i2c_client *pclient;
+#endif
+
+void i2c_setclient(void *client)
+{
+#ifdef CAMERA_CCI
+	pclient = (struct msm_camera_i2c_client *)client;
+#else
+	pclient = (struct i2c_client *)client;
+#endif
+
+}
+
+void *i2c_getclient(void)
+{
+	return (void *)pclient;
+}
+#endif
+/** int  VL6180x_I2CWrite(VL53L0_Dev_t dev, void *buff, uint8_t len);
+ * @brief       Write data buffer to VL6180x device via i2c
  * @param dev   The device to write to
  * @param buff  The data buffer
  * @param len   The length of the transaction in byte
@@ -28,77 +47,66 @@ int VL53L0_I2CWrite(VL53L0_DEV dev, uint8_t *buff, uint8_t len)
 
 
 	int err = 0;
-	if (dev->bus_type == CCI_BUS) {
 #ifdef CAMERA_CCI
-		uint16_t index;
-		struct cci_data *cci_client_obj =
-			(struct cci_data *)dev->client_object;
-		struct msm_camera_i2c_client *client = cci_client_obj->client;
-
-		index = buff[0];
-		/*pr_err("%s: index: %d len: %d\n", __func__, index, len); */
-
-		if (len == 2) {
-			uint8_t data;
-
-			data = buff[1];
-			/* for byte access */
-			err = client->i2c_func_tbl->i2c_write(client, index,
-					data, MSM_CAMERA_I2C_BYTE_DATA);
-			if (err < 0) {
-				pr_err("%s:%d failed status=%d\n",
-					__func__, __LINE__, err);
-				return err;
-			}
-		} else if (len == 3) {
-			uint16_t data;
-
-			data = ((uint16_t)buff[1] << 8) | (uint16_t)buff[2];
-			err = client->i2c_func_tbl->i2c_write(client, index,
-					data, MSM_CAMERA_I2C_WORD_DATA);
-			if (err < 0) {
-				pr_err("%s:%d failed status=%d\n",
-					__func__, __LINE__, err);
-				return err;
-			}
-		} else if (len >= 5) {
-			err = client->i2c_func_tbl->i2c_write_seq(client,
-					index, &buff[1], (len-1));
-			if (err < 0) {
-				pr_err("%s:%d failed status=%d\n",
-					__func__, __LINE__, err);
-				return err;
-			}
+	uint16_t index;
 
+	index = buff[0];
+	/*pr_err("%s: index: %d len: %d\n", __func__, index, len); */
+
+	if (len == 2) {
+		uint8_t data;
+		data = buff[1];
+		/* for byte access */
+		err = pclient->i2c_func_tbl->i2c_write(pclient, index,
+				data, MSM_CAMERA_I2C_BYTE_DATA);
+		if (err < 0) {
+			pr_err("%s:%d failed status=%d\n",
+				__func__, __LINE__, err);
+			return err;
 		}
-#endif
-	} else {
-		struct i2c_msg msg[1];
-		struct i2c_data *i2c_client_obj =
-					(struct i2c_data *)dev->client_object;
-		struct i2c_client *client = i2c_client_obj->client;
-
-		msg[0].addr = client->addr;
-		msg[0].flags = I2C_M_WR;
-		msg[0].buf = buff;
-		msg[0].len = len;
-
-		err = i2c_transfer(client->adapter, msg, 1);
-		/* return the actual messages transfer */
-		if (err != 1) {
-			pr_err("%s: i2c_transfer err:%d, addr:0x%x, reg:0x%x\n",
-				__func__, err, client->addr,
-				(buff[0] << 8 | buff[1]));
-			return STATUS_FAIL;
+	} else if (len == 3) {
+		uint16_t data;
+		data = ((uint16_t)buff[1] << 8) | (uint16_t)buff[2];
+		err = pclient->i2c_func_tbl->i2c_write(pclient, index,
+				data, MSM_CAMERA_I2C_WORD_DATA);
+		if (err < 0) {
+			pr_err("%s:%d failed status=%d\n",
+				__func__, __LINE__, err);
+			return err;
 		}
+	} else if (len == 5) {
+		err = pclient->i2c_func_tbl->i2c_write_seq(pclient,
+				index, &buff[1], 4);
+		if (err < 0) {
+			pr_err("%s:%d failed status=%d\n",
+				__func__, __LINE__, err);
+			return err;
+		}
+
 	}
+	#else
+	struct i2c_msg msg[1];
+	struct i2c_client *client = dev->client_object.client;
+	msg[0].addr = client->addr;
+	msg[0].flags = I2C_M_WR;
+	msg[0].buf = buff;
+	msg[0].len = len;
+
+	err = i2c_transfer(client->adapter, msg, 1);
+	/* return the actual messages transfer */
+	if (err != 1) {
+		pr_err("%s: i2c_transfer err:%d, addr:0x%x, reg:0x%x\n",
+			__func__, err, client->addr, (buff[0] << 8 | buff[1]));
+		return -1;
+	}
+	#endif
 
 	return 0;
 }
 
 
-/** int VL53L0_I2CRead(VL53L0_Dev_t dev, void *buff, uint8_t len);
- * @brief       Read data buffer from VL53L0 device via i2c
+/** int VL6180x_I2CRead(VL53L0_Dev_t dev, void *buff, uint8_t len);
+ * @brief       Read data buffer from VL6180x device via i2c
  * @param dev   The device to read from
  * @param buff  The data buffer to fill
  * @param len   The length of the transaction in byte
@@ -108,43 +116,32 @@ int VL53L0_I2CRead(VL53L0_DEV dev, uint8_t *buff, uint8_t len)
 {
 
 	int err = 0;
-
-	if (dev->bus_type == CCI_BUS) {
 #ifdef CAMERA_CCI
-		uint16_t index;
-		struct cci_data *cci_client_obj =
-				(struct cci_data *)dev->client_object;
-		struct msm_camera_i2c_client *client = cci_client_obj->client;
-
-		index = buff[0];
-		/* pr_err("%s: index: %d\n", __func__, index); */
-		err = client->i2c_func_tbl->i2c_read_seq(client,
-							index, buff, len);
-		if (err < 0) {
-			pr_err("%s:%d failed status=%d\n",
-					__func__, __LINE__, err);
-			return err;
-		}
-#endif
-	} else {
-		struct i2c_msg msg[1];
-		struct i2c_data *i2c_client_obj =
-					(struct i2c_data *)dev->client_object;
-		struct i2c_client *client = i2c_client_obj->client;
-
-		msg[0].addr = client->addr;
-		msg[0].flags = I2C_M_RD|client->flags;
-		msg[0].buf = buff;
-		msg[0].len = len;
-
-		err = i2c_transfer(client->adapter, &msg[0], 1);
-		/* return the actual message transfer */
-		if (err != 1) {
-			pr_err("%s: Read i2c_transfer err:%d, addr:0x%x\n",
-				__func__, err, client->addr);
-			return STATUS_FAIL;
-		}
+	uint16_t index;
+	index = buff[0];
+	/* pr_err("%s: index: %d\n", __func__, index); */
+	err = pclient->i2c_func_tbl->i2c_read_seq(pclient, index, buff, len);
+	if (err < 0) {
+		pr_err("%s:%d failed status=%d\n", __func__, __LINE__, err);
+		return err;
 	}
+#else
+	struct i2c_msg msg[1];
+	struct i2c_client *client = dev->client_object.client;
+
+	msg[0].addr = client->addr;
+	msg[0].flags = I2C_M_RD|client->flags;
+	msg[0].buf = buff;
+	msg[0].len = len;
+
+	err = i2c_transfer(client->adapter, &msg[0], 1);
+	/* return the actual mesage transfer */
+	if (err != 1) {
+		pr_err("%s: Read i2c_transfer err:%d, addr:0x%x\n",
+			__func__, err, client->addr);
+		return -1;
+	}
+#endif
 
 	return 0;
 }
-- 
2.11.0

