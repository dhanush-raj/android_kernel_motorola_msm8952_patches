From 7d5454cd512a5093318bf4f02853af97b432eae8 Mon Sep 17 00:00:00 2001
From: wlgs03 <wlgs03@motorola.com>
Date: Wed, 2 Mar 2016 13:32:14 -0600
Subject: [PATCH 730/959] IKLOCSEN-2562 drivers: misc: stml0xx: Save and
 restore accelerometer cal

Save off new accelerometer calibration offsets and on restart restore any
saved offset from the AP

Change-Id: I54fd0cdb4d3c108bfeeeac9198b0387980f8a14d
Signed-off-by: wlgs03 <wlgs03@motorola.com>
Reviewed-on: http://gerrit.mot.com/827490
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Robert Wiegand <Robert.P.Wiegand@motorola.com>
Reviewed-by: Jason Jae Hyun Koh <jasonkoh@motorola.com>
Reviewed-by: Russell Knize <rknize@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/misc/stml0xx/stml0xx_core.c  |  1 +
 drivers/misc/stml0xx/stml0xx_ioctl.c | 39 ++++++++++++++++++++++++++++++++++++
 drivers/misc/stml0xx/stml0xx_irq.c   | 12 +++++++++++
 drivers/misc/stml0xx/stml0xx_reset.c | 10 +++++++++
 include/linux/stml0xx.h              |  1 +
 include/uapi/linux/motosh_vmm.h      | 20 +++++++++---------
 include/uapi/linux/stml0xx.h         |  9 ++++++++-
 7 files changed, 81 insertions(+), 11 deletions(-)

diff --git a/drivers/misc/stml0xx/stml0xx_core.c b/drivers/misc/stml0xx/stml0xx_core.c
index c174ac0b6f4..e2bda86a67e 100644
--- a/drivers/misc/stml0xx/stml0xx_core.c
+++ b/drivers/misc/stml0xx/stml0xx_core.c
@@ -79,6 +79,7 @@ unsigned char stml0xx_g_zmotion_dur;
 unsigned char stml0xx_g_control_reg[STML0XX_CONTROL_REG_SIZE];
 unsigned char stml0xx_g_mag_cal[STML0XX_MAG_CAL_SIZE];
 unsigned char stml0xx_g_gyro_cal[STML0XX_GYRO_CAL_SIZE];
+unsigned char stml0xx_g_accel_cal[STML0XX_ACCEL_CAL_SIZE];
 unsigned short stml0xx_g_control_reg_restore;
 bool stml0xx_g_booted;
 
diff --git a/drivers/misc/stml0xx/stml0xx_ioctl.c b/drivers/misc/stml0xx/stml0xx_ioctl.c
index 97346499d26..b87314875f4 100644
--- a/drivers/misc/stml0xx/stml0xx_ioctl.c
+++ b/drivers/misc/stml0xx/stml0xx_ioctl.c
@@ -1041,6 +1041,45 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			}
 		}
 		break;
+	case STML0XX_IOCTL_GET_ACCEL_CAL:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+				"STML0XX_IOCTL_GET_ACCEL_CAL");
+		if (stml0xx_g_booted) {
+			err = stml0xx_spi_send_read_reg(ACCEL_CAL,
+					buf, STML0XX_ACCEL_CAL_SIZE);
+			if (err < 0) {
+				dev_err(&stml0xx_misc_data->spi->dev,
+					"Reading get accel cal failed\n");
+				break;
+			}
+			memcpy(stml0xx_g_accel_cal, buf,
+					STML0XX_ACCEL_CAL_SIZE);
+		}
+		if (copy_to_user(argp, stml0xx_g_accel_cal,
+					STML0XX_ACCEL_CAL_SIZE))
+			err = -EFAULT;
+		break;
+	case STML0XX_IOCTL_SET_ACCEL_CAL:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+				"STML0XX_IOCTL_SET_ACCEL_CAL");
+		if (copy_from_user(buf, argp, STML0XX_ACCEL_CAL_SIZE)) {
+			dev_err(&stml0xx_misc_data->spi->dev,
+					"Copy set accel cal returned error\n");
+			err = -EFAULT;
+			break;
+		}
+		memcpy(stml0xx_g_accel_cal, buf,
+				STML0XX_ACCEL_CAL_SIZE);
+		if (stml0xx_g_booted) {
+			err = stml0xx_spi_send_write_reg(ACCEL_CAL,
+					buf, STML0XX_ACCEL_CAL_SIZE);
+			if (err < 0) {
+				dev_err(&stml0xx_misc_data->spi->dev,
+					"Writing set accel cal failed\n");
+				break;
+			}
+		}
+		break;
 	default:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"Invalid IOCTL [%d]", cmd);
diff --git a/drivers/misc/stml0xx/stml0xx_irq.c b/drivers/misc/stml0xx/stml0xx_irq.c
index ec9b539b301..1109c40f6b8 100644
--- a/drivers/misc/stml0xx/stml0xx_irq.c
+++ b/drivers/misc/stml0xx/stml0xx_irq.c
@@ -337,6 +337,18 @@ void stml0xx_irq_work_func(struct work_struct *work)
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"Sending step detect");
 	}
+	if (irq_status & M_UPDATE_ACCEL_CAL) {
+		stml0xx_as_data_buffer_write(
+			ps_stml0xx,
+			DT_ACCEL_CAL,
+			NULL,
+			0,
+			0,
+			stm_ws->ts_ns);
+
+		dev_info(&stml0xx_misc_data->spi->dev,
+			"Save accel cal");
+	}
 EXIT:
 	kfree((void *)stm_ws);
 	stml0xx_sleep(ps_stml0xx);
diff --git a/drivers/misc/stml0xx/stml0xx_reset.c b/drivers/misc/stml0xx/stml0xx_reset.c
index 111e141d2e2..8768c86913b 100644
--- a/drivers/misc/stml0xx/stml0xx_reset.c
+++ b/drivers/misc/stml0xx/stml0xx_reset.c
@@ -239,6 +239,16 @@ void stml0xx_initialize_work_func(struct work_struct *work)
 			ret_err = err;
 		}
 	}
+	if (err >= 0) {
+		memcpy(buf, stml0xx_g_accel_cal, STML0XX_ACCEL_CAL_SIZE);
+		err = stml0xx_spi_send_write_reg_reset(ACCEL_CAL, buf,
+				STML0XX_ACCEL_CAL_SIZE, RESET_NOT_ALLOWED);
+		if (err < 0) {
+			dev_err(&ps_stml0xx->spi->dev,
+					"Unable to write accel calibration");
+			ret_err = err;
+		}
+	}
 #ifdef CONFIG_SENSORHUB_DEBUG_LOGGING
 	buf[0] = SH_LOG_DEBUG;
 	err = stml0xx_spi_send_write_reg_reset(SH_LOG_LEVEL, buf,
diff --git a/include/linux/stml0xx.h b/include/linux/stml0xx.h
index 10097cbdbf8..821fd2f94b1 100644
--- a/include/linux/stml0xx.h
+++ b/include/linux/stml0xx.h
@@ -464,6 +464,7 @@ extern unsigned char stml0xx_g_zmotion_dur;
 extern unsigned char stml0xx_g_control_reg[STML0XX_CONTROL_REG_SIZE];
 extern unsigned char stml0xx_g_mag_cal[STML0XX_MAG_CAL_SIZE];
 extern unsigned char stml0xx_g_gyro_cal[STML0XX_GYRO_CAL_SIZE];
+extern unsigned char stml0xx_g_accel_cal[STML0XX_ACCEL_CAL_SIZE];
 extern unsigned short stml0xx_g_control_reg_restore;
 extern bool stml0xx_g_booted;
 
diff --git a/include/uapi/linux/motosh_vmm.h b/include/uapi/linux/motosh_vmm.h
index 290a6a6e339..9ac2f68026e 100644
--- a/include/uapi/linux/motosh_vmm.h
+++ b/include/uapi/linux/motosh_vmm.h
@@ -52,29 +52,29 @@ VMM_ENTRY(0x06, ACCEL_ORIENTATION,					TRUE,
 VMM_ENTRY(0x07, ACCEL_SWAP,						TRUE,
 		&vmm_accel_swap,
 		sizeof(vmm_accel_swap))
-VMM_ENTRY(0x08, UNUSED_08,						FALSE,
-		0, /* &pd_cycle_counter */
-		0)
+VMM_ENTRY(0x08, ACCEL_CAL,						TRUE,
+		&vmm_accel_cal,
+		sizeof(vmm_accel_cal))
 VMM_ENTRY(0x09, UNUSED_09,						FALSE,
-		0, /* pd_quick_peek */
+		0,
 		0)
 VMM_ENTRY(0x0A, UNUSED_0A,						FALSE,
-		0, /* pd_peek_response */
+		0,
 		0)
 VMM_ENTRY(0x0B, UNUSED_0B,						FALSE,
-		0, /* vmm_p_display_status */
+		0,
 		0)
 VMM_ENTRY(0x0C, UNUSED_0C,						FALSE,
-		0, /* vmm_touch_info */
+		0,
 		0)
 VMM_ENTRY(0x0D, UNUSED_0D,						FALSE,
-		0, /*vmm_p_display_config */
+		0,
 		0)
 VMM_ENTRY(0x0E, UNUSED_0E,						FALSE,
-		0, /* &vmm_pdl.data_valid */
+		0,
 		0)
 VMM_ENTRY(0x0F, UNUSED_0F,						FALSE,
-		0, /* vmm_p_display_color */
+		0,
 		0)
 VMM_ENTRY(0x10, QUEUE_TEST_LIMIT,					TRUE,
 		&vmm_queue_test_limit,
diff --git a/include/uapi/linux/stml0xx.h b/include/uapi/linux/stml0xx.h
index ec2dcf09268..6dab07c4a89 100644
--- a/include/uapi/linux/stml0xx.h
+++ b/include/uapi/linux/stml0xx.h
@@ -138,6 +138,10 @@
 		_IOW(STML0XX_IOCTL_BASE, 55,  unsigned short)
 #define STML0XX_IOCTL_SET_FLUSH \
 		_IOW(STML0XX_IOCTL_BASE, 56, int)
+#define STML0XX_IOCTL_GET_ACCEL_CAL \
+		_IOR(STML0XX_IOCTL_BASE, 57, char[STML0XX_ACCEL_CAL_SIZE])
+#define STML0XX_IOCTL_SET_ACCEL_CAL \
+		_IOR(STML0XX_IOCTL_BASE, 58, char[STML0XX_ACCEL_CAL_SIZE])
 
 /* SPI contants */
 #define SPI_MSG_SIZE        192
@@ -156,6 +160,7 @@
 #define STML0XX_GYRO_CAL_FIRST           102 /* 17 entries - 6 bytes each */
 #define STML0XX_GYRO_CAL_SECOND          96  /* 16 entries - 6 bytes each */
 #define STML0XX_GYRO_CAL_SIZE            198 /* 33 entries - 6 bytes each */
+#define STML0XX_ACCEL_CAL_SIZE           6   /* 1 entry    - 6 bytes      */
 #define STML0XX_AS_DATA_BUFF_SIZE        20
 #define STML0XX_MS_DATA_BUFF_SIZE        20
 #define STML0XX_ALGO_SIZE                2
@@ -189,6 +194,7 @@
 #define M_ACCEL2                0x020000
 #define M_QUAT_9AXIS            0x040000
 #define M_QUEUE_OVERFLOW        0x080000
+#define M_UPDATE_ACCEL_CAL      0x100000
 
 /* wake sensor status */
 #define M_DOCK                  0x000001
@@ -314,7 +320,8 @@ enum STML0XX_data_types {
 	DT_GYRO_CAL,
 	DT_STEP_COUNTER,
 	DT_STEP_DETECTOR,
-	DT_GLANCE
+	DT_GLANCE,
+	DT_ACCEL_CAL
 };
 
 enum {
-- 
2.11.0

