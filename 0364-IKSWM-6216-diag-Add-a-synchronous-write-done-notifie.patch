From 2a7c57cc382375eb8e5860ff282a0f147b356050 Mon Sep 17 00:00:00 2001
From: Ravi Vembu <raviv@motorola.com>
Date: Wed, 14 Oct 2015 11:29:09 -0500
Subject: [PATCH 364/959] IKSWM-6216: diag: Add a synchronous write done
 notifier

The tty diag driver finishes the write operations synchronously and
notifies write done. Hence add a synchronous write done notifier in the
diag char driver for usb writes. The synchronous write done notifier
skips the write lock, since the lock is already taken during the write
operation.
Signed-off-by: Ravi Vembu <raviv@motorola.com>

Change-Id: I92abbc4964417448c790a1ff9ab072120ac63a93
Reviewed-on: http://gerrit.mot.com/791337
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Ravikumar Vembu <raviv@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/char/diag/diag_usb.c | 51 ++++++++++++++++++++++++++++----------------
 drivers/tty/diag/tty_diag.c  |  2 +-
 include/linux/usb/usbdiag.h  |  1 +
 3 files changed, 35 insertions(+), 19 deletions(-)

diff --git a/drivers/char/diag/diag_usb.c b/drivers/char/diag/diag_usb.c
index dc2c5da0f70..7f8e37c1847 100644
--- a/drivers/char/diag/diag_usb.c
+++ b/drivers/char/diag/diag_usb.c
@@ -289,15 +289,14 @@ static void usb_read_done_work_fn(struct work_struct *work)
 }
 
 static void diag_usb_write_done(struct diag_usb_info *ch,
-				struct diag_request *req)
+				struct diag_request *req,
+				int sync)
 {
 	int ctxt = 0;
 	int len = 0;
 	struct diag_usb_buf_tbl_t *entry = NULL;
 	unsigned char *buf = NULL;
-       /* MOT: comment out
 	unsigned long flags;
-       */
 
 	if (!ch || !req)
 		return;
@@ -316,23 +315,36 @@ static void diag_usb_write_done(struct diag_usb_info *ch,
 		diagmem_free(driver, req, ch->mempool);
 		return;
 	}
-	DIAG_LOG(DIAG_DEBUG_MUX, "full write_done, ctxt: %d\n",
-		 ctxt);
-	/* MOT: diag_usb_write uses write_lock as well,
-	   tty_diag_channel_writedirectly send USB_DIAG_WRITE_DONE,
-	   this can cause a deadlock here.Actually,
-	   diag_ws_on_copy_complete has its own lock, we don't need lock
-	   here spin_lock_irqsave(&ch->write_lock, flags);
-	*/
-	list_del(&entry->track);
-	ctxt = entry->ctxt;
-	buf = entry->buf;
-	len = entry->len;
-	kfree(entry);
-	diag_ws_on_copy_complete(DIAG_WS_MUX);
+	if (sync) {
+		DIAG_LOG(DIAG_DEBUG_MUX, "full write_done, ctxt: %d\n",
+			 ctxt);
+		/* MOT: diag_usb_write uses write_lock as well,
+		   tty_diag_channel_writedirectly send USB_DIAG_WRITE_DONE,
+		   this can cause a deadlock here.Actually,
+		   diag_ws_on_copy_complete has its own lock, we don't need lock
+		   here spin_lock_irqsave(&ch->write_lock, flags);
+		*/
+		list_del(&entry->track);
+		ctxt = entry->ctxt;
+		buf = entry->buf;
+		len = entry->len;
+		kfree(entry);
+		diag_ws_on_copy_complete(DIAG_WS_MUX);
 	/* MOT: comment out
 	   spin_unlock_irqrestore(&ch->write_lock, flags);
 	*/
+	} else {
+		DIAG_LOG(DIAG_DEBUG_MUX, "full write_done, ctxt: %d\n",
+			 ctxt);
+		spin_lock_irqsave(&ch->write_lock, flags);
+		list_del(&entry->track);
+		ctxt = entry->ctxt;
+		buf = entry->buf;
+		len = entry->len;
+		kfree(entry);
+		diag_ws_on_copy_complete(DIAG_WS_MUX);
+		spin_unlock_irqrestore(&ch->write_lock, flags);
+	}
 
 	if (ch->ops && ch->ops->write_done)
 		ch->ops->write_done(buf, len, ctxt, DIAG_USB_MODE);
@@ -374,7 +386,10 @@ static void diag_usb_notifier(void *priv, unsigned event,
 			   &usb_info->read_done_work);
 		break;
 	case USB_DIAG_WRITE_DONE:
-		diag_usb_write_done(usb_info, d_req);
+		diag_usb_write_done(usb_info, d_req, 0);
+		break;
+	case USB_DIAG_WRITE_DONE_SYNC:
+		diag_usb_write_done(usb_info, d_req, 1);
 		break;
 	default:
 		pr_err_ratelimited("diag: Unknown event from USB diag\n");
diff --git a/drivers/tty/diag/tty_diag.c b/drivers/tty/diag/tty_diag.c
index 03569a4980a..e102ca67d9f 100644
--- a/drivers/tty/diag/tty_diag.c
+++ b/drivers/tty/diag/tty_diag.c
@@ -309,7 +309,7 @@ int tty_diag_channel_write(struct usb_diag_ch *diag_ch,
 	d_req->actual = d_req->length;
 	spin_unlock_irqrestore(&diag_tty_lock, flags);
 
-	diag_ch->notify(diag_ch->priv, USB_DIAG_WRITE_DONE, d_req);
+	diag_ch->notify(diag_ch->priv, USB_DIAG_WRITE_DONE_SYNC, d_req);
 
 	return 0;
 }
diff --git a/include/linux/usb/usbdiag.h b/include/linux/usb/usbdiag.h
index 1be8e634fcd..91e93b5e955 100644
--- a/include/linux/usb/usbdiag.h
+++ b/include/linux/usb/usbdiag.h
@@ -32,6 +32,7 @@
 #define USB_DIAG_DISCONNECT	1
 #define USB_DIAG_WRITE_DONE	2
 #define USB_DIAG_READ_DONE	3
+#define USB_DIAG_WRITE_DONE_SYNC 4
 
 struct diag_request {
 	char *buf;
-- 
2.11.0

