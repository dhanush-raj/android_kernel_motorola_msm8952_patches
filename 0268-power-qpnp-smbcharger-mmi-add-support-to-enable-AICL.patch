From ae59c53550e1c2f737114a48c8e136c38e222191 Mon Sep 17 00:00:00 2001
From: Subbaraman Narayanamurthy <subbaram@codeaurora.org>
Date: Tue, 21 Apr 2015 16:02:50 -0700
Subject: [PATCH 268/959] power: qpnp-smbcharger-mmi: add support to enable
 AICL rerun

Currently we enable AICL rerun only when we want to limit
battery over-voltage oscillations seen while the charger is
headroom limited. However, there is a need to enable AICL
rerun all the time.

Add support for it using "qcom,force-aicl-rerun" property.

If the property is not set, AICL rerun and deglitch time will
be changed dynamically based on the battery voltage.

CRs-Fixed: 828718
Change-Id: Ic3e3f15793e76be5088f179751aa3cb0ca9bd4dd
Signed-off-by: Subbaraman Narayanamurthy <subbaram@codeaurora.org>
Signed-off-by: Ravi Vembu <raviv@motorola.com>
Reviewed-on: http://gerrit.mot.com/757659
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Submit-Approved: Jira Key <jirakey@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Kenneth Kessler <kennykessler@motorola.com>
---
 drivers/power/qpnp-smbcharger-mmi.c | 73 ++++++++++++++++++++++++++++++-------
 1 file changed, 59 insertions(+), 14 deletions(-)

diff --git a/drivers/power/qpnp-smbcharger-mmi.c b/drivers/power/qpnp-smbcharger-mmi.c
index abb547013bd..6edce969027 100644
--- a/drivers/power/qpnp-smbcharger-mmi.c
+++ b/drivers/power/qpnp-smbcharger-mmi.c
@@ -138,6 +138,7 @@ struct smbchg_chip {
 	bool				chg_inhibit_source_fg;
 	bool				low_volt_dcin;
 	bool				vbat_above_headroom;
+	bool				force_aicl_rerun;
 	u8				original_usbin_allowance;
 	struct parallel_usb_cfg		parallel;
 	struct delayed_work		parallel_en_work;
@@ -3281,10 +3282,51 @@ static void smbchg_soc_changed(struct smbchg_chip *chip)
 #define AICL_RERUN_MASK			(BIT(5) | BIT(4))
 #define AICL_RERUN_ON			(BIT(5) | BIT(4))
 #define AICL_RERUN_OFF			0
+
+static int smbchg_hw_aicl_rerun_en(struct smbchg_chip *chip, bool en)
+{
+	int rc = 0;
+
+	rc = smbchg_sec_masked_write(chip,
+		chip->misc_base + MISC_TRIM_OPT_15_8,
+		AICL_RERUN_MASK, en ? AICL_RERUN_ON : AICL_RERUN_OFF);
+	if (rc)
+		pr_err("Couldn't write to MISC_TRIM_OPTIONS_15_8 rc=%d\n",
+			rc);
+	return rc;
+}
+
+static int smbchg_aicl_config(struct smbchg_chip *chip)
+{
+	int rc = 0;
+
+	rc = smbchg_sec_masked_write(chip,
+		chip->usb_chgpth_base + USB_AICL_CFG,
+		USB_AICL_DEGLITCH_MASK, USB_AICL_DEGLITCH_LONG);
+	if (rc) {
+		pr_err("Couldn't write to USB_AICL_CFG rc=%d\n", rc);
+		return rc;
+	}
+	rc = smbchg_sec_masked_write(chip,
+		chip->dc_chgpth_base + DC_AICL_CFG,
+		DC_AICL_DEGLITCH_MASK, DC_AICL_DEGLITCH_LONG);
+	if (rc) {
+		pr_err("Couldn't write to DC_AICL_CFG rc=%d\n", rc);
+		return rc;
+	}
+	rc = smbchg_hw_aicl_rerun_en(chip, true);
+	if (rc)
+		pr_err("Couldn't enable AICL rerun rc= %d\n", rc);
+	return rc;
+}
+
 static void smbchg_aicl_deglitch_wa_en(struct smbchg_chip *chip, bool en)
 {
 	int rc;
 
+	if (chip->force_aicl_rerun)
+		return;
+
 	if (en && !chip->aicl_deglitch_short) {
 		rc = smbchg_sec_masked_write(chip,
 			chip->usb_chgpth_base + USB_AICL_CFG,
@@ -3300,12 +3342,9 @@ static void smbchg_aicl_deglitch_wa_en(struct smbchg_chip *chip, bool en)
 			pr_err("Couldn't write to DC_AICL_CFG rc=%d\n", rc);
 			return;
 		}
-		rc = smbchg_sec_masked_write(chip,
-			chip->misc_base + MISC_TRIM_OPT_15_8,
-			AICL_RERUN_MASK, AICL_RERUN_ON);
+		rc = smbchg_hw_aicl_rerun_en(chip, true);
 		if (rc) {
-			pr_err("Couldn't write to MISC_TRIM_OPTIONS_15_8 rc=%d\n",
-					rc);
+			pr_err("Couldn't enable AICL rerun rc=%d\n", rc);
 			return;
 		}
 		pr_smb(PR_STATUS, "AICL deglitch set to short\n");
@@ -3324,12 +3363,9 @@ static void smbchg_aicl_deglitch_wa_en(struct smbchg_chip *chip, bool en)
 			pr_err("Couldn't write to DC_AICL_CFG rc=%d\n", rc);
 			return;
 		}
-		rc = smbchg_sec_masked_write(chip,
-			chip->misc_base + MISC_TRIM_OPT_15_8,
-			AICL_RERUN_MASK, AICL_RERUN_OFF);
+		smbchg_hw_aicl_rerun_en(chip, false);
 		if (rc) {
-			pr_err("Couldn't write to MISC_TRIM_OPTIONS_15_8 rc=%d\n",
-				rc);
+			pr_err("Couldn't disable AICL rerun rc=%d\n", rc);
 			return;
 		}
 		pr_smb(PR_STATUS, "AICL deglitch set to normal\n");
@@ -4376,6 +4412,12 @@ static void handle_usb_removal(struct smbchg_chip *chip)
 	chip->apsd_rerun_cnt = 0;
 
 	smbchg_aicl_deglitch_wa_check(chip);
+	if (chip->force_aicl_rerun) {
+		rc = smbchg_hw_aicl_rerun_en(chip, true);
+		if (rc)
+			pr_err("Error enabling AICL rerun rc= %d\n",
+				rc);
+	}
 
 	/* Clear the OV detected status set before */
 	if (chip->usb_ov_det)
@@ -4740,7 +4782,7 @@ static irqreturn_t aicl_done_handler(int irq, void *_chip)
 	else
 		chip->aicl_complete = false;
 
-	if (chip->aicl_deglitch_short) {
+	if (chip->aicl_deglitch_short || chip->force_aicl_rerun) {
 		if (!chip->aicl_irq_count)
 			get_current_time(&chip->first_aicl_seconds);
 
@@ -4759,9 +4801,7 @@ static irqreturn_t aicl_done_handler(int irq, void *_chip)
 				 * Disable AICL rerun since many interrupts were
 				 * triggered in a short time
 				 */
-				rc = smbchg_sec_masked_write(chip,
-					chip->misc_base + MISC_TRIM_OPT_15_8,
-					AICL_RERUN_MASK, AICL_RERUN_OFF);
+				rc = smbchg_hw_aicl_rerun_en(chip, false);
 				if (rc)
 					pr_err("Couldn't turn off AICL rerun rc:%d\n",
 						rc);
@@ -5352,6 +5392,9 @@ static int smbchg_hw_init(struct smbchg_chip *chip)
 		}
 	}
 
+	if (chip->force_aicl_rerun)
+		rc = smbchg_aicl_config(chip);
+
 	return rc;
 }
 
@@ -5663,6 +5706,8 @@ static int smb_parse_dt(struct smbchg_chip *chip)
 					       "qcom,batt-therm-wa-enabled");
 	if (chip->batt_therm_wa)
 		dev_info(chip->dev, "batt_therm workaround is enabled!\n");
+	chip->force_aicl_rerun = of_property_read_bool(node,
+					"qcom,force-aicl-rerun");
 
 	/* parse the battery missing detection pin source */
 	rc = of_property_read_string(chip->spmi->dev.of_node,
-- 
2.11.0

