From 7de868a632f286862f57d915d3da2148f39fcfdf Mon Sep 17 00:00:00 2001
From: "Russ W. Knize" <Russ.Knize@motorola.com>
Date: Fri, 13 Nov 2015 11:14:47 -0600
Subject: [PATCH 609/959] IKSWM-16334: esdfs: override creds for all file
 descriptor opertaions

Propagate from IKSWM-10934.

Make sure we override credentials for all file descriptor based operations
to avoid any unexpected changes in fuid/fgid from the lower file system's
perspective.

Change-Id: I8449476c03ba6f890a8fe15f556c37b5cc70cb5d
Signed-off-by: Russ Knize <Russ.Knize@motorola.com>
Reviewed-on: http://gerrit.mot.com/812379
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Zhi-Ming Yuan <a14194@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 fs/esdfs/file.c | 48 ++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 44 insertions(+), 4 deletions(-)

diff --git a/fs/esdfs/file.c b/fs/esdfs/file.c
index 18038e1bfb6..f0e7dbda620 100644
--- a/fs/esdfs/file.c
+++ b/fs/esdfs/file.c
@@ -84,6 +84,10 @@ static long esdfs_unlocked_ioctl(struct file *file, unsigned int cmd,
 {
 	long err = -ENOTTY;
 	struct file *lower_file;
+	struct esdfs_sb_info *sbi = ESDFS_SB(file->f_path.dentry->d_sb);
+	const struct cred *creds = esdfs_override_creds(sbi, NULL);
+	if (!creds)
+		return -ENOMEM;
 
 	lower_file = esdfs_lower_file(file);
 
@@ -98,6 +102,7 @@ static long esdfs_unlocked_ioctl(struct file *file, unsigned int cmd,
 		esdfs_copy_attr(file->f_path.dentry->d_inode,
 				     lower_file->f_path.dentry->d_inode);
 out:
+	esdfs_revert_creds(creds, NULL);
 	return err;
 }
 
@@ -107,6 +112,10 @@ static long esdfs_compat_ioctl(struct file *file, unsigned int cmd,
 {
 	long err = -ENOTTY;
 	struct file *lower_file;
+	struct esdfs_sb_info *sbi = ESDFS_SB(file->f_path.dentry->d_sb);
+	const struct cred *creds = esdfs_override_creds(sbi, NULL);
+	if (!creds)
+		return -ENOMEM;
 
 	lower_file = esdfs_lower_file(file);
 
@@ -117,6 +126,7 @@ static long esdfs_compat_ioctl(struct file *file, unsigned int cmd,
 		err = lower_file->f_op->compat_ioctl(lower_file, cmd, arg);
 
 out:
+	esdfs_revert_creds(creds, NULL);
 	return err;
 }
 #endif
@@ -127,6 +137,10 @@ static int esdfs_mmap(struct file *file, struct vm_area_struct *vma)
 	bool willwrite;
 	struct file *lower_file;
 	const struct vm_operations_struct *saved_vm_ops = NULL;
+	struct esdfs_sb_info *sbi = ESDFS_SB(file->f_path.dentry->d_sb);
+	const struct cred *creds = esdfs_override_creds(sbi, NULL);
+	if (!creds)
+		return -ENOMEM;
 
 	/* this might be deferred to mmap's writepage */
 	willwrite = ((vma->vm_flags | VM_SHARED | VM_WRITE) == vma->vm_flags);
@@ -176,6 +190,7 @@ static int esdfs_mmap(struct file *file, struct vm_area_struct *vma)
 		ESDFS_F(file)->lower_vm_ops = saved_vm_ops;
 
 out:
+	esdfs_revert_creds(creds, NULL);
 	return err;
 }
 
@@ -230,11 +245,16 @@ static int esdfs_flush(struct file *file, fl_owner_t id)
 {
 	int err = 0;
 	struct file *lower_file = NULL;
+	struct esdfs_sb_info *sbi = ESDFS_SB(file->f_path.dentry->d_sb);
+	const struct cred *creds = esdfs_override_creds(sbi, NULL);
+	if (!creds)
+		return -ENOMEM;
 
 	lower_file = esdfs_lower_file(file);
 	if (lower_file && lower_file->f_op && lower_file->f_op->flush)
 		err = lower_file->f_op->flush(lower_file, id);
 
+	esdfs_revert_creds(creds, NULL);
 	return err;
 }
 
@@ -281,11 +301,16 @@ static int esdfs_fasync(int fd, struct file *file, int flag)
 {
 	int err = 0;
 	struct file *lower_file = NULL;
+	struct esdfs_sb_info *sbi = ESDFS_SB(file->f_path.dentry->d_sb);
+	const struct cred *creds = esdfs_override_creds(sbi, NULL);
+	if (!creds)
+		return -ENOMEM;
 
 	lower_file = esdfs_lower_file(file);
 	if (lower_file->f_op && lower_file->f_op->fasync)
 		err = lower_file->f_op->fasync(fd, lower_file, flag);
 
+	esdfs_revert_creds(creds, NULL);
 	return err;
 }
 
@@ -293,9 +318,13 @@ static ssize_t esdfs_aio_read(struct kiocb *iocb, const struct iovec *iov,
 			       unsigned long nr_segs, loff_t pos)
 {
 	int err = -EINVAL;
-	struct file *file, *lower_file;
+	struct file *file = iocb->ki_filp;
+	struct file *lower_file;
+	struct esdfs_sb_info *sbi = ESDFS_SB(file->f_path.dentry->d_sb);
+	const struct cred *creds = esdfs_override_creds(sbi, NULL);
+	if (!creds)
+		return -ENOMEM;
 
-	file = iocb->ki_filp;
 	lower_file = esdfs_lower_file(file);
 	if (!lower_file->f_op->aio_read)
 		goto out;
@@ -313,6 +342,7 @@ static ssize_t esdfs_aio_read(struct kiocb *iocb, const struct iovec *iov,
 		fsstack_copy_attr_atime(file->f_path.dentry->d_inode,
 					file_inode(lower_file));
 out:
+	esdfs_revert_creds(creds, NULL);
 	return err;
 }
 
@@ -320,9 +350,13 @@ static ssize_t esdfs_aio_write(struct kiocb *iocb, const struct iovec *iov,
 				unsigned long nr_segs, loff_t pos)
 {
 	int err = -EINVAL;
-	struct file *file, *lower_file;
+	struct file *file = iocb->ki_filp;
+	struct file *lower_file;
+	struct esdfs_sb_info *sbi = ESDFS_SB(file->f_path.dentry->d_sb);
+	const struct cred *creds = esdfs_override_creds(sbi, NULL);
+	if (!creds)
+		return -ENOMEM;
 
-	file = iocb->ki_filp;
 	lower_file = esdfs_lower_file(file);
 	if (!lower_file->f_op->aio_write)
 		goto out;
@@ -343,6 +377,7 @@ static ssize_t esdfs_aio_write(struct kiocb *iocb, const struct iovec *iov,
 					file_inode(lower_file));
 	}
 out:
+	esdfs_revert_creds(creds, NULL);
 	return err;
 }
 
@@ -356,6 +391,10 @@ static loff_t esdfs_file_llseek(struct file *file, loff_t offset, int whence)
 {
 	int err;
 	struct file *lower_file;
+	struct esdfs_sb_info *sbi = ESDFS_SB(file->f_path.dentry->d_sb);
+	const struct cred *creds = esdfs_override_creds(sbi, NULL);
+	if (!creds)
+		return -ENOMEM;
 
 	err = generic_file_llseek(file, offset, whence);
 	if (err < 0)
@@ -365,6 +404,7 @@ static loff_t esdfs_file_llseek(struct file *file, loff_t offset, int whence)
 	err = generic_file_llseek(lower_file, offset, whence);
 
 out:
+	esdfs_revert_creds(creds, NULL);
 	return err;
 }
 
-- 
2.11.0

