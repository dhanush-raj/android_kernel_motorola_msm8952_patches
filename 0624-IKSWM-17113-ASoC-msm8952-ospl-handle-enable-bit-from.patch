From aa34046e7d68f694b6408148db68a0b0b478c2ed Mon Sep 17 00:00:00 2001
From: SeungYoon Lee <w22905@motorola.com>
Date: Fri, 15 Jan 2016 15:49:16 -0600
Subject: [PATCH 624/959] IKSWM-17113 ASoC: msm8952: ospl: handle enable bit
 from modules

Add module enable bit control into module structure itself
not to just rely on AFE manager.
In this way, even before/after AFE topology is fully (re-)activated,
we can maintain the bit to turn off processing and bypass Rx output.

Change-Id: I24e5597e9494cdb4dd1f35f707a53bf273409140
Signed-off-by: SeungYoon Lee <w22905@motorola.com>
Reviewed-on: http://gerrit.mot.com/813801
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Joseph Dwyer <josephdwyer@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 include/sound/ospl2xx.h |  4 ++++
 sound/soc/msm/ospl2xx.c | 36 ++++++++++++++++++++----------------
 2 files changed, 24 insertions(+), 16 deletions(-)

diff --git a/include/sound/ospl2xx.h b/include/sound/ospl2xx.h
index ea7aef82689..451594789e1 100644
--- a/include/sound/ospl2xx.h
+++ b/include/sound/ospl2xx.h
@@ -21,6 +21,8 @@
 #define AFE_CUSTOM_OPALUM_TX_MODULE                    0x00A1BF00
 
 /* RX module parameter IDs */
+/* Get Module status */
+#define PARAM_ID_OPALUM_RX_ENABLE                      0x00A1AF01
 /* Switch between internal config strings */
 #define PARAM_ID_OPALUM_RX_SET_USE_CASE                0x00A1AF02
 /* Run production line test */
@@ -39,6 +41,8 @@
 
 
 /* TX module parameter IDs */
+/* Get Module status */
+#define PARAM_ID_OPALUM_TX_ENABLE                      0x00A1BF01
 /* Run production line test */
 #define PARAM_ID_OPALUM_TX_RUN_CALIBRATION             0x00A1BF03
 /* Get f0 calibration values */
diff --git a/sound/soc/msm/ospl2xx.c b/sound/soc/msm/ospl2xx.c
index 3deb7c3f3e1..358cd75eb52 100644
--- a/sound/soc/msm/ospl2xx.c
+++ b/sound/soc/msm/ospl2xx.c
@@ -95,10 +95,7 @@ int ospl2xx_afe_set_single_param(uint32_t param_id, int32_t arg1)
 		pr_err("%s: unsupported paramID[0x%08X]\n", __func__, param_id);
 		return -EINVAL;
 	}
-	if (param_id == AFE_CUSTOM_OPALUM_RX_MODULE ||
-	    param_id == AFE_CUSTOM_OPALUM_TX_MODULE) {
-		param_id = AFE_PARAM_ID_ENABLE;
-	}
+
 	index = afe_get_port_index(port_id);
 
 	/* Allocate memory for the message */
@@ -364,10 +361,6 @@ int ospl2xx_afe_get_param(uint32_t param_id)
 		pr_err("%s: unsupported paramID[0x%08X]\n", __func__, param_id);
 		return -EINVAL;
 	}
-	if (param_id == AFE_CUSTOM_OPALUM_RX_MODULE ||
-	    param_id == AFE_CUSTOM_OPALUM_TX_MODULE) {
-		param_id = AFE_PARAM_ID_ENABLE;
-	}
 
 	index = afe_get_port_index(port_id);
 
@@ -440,10 +433,11 @@ static int32_t ospl2xx_afe_callback(struct apr_client_data *data)
 		if (payload32[1] == AFE_CUSTOM_OPALUM_RX_MODULE ||
 		    payload32[1] == AFE_CUSTOM_OPALUM_TX_MODULE) {
 			switch (payload32[2]) {
-			case AFE_PARAM_ID_ENABLE:
+			case PARAM_ID_OPALUM_RX_ENABLE:
 			case PARAM_ID_OPALUM_RX_EXC_MODEL:
 			case PARAM_ID_OPLAUM_RX_TEMPERATURE:
 			case PARAM_ID_OPALUM_RX_CURRENT_PARAM_SET:
+			case PARAM_ID_OPALUM_TX_ENABLE:
 			case PARAM_ID_OPALUM_TX_F0_CALIBRATION_VALUE:
 			case PARAM_ID_OPALUM_TX_TEMP_MEASUREMENT_VALUE:
 				afe_cb_payload32_data[0] = payload32[4];
@@ -471,14 +465,17 @@ static int32_t ospl2xx_afe_callback(struct apr_client_data *data)
  */
 static DEFINE_MUTEX(mr_lock);
 /* RX */
-/* AFE_PARAM_ID_ENABLE */
+/* PARAM_ID_OPALUM_RX_ENABLE */
 static int ospl2xx_rx_enable_put(struct snd_kcontrol *kcontrol,
 			struct snd_ctl_elem_value *ucontrol)
 {
 	int enable = ucontrol->value.integer.value[0];
 
+	if (enable != 0 && enable != 1)
+		return 0;
+
 	ospl2xx_afe_set_single_param(
-		AFE_CUSTOM_OPALUM_RX_MODULE,
+		PARAM_ID_OPALUM_RX_ENABLE,
 		enable);
 
 	return 0;
@@ -488,7 +485,7 @@ static int ospl2xx_rx_enable_get(struct snd_kcontrol *kcontrol,
 {
 	mutex_lock(&mr_lock);
 	ospl2xx_afe_set_callback(ospl2xx_afe_callback);
-	ospl2xx_afe_get_param(AFE_CUSTOM_OPALUM_RX_MODULE);
+	ospl2xx_afe_get_param(PARAM_ID_OPALUM_RX_ENABLE);
 
 	ucontrol->value.integer.value[0] = afe_cb_payload32_data[0];
 	mutex_unlock(&mr_lock);
@@ -501,6 +498,7 @@ static const struct soc_enum ospl2xx_rx_enable_enum[] = {
 };
 
 /* PARAM_ID_OPALUM_RX_SET_USE_CASE */
+#define NUM_RX_CONFIGS 3
 static int ospl2xx_rx_int_config_get(struct snd_kcontrol *kcontrol,
 			struct snd_ctl_elem_value *ucontrol)
 {
@@ -516,6 +514,10 @@ static int ospl2xx_rx_int_config_get(struct snd_kcontrol *kcontrol,
 static int ospl2xx_rx_int_config_put(struct snd_kcontrol *kcontrol,
 			struct snd_ctl_elem_value *ucontrol)
 {
+	if (ucontrol->value.integer.value[0] < 0 ||
+	    ucontrol->value.integer.value[0] >= NUM_RX_CONFIGS)
+		return 0;
+
 	pr_info("%s: set configuration index = %d\n",
 		__func__, (int)ucontrol->value.integer.value[0]);
 
@@ -559,7 +561,6 @@ static const struct soc_enum ospl2xx_rx_run_diagnostic_enum[] = {
 };
 
 /* PARAM_ID_OPALUM_RX_SET_EXTERNAL_CONFIG */
-#define NUM_RX_CONFIGS 3
 static int ospl2xx_rx_ext_config_get(struct snd_kcontrol *kcontrol,
 			struct snd_ctl_elem_value *ucontrol)
 {
@@ -674,14 +675,17 @@ static int ospl2xx_rx_put_temp_cal(struct snd_kcontrol *kcontrol,
 }
 
 /* TX */
-/* AFE_PARAM_ID_ENABLE */
+/* PARAM_ID_OPALUM_TX_ENABLE*/
 static int ospl2xx_tx_enable_put(struct snd_kcontrol *kcontrol,
 			struct snd_ctl_elem_value *ucontrol)
 {
 	int enable = ucontrol->value.integer.value[0];
 
+	if (enable != 0 && enable != 1)
+		return 0;
+
 	ospl2xx_afe_set_single_param(
-		AFE_CUSTOM_OPALUM_TX_MODULE,
+		PARAM_ID_OPALUM_TX_ENABLE,
 		enable);
 
 	return 0;
@@ -691,7 +695,7 @@ static int ospl2xx_tx_enable_get(struct snd_kcontrol *kcontrol,
 {
 	mutex_lock(&mr_lock);
 	ospl2xx_afe_set_callback(ospl2xx_afe_callback);
-	ospl2xx_afe_get_param(AFE_CUSTOM_OPALUM_TX_MODULE);
+	ospl2xx_afe_get_param(PARAM_ID_OPALUM_TX_ENABLE);
 
 	ucontrol->value.integer.value[0] = afe_cb_payload32_data[0];
 	mutex_unlock(&mr_lock);
-- 
2.11.0

