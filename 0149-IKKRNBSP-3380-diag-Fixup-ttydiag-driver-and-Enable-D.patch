From 8d1bf4a91ece5366f27af6f0ff5ba9a31a8391bf Mon Sep 17 00:00:00 2001
From: Ravi Vembu <raviv@motorola.com>
Date: Wed, 8 Oct 2014 11:54:30 -0500
Subject: [PATCH 149/959] IKKRNBSP-3380: diag: Fixup ttydiag driver and Enable
 DIAG_OVER_TTY

Fix up the ttydiag driver to work with the rearchitected diag core.
Stub the usb_diag driver with tty diag API's when factory mode is
enabled. This is done for easy portability/upgrades/maintenance.
Enable DIAG_OVER_TTY to enable the ttydiag driver.

Change-Id: Ia3416e3230f2e0541195aac791b3efac30362016
Signed-off-by: Ravi Vembu <raviv@motorola.com>
Reviewed-on: http://gerrit.mot.com/677438
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
Reviewed-on: http://gerrit.mot.com/782996
SME-Granted: SME Approvals Granted
---
 arch/arm/configs/ext_config/moto-msm8916.config |  1 +
 arch/arm/mach-msm/include/mach/tty_diag.h       | 19 --------
 drivers/char/diag/Kconfig                       | 10 +++++
 drivers/tty/Makefile                            |  1 +
 drivers/tty/diag/tty_diag.c                     |  6 +--
 drivers/usb/gadget/f_diag.c                     | 52 +++++++++++++++++++++
 include/linux/usb/tty_diag.h                    | 60 +++++++++++++++++++++++++
 7 files changed, 125 insertions(+), 24 deletions(-)
 delete mode 100644 arch/arm/mach-msm/include/mach/tty_diag.h
 create mode 100644 include/linux/usb/tty_diag.h

diff --git a/arch/arm/configs/ext_config/moto-msm8916.config b/arch/arm/configs/ext_config/moto-msm8916.config
index b02abc6c7a3..fc88241834b 100644
--- a/arch/arm/configs/ext_config/moto-msm8916.config
+++ b/arch/arm/configs/ext_config/moto-msm8916.config
@@ -24,3 +24,4 @@ CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_TEST_REPORTING=y
 CONFIG_TOUCHSCREEN_SYNAPTICS_DSX_FW_UPDATE_MMI=y
 CONFIG_MOT_UTAG=y
 CONFIG_PROC_DEVICETREE=y
+CONFIG_DIAG_OVER_TTY=y
diff --git a/arch/arm/mach-msm/include/mach/tty_diag.h b/arch/arm/mach-msm/include/mach/tty_diag.h
deleted file mode 100644
index d88699f6e00..00000000000
--- a/arch/arm/mach-msm/include/mach/tty_diag.h
+++ /dev/null
@@ -1,19 +0,0 @@
-#ifndef _DRIVERS_TTY_DIAG_H_
-#define _DRIVERS_TTY_DIAG_H_
-
-#ifdef CONFIG_DIAG_OVER_USB
-#include <mach/usbdiag.h>
-#endif
-
-struct usb_diag_ch *tty_diag_channel_open(const char *name, void *priv,
-		void (*notify)(void *, unsigned, struct diag_request *));
-void tty_diag_channel_close(struct usb_diag_ch *diag_ch);
-int tty_diag_channel_read(struct usb_diag_ch *diag_ch,
-				struct diag_request *d_req);
-int tty_diag_channel_write(struct usb_diag_ch *diag_ch,
-				struct diag_request *d_req);
-void tty_diag_channel_abandon_request(void);
-int tty_diag_get_dbg_ftm_flag_value(void);
-int tty_diag_set_dbg_ftm_flag_value(int val);
-
-#endif /* _DRIVERS_TTY_DIAG_H_ */
diff --git a/drivers/char/diag/Kconfig b/drivers/char/diag/Kconfig
index 06425d8a0df..24e79f8f8fe 100644
--- a/drivers/char/diag/Kconfig
+++ b/drivers/char/diag/Kconfig
@@ -22,6 +22,16 @@ config DIAG_OVER_USB
 	 This feature helps segregate code required for DIAG traffic to go over USB.
 endmenu
 
+menu "DIAG traffic over TTY"
+
+config DIAG_OVER_TTY
+	bool "Enable DIAG traffic to go over a tty to userspace"
+	depends on ARCH_MSM && DIAG_OVER_USB
+	default n
+	help
+	 This feature helps segregate code required for DIAG traffic to go over a TTY to userspace.
+endmenu
+
 menu "HSIC/SMUX support for DIAG"
 
 config DIAGFWD_BRIDGE_CODE
diff --git a/drivers/tty/Makefile b/drivers/tty/Makefile
index 23de780eaf4..56e7966a47f 100644
--- a/drivers/tty/Makefile
+++ b/drivers/tty/Makefile
@@ -16,6 +16,7 @@ obj-$(CONFIG_R3964)		+= n_r3964.o
 obj-y				+= vt/
 obj-$(CONFIG_HVC_DRIVER)	+= hvc/
 obj-y				+= serial/
+obj-$(CONFIG_DIAG_OVER_TTY)    += diag/
 
 # tty drivers
 obj-$(CONFIG_AMIGA_BUILTIN_SERIAL) += amiserial.o
diff --git a/drivers/tty/diag/tty_diag.c b/drivers/tty/diag/tty_diag.c
index 44a1f6dd0b2..4fd798d31e6 100644
--- a/drivers/tty/diag/tty_diag.c
+++ b/drivers/tty/diag/tty_diag.c
@@ -9,7 +9,7 @@
 #include <linux/tty_driver.h>
 #include <linux/tty_flip.h>
 
-#include <mach/tty_diag.h>
+#include <linux/usb/tty_diag.h>
 
 #define DIAG_MAJOR 185
 #define DIAG_TTY_MINOR_COUNT 3
@@ -51,10 +51,6 @@ static int diag_tty_open(struct tty_struct *tty, struct file *f)
 	if (n < 0 || n >= DIAG_TTY_MINOR_COUNT)
 		return -ENODEV;
 
-	/* Diag kernel driver not ready */
-	if (!(legacy_ch.priv))
-		return -EAGAIN;
-
 	if (tty_data->open_count >= 1)
 		return -EBUSY;
 
diff --git a/drivers/usb/gadget/f_diag.c b/drivers/usb/gadget/f_diag.c
index a1b8912ca8e..096fbb9d8a4 100644
--- a/drivers/usb/gadget/f_diag.c
+++ b/drivers/usb/gadget/f_diag.c
@@ -27,6 +27,13 @@
 #include <linux/workqueue.h>
 #include <linux/debugfs.h>
 #include <linux/kmemleak.h>
+#ifdef CONFIG_DIAG_OVER_TTY
+#include <linux/usb/tty_diag.h>
+#include <linux/of.h>
+
+static bool tty_mode;
+module_param(tty_mode, bool, S_IRUGO);
+#endif
 
 static DEFINE_SPINLOCK(ch_lock);
 static LIST_HEAD(usb_diag_ch_list);
@@ -174,6 +181,23 @@ static inline struct diag_context *func_to_diag(struct usb_function *f)
 	return container_of(f, struct diag_context, function);
 }
 
+#ifdef CONFIG_DIAG_OVER_TTY
+static bool factory_cable_present(void)
+{
+	struct device_node *np;
+	bool fact_cable;
+
+	np = of_find_node_by_path("/chosen");
+	fact_cable = of_property_read_bool(np, "mmi,factory-cable");
+	of_node_put(np);
+
+	if (!np || !fact_cable)
+		return false;
+
+	return true;
+}
+#endif
+
 /* Called with ctxt->lock held; i.e. only use with kref_put_spinlock_irqsave */
 static void diag_context_release(struct kref *kref)
 {
@@ -301,6 +325,17 @@ struct usb_diag_ch *usb_diag_open(const char *name, void *priv,
 	unsigned long flags;
 	int found = 0;
 
+#ifdef CONFIG_DIAG_OVER_TTY
+	static bool init;
+
+	if (!init) {
+		init = true;
+		tty_mode = factory_cable_present();
+	}
+
+	if (tty_mode)
+		return tty_diag_channel_open(name, priv, notify);
+#endif
 	spin_lock_irqsave(&ch_lock, flags);
 	/* Check if we already have a channel with this name */
 	list_for_each_entry(ch, &usb_diag_ch_list, list) {
@@ -341,6 +376,10 @@ void usb_diag_close(struct usb_diag_ch *ch)
 	struct diag_context *dev = NULL;
 	unsigned long flags;
 
+#ifdef CONFIG_DIAG_OVER_TTY
+	if (tty_mode)
+		return tty_diag_channel_close(ch);
+#endif
 	spin_lock_irqsave(&ch_lock, flags);
 	ch->priv = NULL;
 	ch->notify = NULL;
@@ -391,6 +430,10 @@ int usb_diag_alloc_req(struct usb_diag_ch *ch, int n_write, int n_read)
 	int i;
 	unsigned long flags;
 
+#ifdef CONFIG_DIAG_OVER_TTY
+	if (tty_mode)
+		return 0;
+#endif
 	if (!ctxt)
 		return -ENODEV;
 
@@ -466,6 +509,10 @@ int usb_diag_read(struct usb_diag_ch *ch, struct diag_request *d_req)
 	struct usb_ep *out;
 	static DEFINE_RATELIMIT_STATE(rl, 10*HZ, 1);
 
+#ifdef CONFIG_DIAG_OVER_TTY
+	if (tty_mode)
+		return tty_diag_channel_read(ch, d_req);
+#endif
 	if (!ctxt)
 		return -ENODEV;
 
@@ -543,6 +590,11 @@ int usb_diag_write(struct usb_diag_ch *ch, struct diag_request *d_req)
 	struct usb_ep *in;
 	static DEFINE_RATELIMIT_STATE(rl, 10*HZ, 1);
 
+#ifdef CONFIG_DIAG_OVER_TTY
+	if (tty_mode)
+		return tty_diag_channel_write(ch, d_req);
+#endif
+
 	if (!ctxt)
 		return -ENODEV;
 
diff --git a/include/linux/usb/tty_diag.h b/include/linux/usb/tty_diag.h
new file mode 100644
index 00000000000..665f77acf99
--- /dev/null
+++ b/include/linux/usb/tty_diag.h
@@ -0,0 +1,60 @@
+#ifndef _DRIVERS_TTY_DIAG_H_
+#define _DRIVERS_TTY_DIAG_H_
+
+#ifdef CONFIG_DIAG_OVER_USB
+#include <linux/usb/usbdiag.h>
+#endif
+
+#ifdef CONFIG_DIAG_OVER_TTY
+struct usb_diag_ch *tty_diag_channel_open(const char *name, void *priv,
+		void (*notify)(void *, unsigned, struct diag_request *));
+void tty_diag_channel_close(struct usb_diag_ch *diag_ch);
+int tty_diag_channel_read(struct usb_diag_ch *diag_ch,
+				struct diag_request *d_req);
+int tty_diag_channel_write(struct usb_diag_ch *diag_ch,
+				struct diag_request *d_req);
+void tty_diag_channel_abandon_request(void);
+int tty_diag_get_dbg_ftm_flag_value(void);
+int tty_diag_set_dbg_ftm_flag_value(int val);
+#else
+static inline struct usb_diag_ch *tty_diag_channel_open(const char *name,
+		void *priv,
+		void (*notify)(void *, unsigned, struct diag_request *))
+{
+	return ERR_PTR(-ENODEV);
+}
+
+static inline void tty_diag_channel_close(struct usb_diag_ch *diag_ch)
+{
+}
+
+static inline int tty_diag_channel_read(struct usb_diag_ch *diag_ch,
+				struct diag_request *d_req)
+{
+	return -ENODEV;
+}
+
+static inline int tty_diag_channel_write(struct usb_diag_ch *diag_ch,
+				struct diag_request *d_req)
+{
+	return -ENODEV;
+}
+
+static inline void tty_diag_channel_abandon_request(void)
+{
+	return -ENODEV;
+}
+
+static inline int tty_diag_get_dbg_ftm_flag_value(void)
+{
+	return -ENODEV;
+}
+
+static inline int tty_diag_set_dbg_ftm_flag_value(int val)
+{
+	return -ENODEV;
+}
+
+#endif
+
+#endif /* _DRIVERS_TTY_DIAG_H_ */
-- 
2.11.0

