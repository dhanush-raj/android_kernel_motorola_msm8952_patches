From fc90c7e76f270d0e6edc40297bd4bf44ffdefa70 Mon Sep 17 00:00:00 2001
From: "Russ W. Knize" <Russ.Knize@motorola.com>
Date: Thu, 30 Jul 2015 13:53:04 -0500
Subject: [PATCH 351/959] IKSWM-449: esdfs: add support for multiple storage
 views

Android M "reinvented" storage emulation again.  Rather than enforce
synthetic read/write permissions based on the GID found in the package
list, storage emulation is mounted 3 different ways and zygote binds
each application to the correct one.  This takes some of the complexity
out of the emulation driver.

To keep backwards compatibility with previous versions of Android, these
new behaviors are encapsulated in two new modes set via the "derive="
option:

- multi: multi-user support for internal (or adopted) emulation
- public: support for normal external SD cards

The upper layer permissions are then set for each storage view using the
existing "upper=" option.

Change-Id: Ia9fc4f049429b762192f3ea6b5d5bc25eecfc390
Signed-off-by: Russ Knize <Russ.Knize@motorola.com>
Reviewed-on: http://gerrit.mot.com/772051
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Submit-Approved: Jira Key <jirakey@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
---
 fs/esdfs/derive.c | 83 +++++++++++++++++++++++++++++++++++++++++--------------
 fs/esdfs/esdfs.h  |  8 +++++-
 fs/esdfs/main.c   | 60 +++++++++++++++++++++++++++++++---------
 fs/esdfs/super.c  | 13 +++++++--
 4 files changed, 128 insertions(+), 36 deletions(-)

diff --git a/fs/esdfs/derive.c b/fs/esdfs/derive.c
index a825bdacbc6..cfa430118b6 100644
--- a/fs/esdfs/derive.c
+++ b/fs/esdfs/derive.c
@@ -328,8 +328,8 @@ void esdfs_derive_perms(struct dentry *dentry)
 					"media",
 					dentry->d_name.len))
 			inode_i->tree = ESDFS_TREE_ANDROID_MEDIA;
-		else if (test_opt(ESDFS_SB(dentry->d_sb), DERIVE_UNIFIED) &&
-			   !strncasecmp(dentry->d_name.name,
+		else if (ESDFS_RESTRICT_PERMS(ESDFS_SB(dentry->d_sb)) &&
+			 !strncasecmp(dentry->d_name.name,
 					"user",
 					dentry->d_name.len))
 			inode_i->tree = ESDFS_TREE_ANDROID_USER;
@@ -365,44 +365,70 @@ void esdfs_set_derived_perms(struct inode *inode)
 {
 	struct esdfs_sb_info *sbi = ESDFS_SB(inode->i_sb);
 	struct esdfs_inode_info *inode_i = ESDFS_I(inode);
+	gid_t gid = sbi->upper_perms.gid;
 
 	inode->i_uid = sbi->upper_perms.uid;
-	inode->i_gid = sbi->upper_perms.gid;
 	inode->i_mode &= S_IFMT;
+	if (ESDFS_RESTRICT_PERMS(sbi))
+		inode->i_gid = gid;
+	else {
+		if (gid == AID_SDCARD_RW)
+			inode->i_gid = AID_SDCARD_RW;
+		else
+			inode->i_gid = inode_i->userid * PKG_APPID_PER_USER +
+				       (gid % PKG_APPID_PER_USER);
+		inode->i_mode |= sbi->upper_perms.dmask;
+	}
 
 	switch (inode_i->tree) {
 	case ESDFS_TREE_ROOT_LEGACY:
-		inode->i_mode |= sbi->upper_perms.dmask;
+		if (ESDFS_RESTRICT_PERMS(sbi))
+			inode->i_mode |= sbi->upper_perms.dmask;
+		else if (test_opt(sbi, DERIVE_MULTI)) {
+			inode->i_mode &= S_IFMT;
+			inode->i_mode |= 0711;
+		}
 		break;
 
 	case ESDFS_TREE_NONE:
 	case ESDFS_TREE_ROOT:
-		inode->i_gid = AID_SDCARD_R;
-		inode->i_mode |= sbi->upper_perms.dmask;
+		if (ESDFS_RESTRICT_PERMS(sbi)) {
+			inode->i_gid = AID_SDCARD_R;
+			inode->i_mode |= sbi->upper_perms.dmask;
+		} else if (test_opt(sbi, DERIVE_PUBLIC)) {
+			inode->i_mode &= S_IFMT;
+			inode->i_mode |= 0771;
+		}
 		break;
 
 	case ESDFS_TREE_MEDIA:
-		inode->i_gid = AID_SDCARD_R;
-		inode->i_mode |= 0770;
+		if (ESDFS_RESTRICT_PERMS(sbi)) {
+			inode->i_gid = AID_SDCARD_R;
+			inode->i_mode |= 0770;
+		}
 		break;
 
 	case ESDFS_TREE_ANDROID:
 	case ESDFS_TREE_ANDROID_DATA:
 	case ESDFS_TREE_ANDROID_OBB:
 	case ESDFS_TREE_ANDROID_MEDIA:
-		inode->i_mode |= 0771;
+		if (ESDFS_RESTRICT_PERMS(sbi))
+			inode->i_mode |= 0771;
 		break;
 
 	case ESDFS_TREE_ANDROID_APP:
 		if (inode_i->appid)
 			inode->i_uid = inode_i->userid * PKG_APPID_PER_USER +
 				       (inode_i->appid % PKG_APPID_PER_USER);
-		inode->i_mode |= 0770;
+		if (ESDFS_RESTRICT_PERMS(sbi))
+			inode->i_mode |= 0770;
 		break;
 
 	case ESDFS_TREE_ANDROID_USER:
-		inode->i_gid = AID_SDCARD_ALL;
-		inode->i_mode |= 0770;
+		if (ESDFS_RESTRICT_PERMS(sbi)) {
+			inode->i_gid = AID_SDCARD_ALL;
+			inode->i_mode |= 0770;
+		}
 		break;
 	}
 
@@ -497,6 +523,19 @@ int esdfs_check_derived_permission(struct inode *inode, int mask)
 	uid_t appid;
 	unsigned access = 0;
 
+	/*
+	 * If we don't need to restrict access based on app GIDs or/and confine
+	 * writes to outside of the Android/... tree, we can skip some or all
+	 * of this complexity.
+	 */
+	if (!ESDFS_RESTRICT_PERMS(ESDFS_SB(inode->i_sb))) {
+		/* If we don't need to confine, we're done. */
+		if (!test_opt(ESDFS_SB(inode->i_sb), DERIVE_CONFINE))
+			return 0;
+		/* If we do, we can still skip the hash lookup. */
+		access = HAS_SDCARD_RW;
+	}
+
 	cred = current_cred();
 	appid = cred->uid % PKG_APPID_PER_USER;
 
@@ -510,16 +549,20 @@ int esdfs_check_derived_permission(struct inode *inode, int mask)
 	 * know how to use extended attributes, we have to double-check write
 	 * requests against the list of apps that have been granted sdcard_rw.
 	 */
-	mutex_lock(&package_list_lock);
-	hash_for_each_possible(access_list_hash, package, access_node, appid) {
-		if (package->appid == appid) {
-			pr_debug("esdfs: %s: found appid %u, access: %u\n",
-				__func__, package->appid, package->access);
-			access = package->access;
-			break;
+	if (!access) {
+		mutex_lock(&package_list_lock);
+		hash_for_each_possible(access_list_hash, package,
+				       access_node, appid) {
+			if (package->appid == appid) {
+				pr_debug("esdfs: %s: found appid %u, access: %u\n",
+					__func__, package->appid,
+					package->access);
+				access = package->access;
+				break;
+			}
 		}
+		mutex_unlock(&package_list_lock);
 	}
-	mutex_unlock(&package_list_lock);
 
 	/*
 	 * Grant access to media_rw holders (they can access the source anyway).
diff --git a/fs/esdfs/esdfs.h b/fs/esdfs/esdfs.h
index ba8b42592f1..fd2e4d6158e 100644
--- a/fs/esdfs/esdfs.h
+++ b/fs/esdfs/esdfs.h
@@ -41,13 +41,19 @@
 /* mount options */
 #define ESDFS_MOUNT_DERIVE_LEGACY	0x00000001
 #define ESDFS_MOUNT_DERIVE_UNIFIED	0x00000002
+#define ESDFS_MOUNT_DERIVE_MULTI	0x00000004
+#define ESDFS_MOUNT_DERIVE_PUBLIC	0x00000008
+#define ESDFS_MOUNT_DERIVE_CONFINE	0x00000010
 
 #define clear_opt(sbi, option)	(sbi->options &= ~ESDFS_MOUNT_##option)
 #define set_opt(sbi, option)	(sbi->options |= ESDFS_MOUNT_##option)
 #define test_opt(sbi, option)	(sbi->options & ESDFS_MOUNT_##option)
 
 #define ESDFS_DERIVE_PERMS(sbi)	(test_opt(sbi, DERIVE_UNIFIED) || \
-					 test_opt(sbi, DERIVE_LEGACY))
+				 test_opt(sbi, DERIVE_LEGACY))
+#define ESDFS_RESTRICT_PERMS(sbi) (ESDFS_DERIVE_PERMS(sbi) && \
+				   !test_opt(sbi, DERIVE_PUBLIC) && \
+				   !test_opt(sbi, DERIVE_MULTI))
 
 /* from android_filesystem_config.h */
 #define AID_ROOT             0
diff --git a/fs/esdfs/main.c b/fs/esdfs/main.c
index 30d7c36f472..e91d5255353 100644
--- a/fs/esdfs/main.c
+++ b/fs/esdfs/main.c
@@ -24,6 +24,10 @@ enum {
 	Opt_derive_none,
 	Opt_derive_legacy,
 	Opt_derive_unified,
+	Opt_derive_multi,
+	Opt_derive_public,
+	Opt_confine,
+	Opt_noconfine,
 	Opt_err
 };
 
@@ -33,6 +37,10 @@ static match_table_t esdfs_tokens = {
 	{Opt_derive_none, "derive=none"},
 	{Opt_derive_legacy, "derive=legacy"},
 	{Opt_derive_unified, "derive=unified"},
+	{Opt_derive_multi, "derive=multi"},
+	{Opt_derive_public, "derive=public"},
+	{Opt_confine, "confine"},
+	{Opt_noconfine, "noconfine"},
 	{Opt_err, NULL},
 };
 
@@ -80,7 +88,7 @@ static int parse_perms(struct esdfs_perms *perms, char *args)
 	sepres = strsep(&sep, ":");
 	if (!sep)
 		return -EINVAL;
-	ret = kstrtou16(sepres, 0, &perms->fmask);
+	ret = kstrtou16(sepres, 8, &perms->fmask);
 	if (ret)
 		return ret;
 
@@ -142,14 +150,39 @@ static int parse_options(struct super_block *sb, char *options)
 		case Opt_derive_none:
 			clear_opt(sbi, DERIVE_LEGACY);
 			clear_opt(sbi, DERIVE_UNIFIED);
+			clear_opt(sbi, DERIVE_MULTI);
+			clear_opt(sbi, DERIVE_PUBLIC);
 			break;
 		case Opt_derive_legacy:
 			set_opt(sbi, DERIVE_LEGACY);
 			clear_opt(sbi, DERIVE_UNIFIED);
+			clear_opt(sbi, DERIVE_MULTI);
+			clear_opt(sbi, DERIVE_PUBLIC);
 			break;
 		case Opt_derive_unified:
 			clear_opt(sbi, DERIVE_LEGACY);
 			set_opt(sbi, DERIVE_UNIFIED);
+			clear_opt(sbi, DERIVE_MULTI);
+			clear_opt(sbi, DERIVE_PUBLIC);
+			set_opt(sbi, DERIVE_CONFINE);	/* confine by default */
+			break;
+		case Opt_derive_multi:
+			set_opt(sbi, DERIVE_LEGACY);
+			clear_opt(sbi, DERIVE_UNIFIED);
+			set_opt(sbi, DERIVE_MULTI);
+			clear_opt(sbi, DERIVE_PUBLIC);
+			break;
+		case Opt_derive_public:
+			clear_opt(sbi, DERIVE_LEGACY);
+			set_opt(sbi, DERIVE_UNIFIED);
+			clear_opt(sbi, DERIVE_MULTI);
+			set_opt(sbi, DERIVE_PUBLIC);
+			break;
+		case Opt_confine:
+			set_opt(sbi, DERIVE_CONFINE);
+			break;
+		case Opt_noconfine:
+			clear_opt(sbi, DERIVE_CONFINE);
 			break;
 		default:
 			esdfs_msg(sb, KERN_ERR, "unrecognized mount option \"%s\" or missing value\n",
@@ -201,9 +234,14 @@ static int esdfs_read_super(struct super_block *sb, const char *dev_name,
 	memcpy(&sbi->lower_perms,
 	       &esdfs_perms_table[ESDFS_PERMS_LOWER_DEFAULT],
 	       sizeof(struct esdfs_perms));
-	memcpy(&sbi->upper_perms,
-	       &esdfs_perms_table[ESDFS_PERMS_UPPER_LEGACY],
-	       sizeof(struct esdfs_perms));
+	if (ESDFS_DERIVE_PERMS(sbi))
+		memcpy(&sbi->upper_perms,
+		       &esdfs_perms_table[ESDFS_PERMS_UPPER_DERIVED],
+		       sizeof(struct esdfs_perms));
+	else
+		memcpy(&sbi->upper_perms,
+		       &esdfs_perms_table[ESDFS_PERMS_UPPER_LEGACY],
+		       sizeof(struct esdfs_perms));
 	err = parse_options(sb, (char *)raw_data);
 	if (err)
 		goto out_free;
@@ -265,16 +303,12 @@ static int esdfs_read_super(struct super_block *sb, const char *dev_name,
 	if (!ESDFS_DERIVE_PERMS(sbi))
 		goto out;
 
-	/* let user know that we ignore this option in derived mode */
-	if (memcmp(&sbi->upper_perms,
-		   &esdfs_perms_table[ESDFS_PERMS_UPPER_LEGACY],
+	/* let user know that we ignore this option in older derived modes */
+	if (ESDFS_RESTRICT_PERMS(sbi) &&
+	    memcmp(&sbi->upper_perms,
+		   &esdfs_perms_table[ESDFS_PERMS_UPPER_DERIVED],
 		   sizeof(struct esdfs_perms)))
-		esdfs_msg(sb, KERN_WARNING, "'upper' mount option ignored in derived mode\n");
-
-	/* all derived modes start with the same, basic root */
-	memcpy(&sbi->upper_perms,
-	       &esdfs_perms_table[ESDFS_PERMS_UPPER_DERIVED],
-	       sizeof(struct esdfs_perms));
+		esdfs_msg(sb, KERN_WARNING, "'upper' mount option ignored in this derived mode\n");
 
 	/*
 	 * In Android 3.0 all user conent in the emulated storage tree was
diff --git a/fs/esdfs/super.c b/fs/esdfs/super.c
index 01c23534518..5b9dacbe5fd 100644
--- a/fs/esdfs/super.c
+++ b/fs/esdfs/super.c
@@ -190,13 +190,22 @@ static int esdfs_show_options(struct seq_file *seq, struct dentry *root)
 				sbi->upper_perms.fmask,
 				sbi->upper_perms.dmask);
 
-	if (test_opt(sbi, DERIVE_LEGACY))
-		seq_puts(seq, ",derive=legacy");
+	if (test_opt(sbi, DERIVE_PUBLIC))
+		seq_puts(seq, ",derive=public");
+	else if (test_opt(sbi, DERIVE_MULTI))
+		seq_puts(seq, ",derive=multi");
 	else if (test_opt(sbi, DERIVE_UNIFIED))
 		seq_puts(seq, ",derive=unified");
+	else if (test_opt(sbi, DERIVE_LEGACY))
+		seq_puts(seq, ",derive=legacy");
 	else
 		seq_puts(seq, ",derive=none");
 
+	if (test_opt(sbi, DERIVE_CONFINE))
+		seq_puts(seq, ",confine");
+	else
+		seq_puts(seq, ",noconfine");
+
 	return 0;
 }
 
-- 
2.11.0

