From 20d7b75d184b6fa67fc39b6f528d65cdcd6aca10 Mon Sep 17 00:00:00 2001
From: Yuanyuan Zhong <zyy@motorola.com>
Date: Fri, 21 Nov 2014 15:16:19 -0800
Subject: [PATCH 330/959] IKSWM-5783 firmware: qcom: tz_log: print after
 watchdog reset

There are multiple kinds of fatal errors in TZ can trigger
watchdog reset. From kernel log we can't know the watchdog
reset reason.

Add code to allow backing up tzlog after watchdog reset.
Then let kernel print it out.

Change-Id: I1d858298de8567de1ce758d445515fbf88bc0e46
Signed-off-by: Hong-Mei Li <a21834@motorola.com>
Reviewed-on: http://gerrit.mot.com/722586
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Reviewed-by: Christopher Fries <cfries@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
Reviewed-on: http://gerrit.mot.com/787911
Reviewed-by: Zhi-Ming Yuan <a14194@motorola.com>
---
 drivers/firmware/qcom/Kconfig  |  12 +++
 drivers/firmware/qcom/tz_log.c | 195 +++++++++++++++++++++++++++++++++++++++++
 include/soc/qcom/memory_dump.h |   2 +
 3 files changed, 209 insertions(+)

diff --git a/drivers/firmware/qcom/Kconfig b/drivers/firmware/qcom/Kconfig
index 61c797430bd..a42f2d0efaf 100644
--- a/drivers/firmware/qcom/Kconfig
+++ b/drivers/firmware/qcom/Kconfig
@@ -5,3 +5,15 @@ config MSM_TZ_LOG
           This option enables a driver with a debugfs interface for messages
           produced by the Secure code (Trust zone). These messages provide
           diagnostic information about TZ operation.
+
+config MSM_TZ_LOG_WDOG_DUMP
+	bool "Dump TZ Log after watchdog reset"
+	depends on MSM_TZ_LOG
+	depends on PSTORE_RAM_ANNOTATION_APPEND
+	default n
+	help
+	  There are multiple kinds of fatal errors in TZ can trigger watchdog
+	  reset. From kernel log there is no evidence to tell what's the reset
+	  reason. After enabling this option, kernel will reserve a buffer
+	  to get TZ log backup. After a watchdog reset, kernel can print
+	  the log out.
diff --git a/drivers/firmware/qcom/tz_log.c b/drivers/firmware/qcom/tz_log.c
index 3804be59dea..cdaef205585 100644
--- a/drivers/firmware/qcom/tz_log.c
+++ b/drivers/firmware/qcom/tz_log.c
@@ -22,6 +22,16 @@
 #include <linux/string.h>
 #include <linux/types.h>
 #include <linux/uaccess.h>
+#ifdef CONFIG_MSM_TZ_LOG_WDOG_DUMP
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/ctype.h>
+#include <linux/dma-contiguous.h>
+#include <linux/dma-mapping.h>
+#include <linux/pstore_ram.h>
+#include <soc/qcom/memory_dump.h>
+#include <soc/qcom/bootinfo.h>
+#endif /* CONFIG_MSM_TZ_LOG_WDOG_DUMP */
 #include <soc/qcom/scm.h>
 #include <soc/qcom/qseecomi.h>
 
@@ -709,6 +719,190 @@ static void tzdbgfs_exit(struct platform_device *pdev)
 }
 }
 
+#ifdef CONFIG_MSM_TZ_LOG_WDOG_DUMP
+
+#define MSMWDTD(fmt, args...) persistent_ram_annotation_append(fmt, ##args)
+
+#define MSMWDT_ERR(fmt, args...) do { \
+	pr_err("TzLog: "fmt, ##args); \
+	MSMWDTD("TzLog: "fmt, ##args); \
+} while (0)
+
+#define MSMWDTD_IFWDOG(fmt, args...) do { \
+	if (bi_powerup_reason() == PU_REASON_WDOG_AP_RESET) \
+		MSMWDTD(fmt, ##args); \
+} while (0)
+
+static void tzlog_bck_show_boot_info(struct tzdbg_t *diag_buf)
+{
+	int cpu;
+	struct tzdbg_boot_info_t *ptr;
+	struct tzdbg_boot_info2_t *ptr2;
+	int v2 = 0;
+
+	if ((tzdbg.diag_buf->reset_info_off - tzdbg.diag_buf->boot_info_off) ==
+			(sizeof(*ptr2) * tzdbg.diag_buf->cpu_count))
+		v2 = 1;
+	ptr = (struct tzdbg_boot_info_t *)((u8 *)diag_buf +
+			diag_buf->boot_info_off);
+	ptr2 = (struct tzdbg_boot_info2_t *)ptr;
+	MSMWDTD("\n--- TZ Power Collapse Counters\n");
+	MSMWDTD("     | WarmEntry : WarmExit :  PCEntry :");
+	MSMWDTD("   PCExit : JumpAddr |\n");
+	for (cpu = 0; cpu < tzdbg.diag_buf->cpu_count; cpu++) {
+		int power_collapsed;
+		if (v2)
+			power_collapsed = ptr2->wb_entry_cnt +
+				ptr2->pc_exit_cnt - ptr2->pc_entry_cnt;
+		else
+			power_collapsed = ptr->wb_entry_cnt +
+				ptr->pc_exit_cnt - ptr->pc_entry_cnt;
+		if (cpu)
+			power_collapsed--;
+		MSMWDTD("CPU%d |  %8x : %8x : %8x : %8x : %8lx | %sPC\n",
+			cpu, (v2 ? ptr2->wb_entry_cnt : ptr->wb_entry_cnt),
+			(v2 ? ptr2->wb_exit_cnt : ptr->wb_exit_cnt),
+			(v2 ? ptr2->pc_entry_cnt : ptr->pc_entry_cnt),
+			(v2 ? ptr2->pc_exit_cnt : ptr->pc_exit_cnt),
+			(unsigned long)(v2 ? ptr2->warm_jmp_addr :
+					ptr->warm_jmp_addr),
+			power_collapsed ? "IN-" : "NOT-");
+		ptr++;
+		ptr2++;
+	}
+}
+
+static void tzlog_bck_show_log(struct tzdbg_t *diag_buf)
+{
+	struct tzdbg_log_t *log_ptr;
+	const char *log_buf, *p, *start;
+
+	if (TZBSP_DIAG_MAJOR_VERSION_LEGACY >=
+				(tzdbg.diag_buf->version >> 16))
+		return;
+
+	log_buf = (const char *)diag_buf + diag_buf->ring_off;
+	log_ptr = (struct tzdbg_log_t *)(log_buf -
+				offsetof(struct tzdbg_log_t, log_buf));
+
+	if (log_ptr->log_pos.offset >= diag_buf->ring_len)
+		return;
+	MSMWDTD("--- TZ Log start ---\n");
+	if (log_ptr->log_pos.wrap) {
+		for (start = log_buf + log_ptr->log_pos.offset, p = start;
+				p < (log_buf + diag_buf->ring_len); p++) {
+			if (isprint(*p))
+				MSMWDTD("%c", *p);
+			else if ((p > start) && isprint(*(p-1)))
+				MSMWDTD("\n");
+		}
+	}
+	for (start = log_buf, p = start;
+			p < (log_buf + log_ptr->log_pos.offset); p++) {
+		if (isprint(*p))
+			MSMWDTD("%c", *p);
+		else if ((p > start) && isprint(*(p-1)))
+			MSMWDTD("\n");
+	}
+	MSMWDTD("\n--- TZ Log end ---\n");
+}
+
+static void tzlog_bck_show(struct tzdbg_t *diag_buf)
+{
+	memcpy_fromio((void *)tzdbg.diag_buf, tzdbg.virt_iobase,
+						debug_rw_buf_size);
+	if (memcmp(diag_buf, tzdbg.diag_buf, tzdbg.diag_buf->vmid_info_off)) {
+		MSMWDTD_IFWDOG("TzLog: No valid backup.\n");
+		goto reset;
+	}
+	tzlog_bck_show_boot_info(diag_buf);
+	tzlog_bck_show_log(diag_buf);
+reset:
+	memset_io(diag_buf, 0, debug_rw_buf_size);
+}
+
+static void tzlog_bck_check(struct platform_device *pdev)
+{
+	struct device_node *pnode;
+	struct tzdbg_t *diag_bck_vaddr;
+	phys_addr_t diag_bck_paddr;
+	size_t diag_bck_size;
+
+	pnode = of_parse_phandle(pdev->dev.of_node,
+			"linux,contiguous-region", 0);
+	if (!pnode) {
+		MSMWDT_ERR("Unable to find contiguous-region\n");
+		goto no_reservation;
+	}
+	if (!of_get_address(pnode, 0, NULL, NULL)) {
+		of_node_put(pnode);
+		MSMWDT_ERR("Addr not found for contiguous-region\n");
+		goto no_reservation;
+	}
+	of_node_put(pnode);
+
+	diag_bck_paddr = cma_get_base(&pdev->dev);
+	diag_bck_size = cma_get_size(&pdev->dev);
+
+	if (diag_bck_size < debug_rw_buf_size) {
+		MSMWDT_ERR("Mem reserve too small %zx/%xu\n",
+				diag_bck_size, debug_rw_buf_size);
+		goto no_reservation;
+	}
+
+	diag_bck_size = debug_rw_buf_size;
+	diag_bck_vaddr = dma_remap(&pdev->dev, NULL, diag_bck_paddr,
+					diag_bck_size, NULL);
+	if (diag_bck_vaddr) {
+		tzlog_bck_show(diag_bck_vaddr);
+		dma_unremap(&pdev->dev, diag_bck_vaddr, diag_bck_size);
+	} else {
+		MSMWDT_ERR("Cannot remap buffer %pa size %zx\n",
+					&diag_bck_paddr, diag_bck_size);
+	}
+
+	if (MSM_DUMP_MAJOR(msm_dump_table_version()) == 1) {
+		struct msm_client_dump dump_entry;
+
+		dump_entry.id = MSM_TZ_LOG;
+		dump_entry.start_addr = diag_bck_paddr;
+		dump_entry.end_addr = diag_bck_paddr + diag_bck_size;
+		if (msm_dump_tbl_register(&dump_entry))
+			MSMWDT_ERR("Cannot register buffer: %pa\n",
+					&diag_bck_paddr);
+	} else {
+		struct msm_dump_entry dump_entry;
+		struct msm_dump_data *tz_dump_data;
+		int ret;
+
+		tz_dump_data = kzalloc(sizeof(struct msm_dump_data),
+						GFP_KERNEL);
+		if (!tz_dump_data) {
+			MSMWDT_ERR("Cannot alloc dump data structure.\n");
+			return;
+		}
+		tz_dump_data->addr = diag_bck_paddr;
+		tz_dump_data->len = diag_bck_size;
+		dump_entry.id = MSM_DUMP_DATA_TZ_LOG;
+		dump_entry.addr = virt_to_phys(tz_dump_data);
+		ret = msm_dump_data_register(MSM_DUMP_TABLE_APPS, &dump_entry);
+		if (ret) {
+			MSMWDT_ERR("Registering dump data failed.\n");
+			kfree(tz_dump_data);
+		}
+	}
+no_reservation:
+	return;
+}
+
+#else
+
+static inline void tzlog_bck_check(struct platform_device *pdev)
+{
+}
+
+#endif /* CONFIG_MSM_TZ_LOG_WDOG_DUMP */
+
 /*
  * Driver functions
  */
@@ -797,6 +991,7 @@ static int tz_log_probe(struct platform_device *pdev)
 		goto err;
 
 	tzdbg_register_qsee_log_buf();
+	tzlog_bck_check(pdev);
 	return 0;
 err:
 	kfree(tzdbg.diag_buf);
diff --git a/include/soc/qcom/memory_dump.h b/include/soc/qcom/memory_dump.h
index afe6540d82b..2da5a471437 100644
--- a/include/soc/qcom/memory_dump.h
+++ b/include/soc/qcom/memory_dump.h
@@ -29,6 +29,7 @@ enum dump_client_type {
 	MSM_TMC1_REG, /* TMC_ETF */
 	MSM_LOG_BUF,
 	MSM_LOG_BUF_FIRST_IDX,
+	MSM_TZ_LOG,
 	MAX_NUM_CLIENTS,
 };
 
@@ -85,6 +86,7 @@ enum msm_dump_data_ids {
 	MSM_DUMP_DATA_TMC_REG = 0x100,
 	MSM_DUMP_DATA_LOG_BUF = 0x110,
 	MSM_DUMP_DATA_LOG_BUF_FIRST_IDX = 0x111,
+	MSM_DUMP_DATA_TZ_LOG = 0x11F,
 	MSM_DUMP_DATA_L2_TLB = 0x120,
 	MSM_DUMP_DATA_MAX = MAX_NUM_ENTRIES,
 };
-- 
2.11.0

