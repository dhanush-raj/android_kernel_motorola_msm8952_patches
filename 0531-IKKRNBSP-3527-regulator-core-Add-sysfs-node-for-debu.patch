From f422a6aa6ed624a713f508e5dd3481e78debd46d Mon Sep 17 00:00:00 2001
From: yangjq <yangjq@lenovo.com>
Date: Tue, 17 Nov 2015 17:41:56 +0800
Subject: [PATCH 531/959] IKKRNBSP-3527 regulator: core: Add sysfs node for
 debug

Add sysfs node /sys/private/vreg

Change-Id: I050ac00b3437765bc39bcad64fcf13f07f8708da
Signed-off-by: yangjq <yangjq@lenovo.com>
Reviewed-on: http://gerrit.mot.com/800585
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Ravi Chebolu <arc095@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/regulator/core.c | 117 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 117 insertions(+)

diff --git a/drivers/regulator/core.c b/drivers/regulator/core.c
index 3d34e8b20a4..30421e09784 100644
--- a/drivers/regulator/core.c
+++ b/drivers/regulator/core.c
@@ -4271,6 +4271,123 @@ unlock:
 }
 EXPORT_SYMBOL_GPL(regulator_suspend_finish);
 
+/* Add for vreg debug */
+#define VREG_NUM_MAX 100
+
+int vreg_dump_info(char *buf)
+{
+	char *p = buf;
+	struct regulator_dev *rdev;
+	unsigned on, mv;
+	int id;
+
+	mutex_lock(&regulator_list_mutex);
+
+	id = 0;
+	list_for_each_entry(rdev, &regulator_list, list) {
+		struct regulator_ops *ops = rdev->desc->ops;
+
+		p += snprintf(p, PAGE_SIZE, "[%2d]%10s: ",
+			id++, rdev->desc->name);
+
+		on = mv = 0;
+		mutex_lock(&rdev->mutex);
+
+		if (ops->is_enabled)
+			on = ops->is_enabled(rdev);
+		if (ops->get_voltage)
+			mv = ops->get_voltage(rdev) / 1000;
+
+		mutex_unlock(&rdev->mutex);
+
+		p += snprintf(p, PAGE_SIZE, "%s ", on ? "on " : "off");
+		p += snprintf(p, PAGE_SIZE, "%4d mv ", mv);
+		p += snprintf(p, PAGE_SIZE, "\n");
+	}
+
+	mutex_unlock(&regulator_list_mutex);
+
+	return p - buf;
+}
+
+
+/* save vreg config before sleep */
+static unsigned before_sleep_fetched;
+static unsigned before_sleep_configs[VREG_NUM_MAX];
+void vreg_before_sleep_save_configs(void)
+{
+	struct regulator_dev *rdev;
+	unsigned on, mv;
+	int id;
+
+	/* only save vreg configs when it has been fetched */
+	if (!before_sleep_fetched)
+		return;
+
+	pr_debug("%s(), before_sleep_fetched=%d\n",
+		__func__, before_sleep_fetched);
+	before_sleep_fetched = false;
+
+	mutex_lock(&regulator_list_mutex);
+
+	id = 0;
+	list_for_each_entry(rdev, &regulator_list, list) {
+		struct regulator_ops *ops = rdev->desc->ops;
+
+		on = mv = 0;
+		mutex_lock(&rdev->mutex);
+
+		if (ops->is_enabled)
+			on = ops->is_enabled(rdev);
+		if (ops->get_voltage)
+			mv = ops->get_voltage(rdev) / 1000;
+
+		mutex_unlock(&rdev->mutex);
+
+		before_sleep_configs[id] = mv | (on << 31);
+		if (++id >= VREG_NUM_MAX)
+			break;
+	}
+
+	mutex_unlock(&regulator_list_mutex);
+}
+
+int vreg_before_sleep_dump_info(char *buf)
+{
+	char *p = buf;
+
+	p += snprintf(p, PAGE_SIZE, "vreg_before_sleep:\n");
+	if (!before_sleep_fetched) {
+		struct regulator_dev *rdev;
+		unsigned on, mv;
+		int id;
+
+		before_sleep_fetched = true;
+
+		mutex_lock(&regulator_list_mutex);
+
+		id = 0;
+		list_for_each_entry(rdev, &regulator_list, list) {
+			p += snprintf(p, PAGE_SIZE, "[%2d]%10s: ",
+				id, rdev->desc->name);
+
+			mv = before_sleep_configs[id];
+			on = (mv & 0x80000000) >> 31;
+			mv &= ~0x80000000;
+
+			p += snprintf(p, PAGE_SIZE, "%s ", on ? "on " : "off");
+			p += snprintf(p, PAGE_SIZE, "%4d mv ", mv);
+			p += snprintf(p, PAGE_SIZE, "\n");
+
+			if (++id >= VREG_NUM_MAX)
+				break;
+		}
+
+		mutex_unlock(&regulator_list_mutex);
+	}
+	return p - buf;
+}
+
 /**
  * regulator_has_full_constraints - the system has fully specified constraints
  *
-- 
2.11.0

