From 1da1b7bb5aeda5dc834e7328d854d9055ee47f9e Mon Sep 17 00:00:00 2001
From: Zac Crosby <azc095@motorola.com>
Date: Fri, 28 Feb 2014 10:16:04 -0600
Subject: [PATCH 314/959] IKKRNBSP-3418 mdss: Add sysfs method to
 enable/disable TE

Provide a method to enable/disable the display's TE signal via sysfs.
This is needed for the factory to verify TE functionality.

Port of cb25a04 from 8996 with minor update.

Change-Id: I80f06e94a7ea9c2e2988183eff600851785b56fe
Signed-off-by: Shiyong Li <a22381@motorola.com>
Reviewed-on: http://gerrit.mot.com/786227
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Bang Nguyen <bangnguyen@motorola.com>
Reviewed-by: Zachary Crosby <zac@motorola.com>
Reviewed-by: Joseph Swantek <jswantek@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/video/msm/mdss/mdss_dsi.c         |  15 ++++
 drivers/video/msm/mdss/mdss_mdp_overlay.c | 122 ++++++++++++++++++++++++++++++
 drivers/video/msm/mdss/mdss_panel.h       |   2 +
 3 files changed, 139 insertions(+)

diff --git a/drivers/video/msm/mdss/mdss_dsi.c b/drivers/video/msm/mdss/mdss_dsi.c
index 25886ce7e8d..1c574b34d82 100644
--- a/drivers/video/msm/mdss/mdss_dsi.c
+++ b/drivers/video/msm/mdss/mdss_dsi.c
@@ -91,6 +91,17 @@ static void mdss_dsi_pm_qos_update_request(int val)
 	pm_qos_update_request(&mdss_dsi_pm_qos_request, val);
 }
 
+static int mdss_dsi_hndl_enable_te(struct mdss_dsi_ctrl_pdata *ctrl,
+				int enable)
+{
+	if (enable)
+		mdss_dsi_set_tear_on(ctrl);
+	else
+		mdss_dsi_set_tear_off(ctrl);
+
+	return 0;
+}
+
 static struct mdss_dsi_ctrl_pdata *mdss_dsi_get_ctrl(u32 ctrl_id)
 {
 	if (ctrl_id >= DSI_CTRL_MAX || !mdss_dsi_res)
@@ -2224,6 +2235,10 @@ static int mdss_dsi_event_handler(struct mdss_panel_data *pdata,
 	case MDSS_EVENT_ENABLE_PARTIAL_ROI:
 		rc = mdss_dsi_ctl_partial_roi(pdata);
 		break;
+	case MDSS_EVENT_ENABLE_TE:
+		rc = mdss_dsi_hndl_enable_te(ctrl_pdata,
+				(int) (unsigned long) arg);
+		break;
 	case MDSS_EVENT_DSI_RESET_WRITE_PTR:
 		rc = mdss_dsi_reset_write_ptr(pdata);
 		break;
diff --git a/drivers/video/msm/mdss/mdss_mdp_overlay.c b/drivers/video/msm/mdss/mdss_mdp_overlay.c
index dd1b40ad5f6..244827ea5fa 100644
--- a/drivers/video/msm/mdss/mdss_mdp_overlay.c
+++ b/drivers/video/msm/mdss/mdss_mdp_overlay.c
@@ -2875,8 +2875,130 @@ static ssize_t frame_counter_show(struct device *dev,
 }
 
 static DEVICE_ATTR(frame_counter, S_IRUSR | S_IRGRP, frame_counter_show, NULL);
+
+static int te_status = -1;
+static ssize_t te_enable_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct fb_info *fbi = dev_get_drvdata(dev);
+	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)fbi->par;
+	struct mdss_mdp_ctl *ctl = mfd_to_ctl(mfd);
+	struct mdss_mdp_pp_tear_check *te;
+
+	if (!ctl || !ctl->panel_data) {
+		pr_warn("there is no ctl or panel_data\n");
+		return -ENODEV;
+	}
+
+	te = &ctl->panel_data->panel_info.te;
+	if (!te) {
+		pr_warn("there is no te information\n");
+		return -ENODEV;
+	}
+
+	if (te_status < 0)
+		te_status = te->tear_check_en;
+
+	return snprintf(buf, PAGE_SIZE, "%d\n", te_status);
+}
+
+static ssize_t te_enable_store(struct device *dev,
+			struct device_attribute *attr,
+			const char *buf, size_t count)
+{
+	struct fb_info *fbi = dev_get_drvdata(dev);
+	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)fbi->par;
+	struct mdss_mdp_ctl *ctl = mfd_to_ctl(mfd);
+	struct mdss_overlay_private *mdp5_data = mfd_to_mdp5_data(mfd);
+	struct mdss_mdp_mixer *mixer;
+	static int prev_height;
+
+	int enable;
+	int r = 0;
+	int i, mux;
+
+	if (!ctl || !mdp5_data) {
+		pr_warn("there is no ctl or mdp5_data attached to fb\n");
+		r = -ENODEV;
+		goto end;
+	}
+
+	if (mdss_fb_is_power_off(mfd)) {
+		pr_warn("panel is not powered\n");
+		r = -EPERM;
+		goto end;
+	}
+
+	r = kstrtoint(buf, 0, &enable);
+	if ((r) || ((enable != 0) && (enable != 1))) {
+		pr_err("invalid TE enable value = %d\n",
+			enable);
+		r = -EINVAL;
+		goto end;
+	}
+
+	mutex_lock(&mdp5_data->ov_lock);
+	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON);
+
+	if (te_status == enable) {
+		pr_info("te_status is not changed. Do nothing\n");
+		goto locked_end;
+	}
+
+	for (i = 0; i < 2; i++) {
+		if (i == 0)
+			mux = MDSS_MDP_MIXER_MUX_LEFT;
+		else if (i == 1)
+			mux = MDSS_MDP_MIXER_MUX_RIGHT;
+
+		mixer = mdss_mdp_mixer_get(ctl, mux);
+		if (!mixer) {
+			pr_warn("There is no mixer for mux = %d\n", i);
+			continue;
+		}
+
+		/* The TE max height in MDP is being set to a max value of
+		 * 0xFFF0. Since this is such a large number, when TE is
+		 * disabled from the panel, we'll start to get constant timeout
+		 * errors and get 1 FPS.  To prevent this from happening, set
+		 * the height to display height * 2.  This will just cause our
+		 * FPS to drop to 30 FPS, and prevent timeout errors. */
+		if (!enable) {
+			prev_height =
+				mdss_mdp_pingpong_read(mixer->pingpong_base,
+				MDSS_MDP_REG_PP_SYNC_CONFIG_HEIGHT) & 0xFFFF;
+			mdss_mdp_pingpong_write(mixer->pingpong_base,
+				MDSS_MDP_REG_PP_SYNC_CONFIG_HEIGHT,
+				mfd->fbi->var.yres * 2);
+		} else if (enable && prev_height) {
+			mdss_mdp_pingpong_write(mixer->pingpong_base,
+				MDSS_MDP_REG_PP_SYNC_CONFIG_HEIGHT,
+				prev_height);
+		}
+
+		r = mdss_mdp_ctl_intf_event(ctl, MDSS_EVENT_ENABLE_TE,
+					(void *) (long int) enable);
+		if (r) {
+			pr_err("Failed sending TE command, r=%d\n", r);
+			r = -EFAULT;
+			goto locked_end;
+		} else
+			te_status = enable;
+	}
+locked_end:
+	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF);
+	mutex_unlock(&mdp5_data->ov_lock);
+
+end:
+	return r ? r : count;
+}
+
+static DEVICE_ATTR(te_enable, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP,
+					te_enable_show, te_enable_store);
+
 static struct attribute *factory_te_attrs[] = {
 	&dev_attr_frame_counter.attr,
+	&dev_attr_te_enable.attr,
 	NULL,
 };
 static struct attribute_group factory_te_attrs_group = {
diff --git a/drivers/video/msm/mdss/mdss_panel.h b/drivers/video/msm/mdss/mdss_panel.h
index 804e5f6d001..c099a853715 100644
--- a/drivers/video/msm/mdss/mdss_panel.h
+++ b/drivers/video/msm/mdss/mdss_panel.h
@@ -206,6 +206,7 @@ struct mdss_intf_recovery {
  *				the panel.
  * @MDSS_EVENT_PANEL_TIMING_SWITCH: Panel timing switch is requested.
  *				Argument provided is new panel timing.
+ * @MDSS_EVENT_ENABLE_TE: Change TE state, used for factory testing only.
  */
 enum mdss_intf_events {
 	MDSS_EVENT_RESET = 1,
@@ -235,6 +236,7 @@ enum mdss_intf_events {
 	MDSS_EVENT_DSI_RECONFIG_CMD,
 	MDSS_EVENT_DSI_RESET_WRITE_PTR,
 	MDSS_EVENT_PANEL_TIMING_SWITCH,
+        MDSS_EVENT_ENABLE_TE,
 };
 
 struct lcd_panel_info {
-- 
2.11.0

