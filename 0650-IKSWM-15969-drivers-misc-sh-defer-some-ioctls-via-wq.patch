From 26410f756a4be46ac5d1811cb214af714f4a3b56 Mon Sep 17 00:00:00 2001
From: wlgs03 <wlgs03@motorola.com>
Date: Fri, 22 Jan 2016 14:29:26 -0600
Subject: [PATCH 650/959] IKSWM-15969 drivers: misc: sh: defer some ioctls via
 wq

Port of IKVPREL1L-6058 to prevent blocking of some sensorhub
ioctls on the mutex.

Change-Id: Id783cf819f705b21d97cb11c55873685d3c2a860
Signed-off-by: wlgs03 <wlgs03@motorola.com>
Reviewed-on: http://gerrit.mot.com/813702
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Robert Wiegand <Robert.P.Wiegand@motorola.com>
Reviewed-by: Zhi-Ming Yuan <a14194@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
Reviewed-by: Jason Jae Hyun Koh <jasonkoh@motorola.com>
---
 drivers/misc/stml0xx/stml0xx_core.c  |  16 +-
 drivers/misc/stml0xx/stml0xx_ioctl.c | 687 ++++++++++++++++++++++++-----------
 include/linux/stml0xx.h              |  20 +
 3 files changed, 502 insertions(+), 221 deletions(-)

diff --git a/drivers/misc/stml0xx/stml0xx_core.c b/drivers/misc/stml0xx/stml0xx_core.c
index 1bbae7d7028..3e167df0c1c 100644
--- a/drivers/misc/stml0xx/stml0xx_core.c
+++ b/drivers/misc/stml0xx/stml0xx_core.c
@@ -852,6 +852,17 @@ static int stml0xx_probe(struct spi_device *spi)
 		dev_err(&spi->dev, "cannot create work queue: %d", err);
 		goto err1;
 	}
+	ps_stml0xx->ioctl_work_queue =
+		create_singlethread_workqueue("stml0xx_ioctl_wq");
+	if (!ps_stml0xx->ioctl_work_queue) {
+		err = -ENOMEM;
+		dev_err(
+			&spi->dev,
+			"cannot create ioctl work queue: %d\n",
+			err
+		);
+		goto err2;
+	}
 	ps_stml0xx->pdata = pdata;
 	spi_set_drvdata(spi, ps_stml0xx);
 
@@ -859,7 +870,7 @@ static int stml0xx_probe(struct spi_device *spi)
 		err = ps_stml0xx->pdata->init();
 		if (err < 0) {
 			dev_err(&spi->dev, "init failed: %d", err);
-			goto err2;
+			goto err_pdata_init;
 		}
 	}
 
@@ -1019,6 +1030,8 @@ err6:
 err4:
 	if (ps_stml0xx->pdata->exit)
 		ps_stml0xx->pdata->exit();
+err_pdata_init:
+	destroy_workqueue(ps_stml0xx->ioctl_work_queue);
 err2:
 	destroy_workqueue(ps_stml0xx->irq_work_queue);
 err1:
@@ -1068,6 +1081,7 @@ static int stml0xx_remove(struct spi_device *spi)
 
 	stml0xx_gpio_free(ps_stml0xx->pdata);
 	destroy_workqueue(ps_stml0xx->irq_work_queue);
+	destroy_workqueue(ps_stml0xx->ioctl_work_queue);
 	mutex_destroy(&ps_stml0xx->lock);
 	wake_unlock(&ps_stml0xx->wakelock);
 	wake_lock_destroy(&ps_stml0xx->wakelock);
diff --git a/drivers/misc/stml0xx/stml0xx_ioctl.c b/drivers/misc/stml0xx/stml0xx_ioctl.c
index a8b2adcfce2..97346499d26 100644
--- a/drivers/misc/stml0xx/stml0xx_ioctl.c
+++ b/drivers/misc/stml0xx/stml0xx_ioctl.c
@@ -43,23 +43,181 @@
 
 #include <linux/stml0xx.h>
 
+
+
+/**
+ * stml0xx_ioctl_work_func() - process ioctl requests asynchronously
+ * @ws MUST be an stml0xx_ioctl_work_struct
+ *
+ */
+void stml0xx_ioctl_work_func(struct work_struct *ws)
+{
+	struct stml0xx_ioctl_work_struct *ioctl_ws =
+		(struct stml0xx_ioctl_work_struct *)ws;
+	struct stml0xx_data *ps_stml0xx = stml0xx_misc_data;
+	int err;
+	unsigned char buf[4];
+	size_t ndx;
+
+	if (!ioctl_ws)
+		return;
+
+	stml0xx_wake(ps_stml0xx);
+
+	switch (ioctl_ws->cmd) {
+	case STML0XX_IOCTL_SET_SENSORS:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"STML0XX_IOCTL_SET_SENSORS");
+		/* Prepare data */
+		buf[0] = ioctl_ws->data.bytes[0];
+		buf[1] = ioctl_ws->data.bytes[1];
+		buf[2] = ioctl_ws->data.bytes[2];
+		stml0xx_g_nonwake_sensor_state =
+			(buf[2] << 16) |
+			(buf[1] << 8) |
+			buf[0];
+		/* Send sensor state */
+		if (stml0xx_g_booted)
+			err = stml0xx_spi_send_write_reg(NONWAKESENSOR_CONFIG,
+							buf, 3);
+		dev_dbg(&stml0xx_misc_data->spi->dev, "Sensor enable = 0x%lx\n",
+			stml0xx_g_nonwake_sensor_state);
+		break;
+	case STML0XX_IOCTL_SET_ACC_DELAY:
+		dev_dbg(
+			&stml0xx_misc_data->spi->dev,
+			"STML0XX_IOCTL_SET_ACC_DELAY"
+		);
+		stml0xx_g_acc_delay =  ioctl_ws->data.delay;
+		if (stml0xx_g_booted) {
+			buf[0] = ioctl_ws->data.delay;
+			err = stml0xx_spi_send_write_reg(ACCEL_UPDATE_RATE,
+							buf, 1);
+		}
+		break;
+	case STML0XX_IOCTL_SET_ACC2_DELAY:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"STML0XX_IOCTL_SET_ACC2_DELAY");
+		stml0xx_g_acc2_delay =  ioctl_ws->data.delay;
+		if (stml0xx_g_booted) {
+			buf[0] = ioctl_ws->data.delay;
+			err = stml0xx_spi_send_write_reg(ACCEL2_UPDATE_RATE,
+							buf, 1);
+		}
+		break;
+	case STML0XX_IOCTL_SET_GYRO_DELAY:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"STML0XX_IOCTL_SET_GYRO_DELAY");
+		stml0xx_g_gyro_delay = ioctl_ws->data.delay;
+		if (stml0xx_g_booted) {
+			buf[0] = ioctl_ws->data.delay;
+			err = stml0xx_spi_send_write_reg(GYRO_UPDATE_RATE,
+							buf, 1);
+		}
+		break;
+	case STML0XX_IOCTL_SET_ALS_DELAY:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"STML0XX_IOCTL_SET_ALS_DELAY");
+		stml0xx_g_als_delay = ioctl_ws->data.delay;
+		if (stml0xx_g_booted) {
+			buf[0] = ioctl_ws->data.delay >> 8;
+			buf[1] = ioctl_ws->data.delay & 0xFF;
+			err = stml0xx_spi_send_write_reg(ALS_UPDATE_RATE,
+							buf, 2);
+		}
+		break;
+	case STML0XX_IOCTL_SET_STEP_COUNTER_DELAY:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"STML0XX_IOCTL_SET_STEP_COUNTER_DELAY");
+		stml0xx_g_step_counter_delay = ioctl_ws->data.delay;
+		if (stml0xx_g_booted) {
+			buf[0] = ioctl_ws->data.delay >> 8;
+			buf[1] = ioctl_ws->data.delay & 0xFF;
+			err = stml0xx_spi_send_write_reg(STEP_COUNTER_INFO,
+							buf, 2);
+		}
+		break;
+	case STML0XX_IOCTL_SET_WAKESENSORS:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"STML0XX_IOCTL_SET_WAKESENSORS");
+		buf[0] = ioctl_ws->data.bytes[0];
+		buf[1] = ioctl_ws->data.bytes[1];
+		buf[2] = ioctl_ws->data.bytes[2];
+		stml0xx_g_wake_sensor_state = (buf[2] << 16)
+			|(buf[1] << 8) | buf[0];
+		if (stml0xx_g_booted)
+			err = stml0xx_spi_send_write_reg(WAKESENSOR_CONFIG,
+							 buf, 3);
+		dev_dbg(&stml0xx_misc_data->spi->dev, "Sensor enable = 0x%02X\n",
+			(unsigned int)stml0xx_g_wake_sensor_state);
+		break;
+	case STML0XX_IOCTL_SET_ALGOS:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"STML0XX_IOCTL_SET_ALGOS");
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"Set algos config: 0x%x",
+			(ioctl_ws->data.bytes[1] << 8) | ioctl_ws->data.bytes[0]
+		);
+		buf[0] = ioctl_ws->data.bytes[0];
+		buf[1] = ioctl_ws->data.bytes[1];
+		stml0xx_g_algo_state = (buf[1] << 8) | buf[0];
+		if (stml0xx_g_booted)
+			err = stml0xx_spi_send_write_reg(ALGO_CONFIG,
+							buf, 2);
+
+		break;
+	case STML0XX_IOCTL_SET_MOTION_DUR:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"STML0XX_IOCTL_SET_MOTION_DUR");
+		stml0xx_g_motion_dur = ioctl_ws->data.bytes[0];
+		if (stml0xx_g_booted)
+			err = stml0xx_spi_send_write_reg(MOTION_DUR,
+						ioctl_ws->data.bytes, 1);
+		break;
+	case STML0XX_IOCTL_SET_ZRMOTION_DUR:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"STML0XX_IOCTL_SET_ZMOTION_DUR");
+		stml0xx_g_zmotion_dur =  ioctl_ws->data.bytes[0];
+		if (stml0xx_g_booted)
+			err = stml0xx_spi_send_write_reg(ZMOTION_DUR,
+						ioctl_ws->data.bytes, 1);
+		break;
+	case STML0XX_IOCTL_SET_ALGO_REQ:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"STML0XX_IOCTL_SET_ALGO_REQ");
+		ndx = ioctl_ws->algo_req_ndx;
+		stml0xx_g_algo_request[ndx].size = ioctl_ws->data_len;
+		memcpy(stml0xx_g_algo_request[ndx].data,
+			&ioctl_ws->data.bytes[1], ioctl_ws->data_len);
+		if (stml0xx_g_booted)
+			err = stml0xx_spi_send_write_reg(stml0xx_algo_info
+					[ioctl_ws->algo_req_ndx].req_register,
+					stml0xx_g_algo_request[ndx].data,
+					stml0xx_g_algo_request[ndx].size);
+		break;
+	}
+
+	stml0xx_sleep(ps_stml0xx);
+	kfree(ioctl_ws);
+}
+
 long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
 	void __user *argp = (void __user *)arg;
 	static int lowpower_mode = 1;
 	int err = 0;
 	struct stml0xx_data *ps_stml0xx = stml0xx_misc_data;
-	unsigned int addr, duration, algo_idx;
-	unsigned short delay;
+	unsigned int addr, algo_idx;
 	unsigned int data_size = 0;
 	unsigned char buf[SPI_RX_PAYLOAD_LEN];
-	unsigned char len;
+	unsigned char bytes[3];
 	unsigned int handle;
 	struct timespec current_time;
 	bool cmd_handled;
 	unsigned int read_write;
 	unsigned int loop_count;
 	unsigned char gyro_buf[STML0XX_GYRO_CAL_SIZE];
+	struct stml0xx_ioctl_work_struct *ioctl_ws;
 
 	if (!stml0xx_misc_data)
 		stml0xx_misc_data = file->private_data;
@@ -79,7 +237,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case STML0XX_IOCTL_GET_VERNAME:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_GET_VERNAME");
-		if (copy_to_user(argp, &(ps_stml0xx->pdata->fw_version),
+		if (copy_to_user(argp, ps_stml0xx->pdata->fw_version,
 				 FW_VERSION_SIZE))
 			err = -EFAULT;
 		else
@@ -102,6 +260,306 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	if (cmd_handled)
 		goto EXIT;
 
+	/* This macro saves some copy/paste evil */
+#define INIT_IOCTL_WS \
+	do { \
+		ioctl_ws = kmalloc( \
+			sizeof(struct stml0xx_ioctl_work_struct), \
+			GFP_KERNEL \
+		); \
+		if (!ioctl_ws) { \
+			dev_err( \
+				&stml0xx_misc_data->spi->dev, \
+				"stml0xx_ioctl: unable to alloc work struct" \
+			); \
+			return -ENOMEM; \
+		} \
+		INIT_WORK( \
+			(struct work_struct *)ioctl_ws, \
+			stml0xx_ioctl_work_func \
+		); \
+	} while (0);
+
+	/* Defer some ioctls so as not to block the caller */
+	switch (cmd) {
+	case STML0XX_IOCTL_SET_SENSORS:
+		dev_dbg(
+			&stml0xx_misc_data->spi->dev,
+			"deferring STML0XX_IOCTL_SET_SENSORS"
+		);
+		INIT_IOCTL_WS
+		ioctl_ws->cmd = cmd;
+		if (
+			copy_from_user(
+				ioctl_ws->data.bytes,
+				argp,
+				3 * sizeof(unsigned char))) {
+			dev_dbg(&stml0xx_misc_data->spi->dev,
+				"Copy set sensors returned error\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		queue_work(
+			ps_stml0xx->irq_work_queue,
+			(struct work_struct *)ioctl_ws
+		);
+		return 0;
+	case STML0XX_IOCTL_SET_ACC_DELAY:
+		dev_dbg(
+			&stml0xx_misc_data->spi->dev,
+			"deferring STML0XX_IOCTL_SET_ACC_DELAY"
+		);
+		INIT_IOCTL_WS
+		ioctl_ws->cmd = cmd;
+		if (
+			copy_from_user(
+				&(ioctl_ws->data.delay),
+				argp,
+				sizeof(ioctl_ws->data.delay))) {
+			dev_dbg(&stml0xx_misc_data->spi->dev,
+				"Copy acc delay returned error\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		queue_work(
+			ps_stml0xx->irq_work_queue,
+			(struct work_struct *)ioctl_ws
+		);
+		return 0;
+	case STML0XX_IOCTL_SET_ACC2_DELAY:
+		dev_dbg(
+			&stml0xx_misc_data->spi->dev,
+			"deferring STML0XX_IOCTL_SET_ACC2_DELAY"
+		);
+		INIT_IOCTL_WS
+		ioctl_ws->cmd = cmd;
+		if (
+			copy_from_user(
+				&(ioctl_ws->data.delay),
+				argp,
+				sizeof(ioctl_ws->data.delay))) {
+			dev_dbg(&stml0xx_misc_data->spi->dev,
+				"Copy acc delay returned error\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		queue_work(
+			ps_stml0xx->irq_work_queue,
+			(struct work_struct *)ioctl_ws
+		);
+		return 0;
+	case STML0XX_IOCTL_SET_GYRO_DELAY:
+		dev_dbg(
+			&stml0xx_misc_data->spi->dev,
+			"deferring STML0XX_IOCTL_SET_GYRO_DELAY"
+		);
+		INIT_IOCTL_WS
+		ioctl_ws->cmd = cmd;
+		if (
+			copy_from_user(
+				&(ioctl_ws->data.delay),
+				argp,
+				sizeof(ioctl_ws->data.delay))) {
+			dev_dbg(&stml0xx_misc_data->spi->dev,
+				"Copy gyro delay returned error\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		queue_work(
+			ps_stml0xx->irq_work_queue,
+			(struct work_struct *)ioctl_ws
+		);
+		return 0;
+	case STML0XX_IOCTL_SET_ALS_DELAY:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"deferring STML0XX_IOCTL_SET_ALS_DELAY");
+		INIT_IOCTL_WS
+		ioctl_ws->cmd = cmd;
+		if (copy_from_user(&(ioctl_ws->data.delay),
+			 argp, sizeof(ioctl_ws->data.delay))) {
+			dev_dbg(&stml0xx_misc_data->spi->dev,
+				"Copy als delay returned error");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		queue_work(
+			ps_stml0xx->irq_work_queue,
+			(struct work_struct *)ioctl_ws
+		);
+		return 0;
+	case STML0XX_IOCTL_SET_STEP_COUNTER_DELAY:
+		dev_dbg(&stml0xx_misc_data->spi->dev,
+			"deferring STML0XX_IOCTL_SET_STEP_COUNTER_DELAY");
+		INIT_IOCTL_WS
+		ioctl_ws->cmd = cmd;
+		if (copy_from_user(&(ioctl_ws->data.delay), argp,
+			sizeof(ioctl_ws->data.delay))) {
+			dev_dbg(&stml0xx_misc_data->spi->dev,
+				"Copy step counter delay returned error");
+			kfree(ioctl_ws);
+			err = -EFAULT;
+			break;
+		}
+		queue_work(
+			ps_stml0xx->irq_work_queue,
+			(struct work_struct *)ioctl_ws
+		);
+		return 0;
+	case STML0XX_IOCTL_SET_WAKESENSORS:
+		dev_dbg(
+			&stml0xx_misc_data->spi->dev,
+			"deferring STML0XX_IOCTL_SET_WAKESENSORS"
+		);
+		INIT_IOCTL_WS
+		ioctl_ws->cmd = cmd;
+		if (
+			copy_from_user(
+				ioctl_ws->data.bytes,
+				argp,
+				3 * sizeof(unsigned char))) {
+			dev_dbg(&stml0xx_misc_data->spi->dev,
+				"Copy set sensors returned error\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		queue_work(
+			ps_stml0xx->irq_work_queue,
+			(struct work_struct *)ioctl_ws
+		);
+		return 0;
+	case STML0XX_IOCTL_SET_ALGOS:
+		dev_dbg(
+			&stml0xx_misc_data->spi->dev,
+			"deferring STML0XX_IOCTL_SET_ALGOS"
+		);
+		INIT_IOCTL_WS
+		ioctl_ws->cmd = cmd;
+		if (
+			copy_from_user(
+				ioctl_ws->data.bytes,
+				argp,
+				2 * sizeof(unsigned char))) {
+			dev_err(&stml0xx_misc_data->spi->dev,
+				"Copy set algos returned error\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		queue_work(
+			ps_stml0xx->irq_work_queue,
+			(struct work_struct *)ioctl_ws
+		);
+		return 0;
+	case STML0XX_IOCTL_SET_MOTION_DUR:
+		dev_dbg(
+			&stml0xx_misc_data->spi->dev,
+			"deferring STML0XX_IOCTL_SET_MOTION_DUR"
+		);
+		INIT_IOCTL_WS
+		ioctl_ws->cmd = cmd;
+		if (copy_from_user(&addr, argp, sizeof(addr))) {
+			dev_dbg(&stml0xx_misc_data->spi->dev,
+				"Copy set motion dur returned error\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		ioctl_ws->data.bytes[1] = addr & 0xFF;
+		queue_work(
+			ps_stml0xx->irq_work_queue,
+			(struct work_struct *)ioctl_ws
+		);
+		return 0;
+	case STML0XX_IOCTL_SET_ZRMOTION_DUR:
+		dev_dbg(
+			&stml0xx_misc_data->spi->dev,
+			"deferring STML0XX_IOCTL_SET_ZRMOTION_DUR"
+		);
+		INIT_IOCTL_WS
+		ioctl_ws->cmd = cmd;
+		if (copy_from_user(&addr, argp, sizeof(addr))) {
+			dev_dbg(&stml0xx_misc_data->spi->dev,
+				"Copy zmotion dur returned error\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		ioctl_ws->data.bytes[1] = addr & 0xFF;
+		queue_work(
+			ps_stml0xx->irq_work_queue,
+			(struct work_struct *)ioctl_ws
+		);
+		return 0;
+	case STML0XX_IOCTL_SET_ALGO_REQ:
+		dev_dbg(
+			&stml0xx_misc_data->spi->dev,
+			"deferring STML0XX_IOCTL_SET_ALGO_REQ"
+		);
+		INIT_IOCTL_WS
+		ioctl_ws->cmd = cmd;
+		/* copy algo into bytes[2] */
+		if (
+			copy_from_user(
+				bytes,
+				argp,
+				2 * sizeof(unsigned char)
+			)) {
+			dev_err(&stml0xx_misc_data->spi->dev,
+				"Set algo req copy bytes returned error\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		addr = (bytes[1] << 8) | bytes[0];
+		ioctl_ws->algo_req_ndx = addr;
+		/* copy len */
+		if (
+			copy_from_user(
+				&(ioctl_ws->data_len),
+				argp + 2 * sizeof(unsigned char),
+				sizeof(ioctl_ws->data_len)
+			)) {
+			dev_err(&stml0xx_misc_data->spi->dev,
+				"Set algo req copy byte returned error\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		/* algo req register */
+		dev_dbg(
+			&stml0xx_misc_data->spi->dev,
+			"Set algo req, algo idx: %d, len: %u\n",
+			addr,
+			ioctl_ws->data_len
+		);
+		if (addr < STML0XX_NUM_ALGOS) {
+			ioctl_ws->data.bytes[0] =
+				stml0xx_algo_info[addr].req_register;
+			dev_dbg(&stml0xx_misc_data->spi->dev,
+				"Register: 0x%x", ioctl_ws->data.bytes[0]);
+		} else {
+			dev_err(&stml0xx_misc_data->spi->dev,
+				"Set algo req invalid arg\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		if (ioctl_ws->data_len > ALGO_RQST_DATA_SIZE) {
+			dev_err(&stml0xx_misc_data->spi->dev,
+				"Set algo req invalid size arg\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		if (copy_from_user(&(ioctl_ws->data.bytes[1]),
+			argp + 2 * sizeof(unsigned char)
+			+ sizeof(ioctl_ws->data_len), ioctl_ws->data_len)) {
+			dev_err(&stml0xx_misc_data->spi->dev,
+				"Set algo req copy req info returned error\n");
+			kfree(ioctl_ws);
+			return -EFAULT;
+		}
+		queue_work(
+			ps_stml0xx->irq_work_queue,
+			(struct work_struct *)ioctl_ws
+		);
+		return 0;
+	}
+#undef INIT_IOCTL_WS
+
 	/* Wait for mutex lock */
 	wake_lock(&ps_stml0xx->wakelock);
 	mutex_lock(&ps_stml0xx->lock);
@@ -159,90 +617,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		else
 			err = -EBUSY;
 		break;
-	case STML0XX_IOCTL_SET_ACC_DELAY:
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"STML0XX_IOCTL_SET_ACC_DELAY");
-		if (copy_from_user(&delay, argp, sizeof(delay))) {
-			dev_dbg(&stml0xx_misc_data->spi->dev,
-				"Copy acc delay returned error");
-			err = -EFAULT;
-			break;
-		}
-		stml0xx_g_acc_delay = delay;
-		if (stml0xx_g_booted) {
-			buf[0] = delay;
-			err = stml0xx_spi_send_write_reg(ACCEL_UPDATE_RATE,
-							buf, 1);
-		}
-		break;
-	case STML0XX_IOCTL_SET_ACC2_DELAY:
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"STML0XX_IOCTL_SET_ACC2_DELAY");
-		if (copy_from_user(&delay, argp, sizeof(delay))) {
-			dev_dbg(&stml0xx_misc_data->spi->dev,
-				"Copy acc2 delay returned error");
-			err = -EFAULT;
-			break;
-		}
-		stml0xx_g_acc2_delay = delay;
-		if (stml0xx_g_booted) {
-			buf[0] = delay;
-			err = stml0xx_spi_send_write_reg(ACCEL2_UPDATE_RATE,
-							buf, 1);
-		}
-		break;
-	case STML0XX_IOCTL_SET_GYRO_DELAY:
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"STML0XX_IOCTL_SET_GYRO_DELAY");
-		delay = 0;
-		if (copy_from_user(&delay, argp, sizeof(delay))) {
-			dev_dbg(&stml0xx_misc_data->spi->dev,
-				"Copy gyro delay returned error");
-			err = -EFAULT;
-			break;
-		}
-		stml0xx_g_gyro_delay = delay;
-		if (stml0xx_g_booted) {
-			buf[0] = delay;
-			err = stml0xx_spi_send_write_reg(GYRO_UPDATE_RATE,
-							buf, 1);
-		}
-		break;
-	case STML0XX_IOCTL_SET_STEP_COUNTER_DELAY:
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"STML0XX_IOCTL_SET_STEP_COUNTER_DELAY");
-		delay = 0;
-		if (copy_from_user(&delay, argp, sizeof(delay))) {
-			dev_dbg(&stml0xx_misc_data->spi->dev,
-				"Copy step counter delay returned error");
-			err = -EFAULT;
-			break;
-		}
-		stml0xx_g_step_counter_delay = delay;
-		if (stml0xx_g_booted) {
-			buf[0] = delay >> 8;
-			buf[1] = delay & 0xFF;
-			err = stml0xx_spi_send_write_reg(STEP_COUNTER_INFO,
-							buf, 2);
-		}
-		break;
-	case STML0XX_IOCTL_SET_SENSORS:
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"STML0XX_IOCTL_SET_SENSORS");
-		if (copy_from_user(buf, argp, 3 * sizeof(unsigned char))) {
-			dev_dbg(&stml0xx_misc_data->spi->dev,
-				"Copy set sensors returned error");
-			err = -EFAULT;
-			break;
-		}
-		stml0xx_g_nonwake_sensor_state = (buf[2] << 16)
-			| (buf[1] << 8) | buf[0];
-		if (stml0xx_g_booted)
-			err = stml0xx_spi_send_write_reg(NONWAKESENSOR_CONFIG,
-							 buf, 3);
-		dev_dbg(&stml0xx_misc_data->spi->dev, "Sensor enable = 0x%lx",
-			stml0xx_g_nonwake_sensor_state);
-		break;
+
 	case STML0XX_IOCTL_GET_SENSORS:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_GET_SENSORS");
@@ -262,23 +637,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		if (copy_to_user(argp, buf, 3 * sizeof(unsigned char)))
 			err = -EFAULT;
 		break;
-	case STML0XX_IOCTL_SET_WAKESENSORS:
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"STML0XX_IOCTL_SET_WAKESENSORS");
-		if (copy_from_user(buf, argp, 3 * sizeof(unsigned char))) {
-			dev_dbg(&stml0xx_misc_data->spi->dev,
-				"Copy set sensors returned error");
-			err = -EFAULT;
-			break;
-		}
-		stml0xx_g_wake_sensor_state = (buf[2] << 16)
-			|(buf[1] << 8) | buf[0];
-		if (stml0xx_g_booted)
-			err = stml0xx_spi_send_write_reg(WAKESENSOR_CONFIG,
-							 buf, 3);
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"Sensor enable = 0x%06lX", stml0xx_g_wake_sensor_state);
-		break;
+
 	case STML0XX_IOCTL_GET_WAKESENSORS:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_GET_WAKESENSORS");
@@ -298,22 +657,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		if (copy_to_user(argp, buf, 3 * sizeof(unsigned char)))
 			err = -EFAULT;
 		break;
-	case STML0XX_IOCTL_SET_ALGOS:
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"STML0XX_IOCTL_SET_ALGOS");
-		if (copy_from_user(buf, argp, 2 * sizeof(unsigned char))) {
-			dev_err(&stml0xx_misc_data->spi->dev,
-				"Copy set algos returned error");
-			err = -EFAULT;
-			break;
-		}
-		stml0xx_g_algo_state = (buf[1] << 8) | buf[0];
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"Set algos config: 0x%x", stml0xx_g_algo_state);
-		if (stml0xx_g_booted)
-			err = stml0xx_spi_send_write_reg(ALGO_CONFIG,
-							buf, 2);
-		break;
+
 	case STML0XX_IOCTL_GET_ALGOS:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_GET_ALGOS");
@@ -334,53 +678,6 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		if (copy_to_user(argp, buf, 2 * sizeof(unsigned char)))
 			err = -EFAULT;
 		break;
-	case STML0XX_IOCTL_SET_ALS_DELAY:
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"STML0XX_IOCTL_SET_ALS_DELAY");
-		if (copy_from_user(&delay, argp, sizeof(delay))) {
-			dev_dbg(&stml0xx_misc_data->spi->dev,
-				"Copy als delay returned error");
-			err = -EFAULT;
-			break;
-		}
-		stml0xx_g_als_delay = delay;
-		if (stml0xx_g_booted) {
-			buf[0] = delay >> 8;
-			buf[1] = delay & 0xFF;
-			err = stml0xx_spi_send_write_reg(ALS_UPDATE_RATE,
-							buf, 2);
-		}
-		break;
-	case STML0XX_IOCTL_SET_MOTION_DUR:
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"STML0XX_IOCTL_SET_MOTION_DUR");
-		if (copy_from_user(&duration, argp, sizeof(duration))) {
-			dev_dbg(&stml0xx_misc_data->spi->dev,
-				"Copy set motion dur returned error");
-			err = -EFAULT;
-			break;
-		}
-		buf[0] = duration & 0xFF;
-		stml0xx_g_motion_dur = buf[0];
-		if (stml0xx_g_booted)
-			err = stml0xx_spi_send_write_reg(MOTION_DUR,
-							buf, 1);
-		break;
-	case STML0XX_IOCTL_SET_ZRMOTION_DUR:
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"STML0XX_IOCTL_SET_ZRMOTION_DUR");
-		if (copy_from_user(&duration, argp, sizeof(duration))) {
-			dev_dbg(&stml0xx_misc_data->spi->dev,
-				"Copy zmotion dur returned error");
-			err = -EFAULT;
-			break;
-		}
-		buf[0] = duration & 0xFF;
-		stml0xx_g_zmotion_dur = buf[0];
-		if (stml0xx_g_booted)
-			err = stml0xx_spi_send_write_reg(ZMOTION_DUR,
-							 buf, 1);
-		break;
 	case STML0XX_IOCTL_GET_DOCK_STATUS:
 		dev_dbg(&stml0xx_misc_data->spi->dev,
 			"STML0XX_IOCTL_GET_DOCK_STATUS");
@@ -418,58 +715,8 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		}
 		err = stml0xx_spi_write(buf, 1);
 		break;
-	case STML0XX_IOCTL_SET_ALGO_REQ:
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"STML0XX_IOCTL_SET_ALGO_REQ");
-		/* copy algo index */
-		if (copy_from_user(buf, argp, 2 * sizeof(unsigned char))) {
-			dev_err(&stml0xx_misc_data->spi->dev,
-				"Set algo req copy bytes returned error");
-			err = -EFAULT;
-			break;
-		}
-		algo_idx = (buf[1] << 8) | buf[0];
-		/* copy length */
-		if (copy_from_user(&len, argp + 2 * sizeof(unsigned char),
-				   sizeof(unsigned char))) {
-			dev_err(&stml0xx_misc_data->spi->dev,
-				"Set algo req copy byte returned error");
-			err = -EFAULT;
-			break;
-		}
-		/* algo req register */
-		dev_dbg(&stml0xx_misc_data->spi->dev,
-			"Set algo req, algo idx: %d, len: %u", algo_idx, len);
-		if (algo_idx < STML0XX_NUM_ALGOS) {
-			buf[0] = stml0xx_algo_info[algo_idx].req_register;
-			dev_dbg(&stml0xx_misc_data->spi->dev, "Register: 0x%x",
-				stml0xx_algo_info[algo_idx].req_register);
-		} else {
-			dev_err(&stml0xx_misc_data->spi->dev,
-				"Set algo req invalid arg");
-			err = -EFAULT;
-			break;
-		}
-		if (len > ALGO_RQST_DATA_SIZE) {
-			dev_err(&stml0xx_misc_data->spi->dev,
-				"Set algo req invalid size arg");
-			err = -EFAULT;
-			break;
-		}
-		if (copy_from_user(buf, argp + 2 * sizeof(unsigned char)
-				   + sizeof(len), len)) {
-			dev_err(&stml0xx_misc_data->spi->dev,
-				"Set algo req copy req info returned error");
-			err = -EFAULT;
-			break;
-		}
-		stml0xx_g_algo_request[algo_idx].size = len;
-		memcpy(stml0xx_g_algo_request[algo_idx].data, buf, len);
-		if (stml0xx_g_booted)
-			err = stml0xx_spi_send_write_reg(stml0xx_algo_info
-					       [algo_idx].req_register, buf,
-					       len);
-		break;
+
+
 	case STML0XX_IOCTL_GET_ALGO_EVT:
 		dev_dbg(&stml0xx_misc_data->spi->dev, "STML0XX_IOCTL_GET_ALGO_EVT");
 		if (!stml0xx_g_booted) {
diff --git a/include/linux/stml0xx.h b/include/linux/stml0xx.h
index 48a6b420fe8..682801dd0a9 100644
--- a/include/linux/stml0xx.h
+++ b/include/linux/stml0xx.h
@@ -188,6 +188,25 @@ enum vmm_ids {
 #define STML0XX_HALL_SOUTH 1
 #define STML0XX_HALL_NORTH 2
 
+/**
+ * struct stml0xx_ioctl_work_struct - struct for deferred ioctl data
+ * @ws base struct
+ * @cmd ioctl number
+ * @data ioctl data
+ * @data_len length of @data
+ * @algo_req_ndx index into @stml0xx_g_algo_requst
+ */
+struct stml0xx_ioctl_work_struct {
+	struct work_struct ws;
+	unsigned int cmd;
+	union {
+		unsigned char bytes[32];
+		unsigned short delay;
+	} data;
+	unsigned char data_len;
+	size_t algo_req_ndx;
+};
+
 struct stml0xx_platform_data {
 	int (*init) (void);
 	void (*exit) (void);
@@ -254,6 +273,7 @@ struct stml0xx_data {
 	struct mutex lock;
 	struct work_struct initialize_work;
 	struct workqueue_struct *irq_work_queue;
+	struct workqueue_struct *ioctl_work_queue;
 	struct wake_lock wakelock;
 	struct wake_lock wake_sensor_wakelock;
 	struct wake_lock reset_wakelock;
-- 
2.11.0

