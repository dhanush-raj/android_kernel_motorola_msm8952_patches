From 65c4aea2d6b775acbcc320088935721f42332e24 Mon Sep 17 00:00:00 2001
From: Subbaraman Narayanamurthy <subbaram@codeaurora.org>
Date: Wed, 18 Mar 2015 15:56:31 -0700
Subject: [PATCH 292/959] power: qpnp-smbcharger-mmi: add support for
 configuring OTG pulse skip

In OTG mode, when there is no load and flash is being enabled, it
causes a voltage dip at USB_IN and cause OTG device not to work.
To avoid such scenarios, OTG pulse skip should be enabled before
the flash is enabled. Also, before the flash is disabled, OTG
pulse skip should be disabled. Add support for this through the
power supply property flash_active.

CRs-Fixed: 793295
Change-Id: Ieb81fe039ce3b98ddc6942531a751cc287ab0a71
Signed-off-by: Subbaraman Narayanamurthy <subbaram@codeaurora.org>
---
 drivers/power/qpnp-smbcharger-mmi.c | 63 ++++++++++++++++++++++++++++++-------
 1 file changed, 52 insertions(+), 11 deletions(-)

diff --git a/drivers/power/qpnp-smbcharger-mmi.c b/drivers/power/qpnp-smbcharger-mmi.c
index f99a59a818f..e5639dad99f 100644
--- a/drivers/power/qpnp-smbcharger-mmi.c
+++ b/drivers/power/qpnp-smbcharger-mmi.c
@@ -182,6 +182,7 @@ struct smbchg_chip {
 	bool				safety_timer_en;
 	bool				aicl_complete;
 	bool				usb_ov_det;
+	bool				otg_pulse_skip_en;
 
 	/* jeita and temperature */
 	bool				batt_hot;
@@ -818,6 +819,7 @@ static enum power_supply_property smbchg_battery_properties[] = {
 	POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN,
 	POWER_SUPPLY_PROP_CYCLE_COUNT,
 	POWER_SUPPLY_PROP_AGE,
+	POWER_SUPPLY_PROP_FLASH_ACTIVE,
 };
 
 #define CHGR_STS			0x0E
@@ -2956,6 +2958,40 @@ static int smbchg_safety_timer_enable(struct smbchg_chip *chip, bool enable)
 	return 0;
 }
 
+#define OTG_TRIM6		0xF6
+#define TR_ENB_SKIP_BIT		BIT(2)
+#define OTG_EN_BIT		BIT(0)
+static int smbchg_otg_pulse_skip_enable(struct smbchg_chip *chip, bool enable)
+{
+	int rc;
+	u8 reg;
+
+	if (enable == chip->otg_pulse_skip_en)
+		return 0;
+
+	rc = smbchg_read(chip, &reg, chip->bat_if_base + CMD_CHG_REG, 1);
+	if (rc < 0) {
+		dev_err(chip->dev,
+				"Couldn't read OTG enable bit rc=%d\n", rc);
+		return rc;
+	}
+
+	/* If OTG is not enabled, don't set OTG pulse skip enable */
+	if (!(reg & OTG_EN_BIT))
+		return 0;
+
+	rc = smbchg_sec_masked_write(chip, chip->otg_base + OTG_TRIM6,
+			TR_ENB_SKIP_BIT, enable ? TR_ENB_SKIP_BIT : 0);
+	if (rc < 0) {
+		dev_err(chip->dev,
+			"Couldn't %s otg pulse skip rc = %d\n",
+			enable ? "enable" : "disable", rc);
+		return rc;
+	}
+	chip->otg_pulse_skip_en = enable;
+	return 0;
+}
+
 static int smbchg_battery_set_property(struct power_supply *psy,
 				       enum power_supply_property prop,
 				       const union power_supply_propval *val)
@@ -3012,6 +3048,9 @@ static int smbchg_battery_set_property(struct power_supply *psy,
 		schedule_delayed_work(&chip->heartbeat_work,
 					msecs_to_jiffies(0));
 		break;
+	case POWER_SUPPLY_PROP_FLASH_ACTIVE:
+		rc = smbchg_otg_pulse_skip_enable(chip, val->intval);
+		break;
 	default:
 		return -EINVAL;
 	}
@@ -3163,6 +3202,9 @@ static int smbchg_battery_get_property(struct power_supply *psy,
 		val->intval = ((get_prop_charge_full(chip) / 10) /
 			       (get_prop_charge_full_design(chip) / 1000));
 		break;
+	case POWER_SUPPLY_PROP_FLASH_ACTIVE:
+		val->intval = chip->otg_pulse_skip_en;
+		break;
 	default:
 		return -EINVAL;
 	}
@@ -3666,7 +3708,6 @@ static void smbchg_external_power_changed(struct power_supply *psy)
 	power_supply_changed(&chip->batt_psy);
 }
 
-#define OTG_EN		BIT(0)
 static int smbchg_otg_regulator_enable(struct regulator_dev *rdev)
 {
 	int rc = 0;
@@ -3674,7 +3715,7 @@ static int smbchg_otg_regulator_enable(struct regulator_dev *rdev)
 
 	chip->otg_retries = 0;
 	rc = smbchg_masked_write(chip, chip->bat_if_base + CMD_CHG_REG,
-			OTG_EN, OTG_EN);
+			OTG_EN_BIT, OTG_EN_BIT);
 	if (rc < 0)
 		dev_err(chip->dev, "Couldn't enable OTG mode rc=%d\n", rc);
 	else
@@ -3689,7 +3730,7 @@ static int smbchg_otg_regulator_disable(struct regulator_dev *rdev)
 	struct smbchg_chip *chip = rdev_get_drvdata(rdev);
 
 	rc = smbchg_masked_write(chip, chip->bat_if_base + CMD_CHG_REG,
-			OTG_EN, 0);
+			OTG_EN_BIT, 0);
 	if (rc < 0)
 		dev_err(chip->dev, "Couldn't disable OTG mode rc=%d\n", rc);
 	pr_smb(PR_STATUS, "Disabling OTG Boost\n");
@@ -3709,7 +3750,7 @@ static int smbchg_otg_regulator_is_enable(struct regulator_dev *rdev)
 		return rc;
 	}
 
-	return (reg & OTG_EN) ? 1 : 0;
+	return (reg & OTG_EN_BIT) ? 1 : 0;
 }
 
 struct regulator_ops smbchg_otg_reg_ops = {
@@ -4760,10 +4801,10 @@ static irqreturn_t otg_oc_handler(int irq, void *_chip)
 			"Retrying OTG enable. Try #%d, elapsed_us %lld\n",
 						chip->otg_retries, elapsed_us);
 		smbchg_masked_write(chip, chip->bat_if_base + CMD_CHG_REG,
-							OTG_EN, 0);
+							OTG_EN_BIT, 0);
 		msleep(20);
 		smbchg_masked_write(chip, chip->bat_if_base + CMD_CHG_REG,
-							OTG_EN, OTG_EN);
+							OTG_EN_BIT, OTG_EN_BIT);
 		chip->otg_enable_time = ktime_get();
 	}
 	return IRQ_HANDLED;
@@ -6874,12 +6915,12 @@ static ssize_t force_chg_usb_otg_ctl_store(struct device *dev,
 	if (mode)
 		r = smbchg_masked_write_fac(the_chip,
 					the_chip->bat_if_base + CMD_CHG_REG,
-					(EN_BAT_CHG_BIT | OTG_EN),
-					(EN_BAT_CHG_BIT | OTG_EN));
+					(EN_BAT_CHG_BIT | OTG_EN_BIT),
+					(EN_BAT_CHG_BIT | OTG_EN_BIT));
 	else
 		r = smbchg_masked_write_fac(the_chip,
 					the_chip->bat_if_base + CMD_CHG_REG,
-					(EN_BAT_CHG_BIT | OTG_EN),
+					(EN_BAT_CHG_BIT | OTG_EN_BIT),
 					0);
 
 	if (r < 0)
@@ -6909,12 +6950,12 @@ static ssize_t force_chg_usb_otg_ctl_show(struct device *dev,
 			  the_chip->bat_if_base + CMD_CHG_REG,
 			  1);
 	if (ret) {
-		pr_err("OTG_EN failed ret = %d\n", ret);
+		pr_err("OTG_EN_BIT failed ret = %d\n", ret);
 		state = -EFAULT;
 		goto end;
 	}
 
-	state = (OTG_EN & value) ? 1 : 0;
+	state = (OTG_EN_BIT & value) ? 1 : 0;
 end:
 	return scnprintf(buf, CHG_SHOW_MAX_SIZE, "%d\n", state);
 }
-- 
2.11.0

