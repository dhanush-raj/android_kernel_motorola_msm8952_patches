From 3f4f6a47ff05c65a69213613f23d6302305db766 Mon Sep 17 00:00:00 2001
From: Jason Jae Hyun Koh <jason.koh@motorola.com>
Date: Wed, 11 Mar 2015 14:16:48 -0500
Subject: [PATCH 118/959] IKLOCSEN-2049 stml0xx: use get_monotonic_boottime for
 timestamps

Sensor timestamps were using ktime_get_ts(), which is the kernel's version
of CLOCK_MONOTONIC. The sensor contract says the timestamps must be
equivalent to android::elapsedRealtimeNano(), which is using either
/dev/alarm or CLOCK_BOOTTIME (that is identical to CLOCK_MONOTONIC, but
also includes time in suspend).

Change-Id: Ifcb942ffbb62d9dcf98d657b789e4fea01f739cf
Signed-off-by: Jason Jae Hyun Koh <jason.koh@motorola.com>
Reviewed-on: http://gerrit.mot.com/723949
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Robert Wiegand <Robert.P.Wiegand@motorola.com>
Reviewed-by: Philip Lee <pglee@motorola.com>
Reviewed-by: Jeffrey Carlyle <jeff.carlyle@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/misc/stml0xx/stml0xx_core.c     | 2 +-
 drivers/misc/stml0xx/stml0xx_ioctl.c    | 2 +-
 drivers/misc/stml0xx/stml0xx_irq.c      | 2 +-
 drivers/misc/stml0xx/stml0xx_queue.c    | 2 +-
 drivers/misc/stml0xx/stml0xx_wake_irq.c | 2 +-
 5 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/misc/stml0xx/stml0xx_core.c b/drivers/misc/stml0xx/stml0xx_core.c
index 78c9aa30993..399b1a02405 100644
--- a/drivers/misc/stml0xx/stml0xx_core.c
+++ b/drivers/misc/stml0xx/stml0xx_core.c
@@ -1047,7 +1047,7 @@ static int stml0xx_resume(struct device *dev)
 	static struct stml0xx_work_struct *stm_ws;
 	struct stml0xx_data *ps_stml0xx = spi_get_drvdata(to_spi_device(dev));
 
-	getrawmonotonic(&ts);
+	get_monotonic_boottime(&ts);
 	dev_dbg(&stml0xx_misc_data->spi->dev, "%s", __func__);
 
 	mutex_lock(&ps_stml0xx->lock);
diff --git a/drivers/misc/stml0xx/stml0xx_ioctl.c b/drivers/misc/stml0xx/stml0xx_ioctl.c
index bbbcc0a3721..2b631cb0cfa 100644
--- a/drivers/misc/stml0xx/stml0xx_ioctl.c
+++ b/drivers/misc/stml0xx/stml0xx_ioctl.c
@@ -685,7 +685,7 @@ long stml0xx_misc_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			break;
 		}
 		handle = cpu_to_be32(handle);
-		getrawmonotonic(&current_time);
+		get_monotonic_boottime(&current_time);
 		stml0xx_as_data_buffer_write(ps_stml0xx, DT_FLUSH,
 				(char *)&handle, 4, 0,
 				ts_to_ns(current_time));
diff --git a/drivers/misc/stml0xx/stml0xx_irq.c b/drivers/misc/stml0xx/stml0xx_irq.c
index 2a1dea9c96d..959bca3d63f 100644
--- a/drivers/misc/stml0xx/stml0xx_irq.c
+++ b/drivers/misc/stml0xx/stml0xx_irq.c
@@ -47,7 +47,7 @@ irqreturn_t stml0xx_isr(int irq, void *dev)
 	static struct timespec ts;
 	static struct stml0xx_work_struct *stm_ws;
 	struct stml0xx_data *ps_stml0xx = dev;
-	getrawmonotonic(&ts);
+	get_monotonic_boottime(&ts);
 
 	if (stml0xx_irq_disable)
 		return IRQ_HANDLED;
diff --git a/drivers/misc/stml0xx/stml0xx_queue.c b/drivers/misc/stml0xx/stml0xx_queue.c
index 3fb0f9b8add..5c68f7cd503 100644
--- a/drivers/misc/stml0xx/stml0xx_queue.c
+++ b/drivers/misc/stml0xx/stml0xx_queue.c
@@ -135,7 +135,7 @@ int stml0xx_ms_data_buffer_write(struct stml0xx_data *ps_stml0xx,
 	}
 	buffer->size = size;
 
-	ktime_get_ts(&ts);
+	get_monotonic_boottime(&ts);
 	buffer->timestamp = ts.tv_sec * 1000000000LL + ts.tv_nsec;
 
 	ps_stml0xx->stml0xx_ms_data_buffer_head = new_head;
diff --git a/drivers/misc/stml0xx/stml0xx_wake_irq.c b/drivers/misc/stml0xx/stml0xx_wake_irq.c
index d3a9fb9b8c1..bf321c95a9f 100644
--- a/drivers/misc/stml0xx/stml0xx_wake_irq.c
+++ b/drivers/misc/stml0xx/stml0xx_wake_irq.c
@@ -60,7 +60,7 @@ irqreturn_t stml0xx_wake_isr(int irq, void *dev)
 	static struct timespec ts;
 	static struct stml0xx_work_struct *stm_ws;
 	struct stml0xx_data *ps_stml0xx = dev;
-	getrawmonotonic(&ts);
+	get_monotonic_boottime(&ts);
 
 	if (stml0xx_irq_disable)
 		return IRQ_HANDLED;
-- 
2.11.0

