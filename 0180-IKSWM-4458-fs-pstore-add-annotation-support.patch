From 7b736cb8be01d620c993cb955db47e60f54fab27 Mon Sep 17 00:00:00 2001
From: Hong-Mei Li <a21834@motorola.com>
Date: Thu, 24 Sep 2015 00:15:25 -0500
Subject: [PATCH 180/959] IKSWM-4458 fs: pstore: add annotation support

Add annotation type prz support to pstore. Publish
annotate function for kernel modules. On warm power
up pstore will make annotation information found in
new ramprz available in annotation-ramoops file.

This merged commit:
a2e343cee4e1240332b37040ca6b2db746104d69
534718419d5297cd7e31d1f2d626a1e5e0ac610e
60ccdd4e2430fdd85ff7e71c0208d7db79855921
ec8ad8d8796e26442ec7231cb73b6ae133cb3959

Change-Id: Ic633da48d51ad6239cba7ce1da79d403ee267790
Signed-off-by: Hong-Mei Li <a21834@motorola.com>
---
 fs/pstore/inode.c          |  3 +++
 fs/pstore/platform.c       | 51 ++++++++++++++++++++++++++++++++++++
 fs/pstore/ram.c            | 65 +++++++++++++++++++++++++++++++++++++++++-----
 fs/pstore/ram_core.c       |  2 ++
 include/linux/pstore.h     |  2 ++
 include/linux/pstore_ram.h |  1 +
 6 files changed, 117 insertions(+), 7 deletions(-)

diff --git a/fs/pstore/inode.c b/fs/pstore/inode.c
index 54749938c9f..527721fab2d 100644
--- a/fs/pstore/inode.c
+++ b/fs/pstore/inode.c
@@ -331,6 +331,9 @@ int pstore_mkfile(enum pstore_type_id type, char *psname, u64 id, int count,
 	case PSTORE_TYPE_PMSG:
 		scnprintf(name, sizeof(name), "pmsg-%s-%lld", psname, id);
 		break;
+	case PSTORE_TYPE_ANNOTATE:
+		scnprintf(name, sizeof(name), "annotate-%s-%lld", psname, id);
+		break;
 	case PSTORE_TYPE_UNKNOWN:
 		scnprintf(name, sizeof(name), "unknown-%s-%lld", psname, id);
 		break;
diff --git a/fs/pstore/platform.c b/fs/pstore/platform.c
index f0198aa88da..b4bcee8aff8 100644
--- a/fs/pstore/platform.c
+++ b/fs/pstore/platform.c
@@ -18,6 +18,8 @@
  *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
 #include <linux/atomic.h>
 #include <linux/types.h>
 #include <linux/errno.h>
@@ -177,6 +179,53 @@ static struct kmsg_dumper pstore_dumper = {
 	.dump = pstore_dump,
 };
 
+
+
+/* Export function to save device specific power up
+ * data
+ *
+ */
+
+int  pstore_annotate(const char *buf)
+{
+	unsigned cnt = strlen(buf);
+	const char *end = buf + cnt;
+
+	if (!psinfo) {
+		pr_warn("device not present!\n");
+		return -ENODEV;
+	}
+
+	while (buf < end) {
+		unsigned long flags;
+		int ret;
+		u64 id;
+
+		if (cnt > psinfo->bufsize)
+			cnt = psinfo->bufsize;
+
+		if (oops_in_progress) {
+			if (!spin_trylock_irqsave(&psinfo->buf_lock, flags))
+				break;
+		} else {
+			spin_lock_irqsave(&psinfo->buf_lock, flags);
+		}
+		memcpy(psinfo->buf, buf, cnt);
+		ret = psinfo->write(PSTORE_TYPE_ANNOTATE, 0, &id, 0, 0,
+			cnt, psinfo);
+		spin_unlock_irqrestore(&psinfo->buf_lock, flags);
+
+		pr_debug("ret %d wrote bytes %d\n", ret, cnt);
+		buf += cnt;
+		cnt = end - buf;
+	}
+
+	return 0;
+
+}
+EXPORT_SYMBOL_GPL(pstore_annotate);
+
+
 #ifdef CONFIG_PSTORE_CONSOLE
 static void pstore_console_write(struct console *con, const char *s, unsigned c)
 {
@@ -310,6 +359,7 @@ int pstore_register(struct pstore_info *psi)
 			msecs_to_jiffies(pstore_update_ms);
 		add_timer(&pstore_timer);
 	}
+	pr_info("psi registered\n");
 
 	return 0;
 }
@@ -346,6 +396,7 @@ void pstore_get_records(int quiet)
 		buf = NULL;
 		if (rc && (rc != -EEXIST || !quiet))
 			failed++;
+		pr_info("Found record type %d, psi name %s\n", type, psi->name);
 	}
 	if (psi->close)
 		psi->close(psi);
diff --git a/fs/pstore/ram.c b/fs/pstore/ram.c
index 394e23bc096..903d0532e82 100644
--- a/fs/pstore/ram.c
+++ b/fs/pstore/ram.c
@@ -56,6 +56,10 @@ static ulong ramoops_pmsg_size = MIN_MEM_SIZE;
 module_param_named(pmsg_size, ramoops_pmsg_size, ulong, 0400);
 MODULE_PARM_DESC(pmsg_size, "size of user space message log");
 
+static ulong ramoops_annotate_size = MIN_MEM_SIZE;
+module_param_named(annotate_size, ramoops_annotate_size, ulong, 0400);
+MODULE_PARM_DESC(annotate_size, "size of annotation");
+
 static ulong mem_address;
 module_param(mem_address, ulong, 0400);
 MODULE_PARM_DESC(mem_address,
@@ -88,6 +92,7 @@ struct ramoops_context {
 	struct persistent_ram_zone *cprz;
 	struct persistent_ram_zone *fprz;
 	struct persistent_ram_zone *mprz;
+	struct persistent_ram_zone *aprz;
 	phys_addr_t phys_addr;
 	unsigned long size;
 	unsigned int memtype;
@@ -95,6 +100,7 @@ struct ramoops_context {
 	size_t console_size;
 	size_t ftrace_size;
 	size_t pmsg_size;
+	size_t annotate_size;
 	int dump_oops;
 	struct persistent_ram_ecc_info ecc_info;
 	unsigned int max_dump_cnt;
@@ -104,6 +110,7 @@ struct ramoops_context {
 	unsigned int console_read_cnt;
 	unsigned int ftrace_read_cnt;
 	unsigned int pmsg_read_cnt;
+	unsigned int annotate_read_cnt;
 	struct pstore_info pstore;
 };
 
@@ -118,6 +125,7 @@ static int ramoops_pstore_open(struct pstore_info *psi)
 	cxt->console_read_cnt = 0;
 	cxt->ftrace_read_cnt = 0;
 	cxt->pmsg_read_cnt = 0;
+	cxt->annotate_read_cnt = 0;
 	return 0;
 }
 
@@ -178,6 +186,9 @@ static ssize_t ramoops_pstore_read(u64 *id, enum pstore_type_id *type,
 		prz = ramoops_get_next_prz(&cxt->mprz, &cxt->pmsg_read_cnt,
 					   1, id, type, PSTORE_TYPE_PMSG, 0);
 	if (!prz_ok(prz))
+		prz = ramoops_get_next_prz(&cxt->aprz, &cxt->annotate_read_cnt,
+					1, id, type, PSTORE_TYPE_ANNOTATE, 0);
+	if (!prz_ok(prz))
 		return 0;
 
 	/* TODO(kees): Bogus time for the moment. */
@@ -245,6 +256,11 @@ static int notrace ramoops_pstore_write_buf(enum pstore_type_id type,
 			return -ENOMEM;
 		persistent_ram_write(cxt->mprz, buf, size);
 		return 0;
+	} else if (type == PSTORE_TYPE_ANNOTATE) {
+		if (!cxt->aprz)
+			return -ENOMEM;
+		persistent_ram_write(cxt->aprz, buf, size);
+		return 0;
 	}
 
 	if (type != PSTORE_TYPE_DMESG)
@@ -322,6 +338,9 @@ static int ramoops_pstore_erase(enum pstore_type_id type, u64 id, int count,
 	case PSTORE_TYPE_PMSG:
 		prz = cxt->mprz;
 		break;
+	case PSTORE_TYPE_ANNOTATE:
+		prz = cxt->aprz;
+		break;
 	default:
 		return -EINVAL;
 	}
@@ -450,7 +469,7 @@ static void  ramoops_of_init(struct platform_device *pdev)
 	const struct device *dev = &pdev->dev;
 	struct ramoops_platform_data *pdata;
 	struct device_node *np = pdev->dev.of_node;
-	u32 start, size, console;
+	u32 start, size, console, annotate = 0;
 	u32 record, oops;
 	int ret;
 
@@ -484,11 +503,17 @@ static void  ramoops_of_init(struct platform_device *pdev)
 	if (ret)
 		pr_info("oops not configured");
 
+	ret = of_property_read_u32(np, "android,ramoops-annotate-size",
+				&annotate);
+	if (ret)
+		pr_info("annotation buffer not configured");
+
 	pdata->mem_address = start;
 	pdata->mem_size = size;
 	pdata->console_size = console;
 	pdata->record_size = record;
 	pdata->dump_oops = (int)oops;
+	pdata->annotate_size = annotate;
 }
 #else
 static inline void ramoops_of_init(struct platform_device *pdev)
@@ -525,22 +550,30 @@ static int ramoops_probe(struct platform_device *pdev)
 		goto fail_out;
 
 	if (!pdata->mem_size || (!pdata->record_size && !pdata->console_size &&
-			!pdata->ftrace_size && !pdata->pmsg_size)) {
+			!pdata->ftrace_size && !pdata->pmsg_size &&
+			!pdata->annotate_size)) {
 		pr_err("The memory size and the record/console size must be "
 			"non-zero\n");
 		goto fail_out;
 	}
 
-	if (!is_power_of_2(pdata->mem_size))
+	if (pdata->mem_size && !is_power_of_2(pdata->mem_size))
 		pdata->mem_size = rounddown_pow_of_two(pdata->mem_size);
-	if (!is_power_of_2(pdata->record_size))
+	if (pdata->record_size && !is_power_of_2(pdata->record_size))
 		pdata->record_size = rounddown_pow_of_two(pdata->record_size);
-	if (!is_power_of_2(pdata->console_size))
+	if (pdata->console_size && !is_power_of_2(pdata->console_size))
 		pdata->console_size = rounddown_pow_of_two(pdata->console_size);
-	if (!is_power_of_2(pdata->ftrace_size))
+	if (pdata->ftrace_size && !is_power_of_2(pdata->ftrace_size))
 		pdata->ftrace_size = rounddown_pow_of_two(pdata->ftrace_size);
 	if (pdata->pmsg_size && !is_power_of_2(pdata->pmsg_size))
 		pdata->pmsg_size = rounddown_pow_of_two(pdata->pmsg_size);
+	if (pdata->annotate_size && !is_power_of_2(pdata->annotate_size))
+		pdata->annotate_size =
+			rounddown_pow_of_two(pdata->annotate_size);
+
+	pr_debug("All %#lx record %#lx console %#lx ftrace %#lx annotate %#lx\n",
+		pdata->mem_size, pdata->record_size, pdata->console_size,
+		pdata->ftrace_size, pdata->annotate_size);
 
 	cxt->size = pdata->mem_size;
 	cxt->phys_addr = pdata->mem_address;
@@ -549,13 +582,14 @@ static int ramoops_probe(struct platform_device *pdev)
 	cxt->console_size = pdata->console_size;
 	cxt->ftrace_size = pdata->ftrace_size;
 	cxt->pmsg_size = pdata->pmsg_size;
+	cxt->annotate_size = pdata->annotate_size;
 	cxt->dump_oops = pdata->dump_oops;
 	cxt->ecc_info = pdata->ecc_info;
 
 	paddr = cxt->phys_addr;
 
 	dump_mem_sz = cxt->size - cxt->console_size - cxt->ftrace_size
-			- cxt->pmsg_size;
+			- cxt->pmsg_size - cxt->annotate_size;
 	err = ramoops_init_przs(dev, cxt, &paddr, dump_mem_sz);
 	if (err)
 		goto fail_out;
@@ -574,6 +608,19 @@ static int ramoops_probe(struct platform_device *pdev)
 	if (err)
 		goto fail_init_mprz;
 
+	err = ramoops_init_prz(dev, cxt, &cxt->aprz, &paddr,
+			       cxt->annotate_size, 0);
+	if (err)
+		goto fail_init_aprz;
+
+	if (!cxt->przs && !cxt->cprz && !cxt->fprz && !cxt->mprz && !cxt->aprz) {
+		pr_err("memory size too small, minimum is %zu\n",
+			cxt->console_size + cxt->record_size +
+			cxt->ftrace_size + cxt->pmsg_size + cxt->annotate_size);
+		err = -EINVAL;
+		goto fail_cnt;
+	}
+
 	cxt->pstore.data = cxt;
 	/*
 	 * Console can handle any buffer size, so prefer LOG_LINE_MAX. If we
@@ -618,6 +665,9 @@ fail_buf:
 fail_clear:
 	cxt->pstore.bufsize = 0;
 	cxt->max_dump_cnt = 0;
+fail_cnt:
+	kfree(cxt->aprz);
+fail_init_aprz:
 	kfree(cxt->mprz);
 fail_init_mprz:
 	kfree(cxt->fprz);
@@ -680,6 +730,7 @@ static void ramoops_register_dummy(void)
 	dummy_data->console_size = ramoops_console_size;
 	dummy_data->ftrace_size = ramoops_ftrace_size;
 	dummy_data->pmsg_size = ramoops_pmsg_size;
+	dummy_data->annotate_size = ramoops_annotate_size;
 	dummy_data->dump_oops = dump_oops;
 	/*
 	 * For backwards compatibility ramoops.ecc=1 means 16 bytes ECC
diff --git a/fs/pstore/ram_core.c b/fs/pstore/ram_core.c
index 4556580605d..66636ef9a14 100644
--- a/fs/pstore/ram_core.c
+++ b/fs/pstore/ram_core.c
@@ -499,6 +499,8 @@ static int persistent_ram_buffer_map(phys_addr_t start, phys_addr_t size,
 
 	prz->buffer = prz->vaddr + offset_in_page(start);
 	prz->buffer_size = size - sizeof(struct persistent_ram_buffer);
+	pr_info("persistent_ram: paddr: %p, vaddr: %p, buf size = 0x%zx\n",
+		(void *)prz->paddr, (void *)prz->vaddr, prz->buffer_size);
 
 	return 0;
 }
diff --git a/include/linux/pstore.h b/include/linux/pstore.h
index 014bc56c123..29a89b28a50 100644
--- a/include/linux/pstore.h
+++ b/include/linux/pstore.h
@@ -37,6 +37,7 @@ enum pstore_type_id {
 	PSTORE_TYPE_CONSOLE	= 2,
 	PSTORE_TYPE_FTRACE	= 3,
 	PSTORE_TYPE_PMSG	= 4, /* Backport: 7 in upstream 3.19.0-rc3 */
+	PSTORE_TYPE_ANNOTATE	= 5,
 	PSTORE_TYPE_UNKNOWN	= 255
 };
 
@@ -75,6 +76,7 @@ struct pstore_info {
 #ifdef CONFIG_PSTORE
 extern int pstore_register(struct pstore_info *);
 extern bool pstore_cannot_block_path(enum kmsg_dump_reason reason);
+extern int pstore_annotate(const char *buf);
 #else
 static inline int
 pstore_register(struct pstore_info *psi)
diff --git a/include/linux/pstore_ram.h b/include/linux/pstore_ram.h
index 45ac5a0d29e..14ca1873094 100644
--- a/include/linux/pstore_ram.h
+++ b/include/linux/pstore_ram.h
@@ -87,6 +87,7 @@ struct ramoops_platform_data {
 	unsigned long	console_size;
 	unsigned long	ftrace_size;
 	unsigned long	pmsg_size;
+	unsigned long	annotate_size;
 	int		dump_oops;
 	struct persistent_ram_ecc_info ecc_info;
 };
-- 
2.11.0

