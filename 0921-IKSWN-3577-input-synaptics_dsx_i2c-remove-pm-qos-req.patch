From 415cf44e3235ffdf84e779c7a7995b55ee691212 Mon Sep 17 00:00:00 2001
From: Alexander Filonenko <alexf@motorola.com>
Date: Thu, 8 Sep 2016 17:50:57 +0800
Subject: [PATCH 921/959] IKSWN-3577 input: synaptics_dsx_i2c: remove pm qos
 request

Remove default low latency PM QoS request and refactor the feature
to be configurable via device tree.

Propagation of IKSWM-57118.

Change-Id: Icf297d33aae3445590184704485d21d1c584d32c
Signed-off-by: Alexander Filonenko <alexf@motorola.com>
Reviewed-on: https://gerrit.mot.com/896836
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Konstantin Makariev <kmakariev@motorola.com>
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/input/touchscreen/synaptics_dsx_i2c.c | 59 +++++++++++++++++----------
 drivers/input/touchscreen/synaptics_dsx_i2c.h |  2 +-
 2 files changed, 39 insertions(+), 22 deletions(-)

diff --git a/drivers/input/touchscreen/synaptics_dsx_i2c.c b/drivers/input/touchscreen/synaptics_dsx_i2c.c
index bdb3b6f79b9..7f5eb90889b 100644
--- a/drivers/input/touchscreen/synaptics_dsx_i2c.c
+++ b/drivers/input/touchscreen/synaptics_dsx_i2c.c
@@ -50,10 +50,6 @@
 #define INPUT_PHYS_NAME "synaptics_dsx_i2c/input0"
 #define TYPE_B_PROTOCOL
 
-#define IRQ_DISPATCH_LATENCY	5000
-
-static int latency_in_effect = IRQ_DISPATCH_LATENCY;
-
 #define RMI4_WAIT_READY 0
 #define RMI4_HW_RESET 1
 #define RMI4_SW_RESET 2
@@ -1709,6 +1705,12 @@ static struct synaptics_dsx_platform_data *
 		rmi4_data->purge_enabled = true;
 	}
 
+	retval = of_property_read_u32(np, "synaptics,pm-qos-latency",
+		&rmi4_data->pm_qos_latency);
+	if (!retval)
+		pr_notice("pm qos latency is %d\n",
+			rmi4_data->pm_qos_latency);
+
 	retval = of_property_read_u32(np,
 				"synaptics,aod-multi-touch", &u32_data);
 	if (!retval) {
@@ -2112,10 +2114,10 @@ static ssize_t synaptics_rmi4_drv_irq_show(struct device *dev,
 static ssize_t synaptics_rmi4_drv_irq_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count);
 
-static ssize_t synaptics_rmi4_pm_opt_show(struct device *dev,
+static ssize_t synaptics_rmi4_pm_qos_show(struct device *dev,
 		struct device_attribute *attr, char *buf);
 
-static ssize_t synaptics_rmi4_pm_opt_store(struct device *dev,
+static ssize_t synaptics_rmi4_pm_qos_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count);
 
 static ssize_t synaptics_rmi4_hw_irqstat_show(struct device *dev,
@@ -2318,9 +2320,9 @@ static struct device_attribute attrs[] = {
 	__ATTR(tsi, S_IRUSR | S_IRGRP,
 			synaptics_rmi4_ud_show,
 			synaptics_rmi4_store_error),
-	__ATTR(pm_opt, (S_IRUSR | S_IRGRP | S_IWUSR | S_IWGRP),
-			synaptics_rmi4_pm_opt_show,
-			synaptics_rmi4_pm_opt_store),
+	__ATTR(pm_qos, (S_IRUSR | S_IRGRP | S_IWUSR | S_IWGRP),
+			synaptics_rmi4_pm_qos_show,
+			synaptics_rmi4_pm_qos_store),
 };
 
 struct synaptics_exp_fn_ctrl {
@@ -3434,16 +3436,21 @@ static ssize_t synaptics_rmi4_drv_irq_store(struct device *dev,
 	return count;
 }
 
-static ssize_t synaptics_rmi4_pm_opt_show(struct device *dev,
+static ssize_t synaptics_rmi4_pm_qos_show(struct device *dev,
 		struct device_attribute *attr, char *buf)
 {
-	return scnprintf(buf, PAGE_SIZE, "%d\n", latency_in_effect);
+	struct synaptics_rmi4_data *rmi4_data =
+					i2c_get_clientdata(to_i2c_client(dev));
+	return scnprintf(buf, PAGE_SIZE, "%d\n", rmi4_data->pm_qos_latency);
 }
 
-static ssize_t synaptics_rmi4_pm_opt_store(struct device *dev,
+static ssize_t synaptics_rmi4_pm_qos_store(struct device *dev,
 		struct device_attribute *attr, const char *buf, size_t count)
 {
+	struct synaptics_rmi4_data *rmi4_data =
+					i2c_get_clientdata(to_i2c_client(dev));
 	unsigned long value = 0;
+	uint32_t old;
 	int err = 0;
 
 	err = kstrtoul(buf, 10, &value);
@@ -3452,17 +3459,24 @@ static ssize_t synaptics_rmi4_pm_opt_store(struct device *dev,
 		return -EINVAL;
 	}
 
+	old = rmi4_data->pm_qos_latency;
+
 	switch (value) {
 	case 0:
-		latency_in_effect = PM_QOS_DEFAULT_VALUE;
-		break;
-	case 1:
-		latency_in_effect = IRQ_DISPATCH_LATENCY;
+		rmi4_data->pm_qos_latency = PM_QOS_DEFAULT_VALUE;
 		break;
 	default:
-		pr_err("Invalid value\n");
-		return -EINVAL;
+		rmi4_data->pm_qos_latency = value;
 	}
+
+	if (old != rmi4_data->pm_qos_latency &&
+			atomic_read(&rmi4_data->touch_stopped) == 0) {
+		pm_qos_update_request(&rmi4_data->pm_qos_irq,
+			rmi4_data->pm_qos_latency);
+		pr_debug("set pm qos latency to %d\n",
+			rmi4_data->pm_qos_latency);
+	}
+
 	return count;
 }
 
@@ -6982,6 +6996,8 @@ static int synaptics_rmi4_probe(struct i2c_client *client,
 
 	/* assign pointer to client structure right away for further use */
 	rmi4_data->i2c_client = client;
+
+	rmi4_data->pm_qos_latency = PM_QOS_DEFAULT_VALUE;
 	rmi4_data->event_blank = FB_EARLY_EVENT_BLANK;
 
 	if (client->dev.of_node)
@@ -7240,7 +7256,7 @@ static int synaptics_rmi4_probe(struct i2c_client *client,
 	rmi4_data->pm_qos_irq.type = PM_QOS_REQ_AFFINE_IRQ;
 	rmi4_data->pm_qos_irq.irq = rmi4_data->irq;
 	pm_qos_add_request(&rmi4_data->pm_qos_irq, PM_QOS_CPU_DMA_LATENCY,
-			latency_in_effect);
+			rmi4_data->pm_qos_latency);
 	return retval;
 
 err_sysfs:
@@ -7650,8 +7666,9 @@ static int synaptics_rmi4_resume(struct device *dev)
 	if (atomic_cmpxchg(&rmi4_data->touch_stopped, 1, 0) == 0)
 		return 0;
 
-	pm_qos_update_request(&rmi4_data->pm_qos_irq, latency_in_effect);
-	pr_debug("set pm_qos latency %d\n", latency_in_effect);
+	pm_qos_update_request(&rmi4_data->pm_qos_irq,
+		rmi4_data->pm_qos_latency);
+	pr_debug("set pm_qos latency %d\n", rmi4_data->pm_qos_latency);
 
 	synaptics_dsx_resumeinfo_start(rmi4_data);
 
diff --git a/drivers/input/touchscreen/synaptics_dsx_i2c.h b/drivers/input/touchscreen/synaptics_dsx_i2c.h
index d43c58f441c..7720ec7afbe 100644
--- a/drivers/input/touchscreen/synaptics_dsx_i2c.h
+++ b/drivers/input/touchscreen/synaptics_dsx_i2c.h
@@ -582,7 +582,7 @@ struct synaptics_rmi4_data {
 
 	struct mutex rmi4_exp_init_mutex;
 	unsigned long event_blank;
-	int pm_qos_latency;
+	uint32_t pm_qos_latency;
 	struct pm_qos_request pm_qos_irq;
 
 	bool touch_data_contiguous;
-- 
2.11.0

