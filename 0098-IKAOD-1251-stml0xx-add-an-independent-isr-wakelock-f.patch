From a9e8f8908cacf31e280cb618c15e6ec3b73b82a6 Mon Sep 17 00:00:00 2001
From: Miao Song <msong2@motorola.com>
Date: Fri, 21 Nov 2014 15:33:37 -0600
Subject: [PATCH 098/959] IKAOD-1251: stml0xx: add an independent isr wakelock
 for SH

Since the original wakelock is shared by multiple files, using a
different wakelock for aod only to prevent the unexpected unlock
operations of the original wakelock from the other files.

Change-Id: I5847a647ea63d7e70521aadec4bf778f4ce60d59
Signed-off-by: Miao Song <msong2@motorola.com>
Reviewed-on: http://gerrit.mot.com/691734
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Robert Wiegand <Robert.P.Wiegand@motorola.com>
Reviewed-by: Jason Jae Hyun Koh <jasonkoh@motorola.com>
Reviewed-by: George Standish <george.standish@motorola.com>
Reviewed-by: Joseph Swantek <jswantek@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/misc/stml0xx/stml0xx_core.c     | 6 ++++++
 drivers/misc/stml0xx/stml0xx_wake_irq.c | 2 +-
 include/linux/stml0xx.h                 | 1 +
 3 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/drivers/misc/stml0xx/stml0xx_core.c b/drivers/misc/stml0xx/stml0xx_core.c
index 441ab439f67..99c05500bf6 100644
--- a/drivers/misc/stml0xx/stml0xx_core.c
+++ b/drivers/misc/stml0xx/stml0xx_core.c
@@ -805,6 +805,8 @@ static int stml0xx_probe(struct spi_device *spi)
 
 	mutex_lock(&ps_stml0xx->lock);
 	wake_lock_init(&ps_stml0xx->wakelock, WAKE_LOCK_SUSPEND, "stml0xx");
+	wake_lock_init(&ps_stml0xx->wake_sensor_wakelock, WAKE_LOCK_SUSPEND,
+		       "stml0xx_wake_sensor");
 	wake_lock_init(&ps_stml0xx->reset_wakelock, WAKE_LOCK_SUSPEND,
 		       "stml0xx_reset");
 
@@ -1015,6 +1017,8 @@ err1:
 	mutex_destroy(&ps_stml0xx->lock);
 	wake_unlock(&ps_stml0xx->wakelock);
 	wake_lock_destroy(&ps_stml0xx->wakelock);
+	wake_unlock(&ps_stml0xx->wake_sensor_wakelock);
+	wake_lock_destroy(&ps_stml0xx->wake_sensor_wakelock);
 	wake_unlock(&ps_stml0xx->reset_wakelock);
 	wake_lock_destroy(&ps_stml0xx->reset_wakelock);
 	stml0xx_gpio_free(pdata);
@@ -1065,6 +1069,8 @@ static int stml0xx_remove(struct spi_device *spi)
 	mutex_destroy(&ps_stml0xx->lock);
 	wake_unlock(&ps_stml0xx->wakelock);
 	wake_lock_destroy(&ps_stml0xx->wakelock);
+	wake_unlock(&ps_stml0xx->wake_sensor_wakelock);
+	wake_lock_destroy(&ps_stml0xx->wake_sensor_wakelock);
 	wake_unlock(&ps_stml0xx->reset_wakelock);
 	wake_lock_destroy(&ps_stml0xx->reset_wakelock);
 	disable_irq_wake(ps_stml0xx->irq);
diff --git a/drivers/misc/stml0xx/stml0xx_wake_irq.c b/drivers/misc/stml0xx/stml0xx_wake_irq.c
index e255f5b2d2e..0e9eea60956 100644
--- a/drivers/misc/stml0xx/stml0xx_wake_irq.c
+++ b/drivers/misc/stml0xx/stml0xx_wake_irq.c
@@ -62,7 +62,7 @@ irqreturn_t stml0xx_wake_isr(int irq, void *dev)
 	if (stml0xx_irq_disable)
 		return IRQ_HANDLED;
 
-	wake_lock_timeout(&ps_stml0xx->wakelock, HZ);
+	wake_lock_timeout(&ps_stml0xx->wake_sensor_wakelock, HZ);
 
 	queue_work(ps_stml0xx->irq_work_queue, &ps_stml0xx->irq_wake_work);
 	return IRQ_HANDLED;
diff --git a/include/linux/stml0xx.h b/include/linux/stml0xx.h
index 56fc78e02d8..5d3c4587697 100644
--- a/include/linux/stml0xx.h
+++ b/include/linux/stml0xx.h
@@ -581,6 +581,7 @@ struct stml0xx_data {
 	struct work_struct initialize_work;
 	struct workqueue_struct *irq_work_queue;
 	struct wake_lock wakelock;
+	struct wake_lock wake_sensor_wakelock;
 	struct wake_lock reset_wakelock;
 	struct input_dev *input_dev;
 
-- 
2.11.0

