From b94ac3f8de73b18ba6a22572efd0df153f63b738 Mon Sep 17 00:00:00 2001
From: Kenny Kessler <kenny.kessler@motorola.com>
Date: Fri, 12 Jun 2015 08:36:41 -0500
Subject: [PATCH 266/959] IKSWL-22277: power: smbcharger-mmi: Voltage Check

Add a Voltage Threshold check when transitioning
through the Step Charge States.  There is a 50 mV
buffer given to ensure it gets close enough before
switching states.

Change-Id: I5400db9ab4155990eb40035ce5f91436e2363a25
Signed-off-by: Kenny Kessler <kenny.kessler@motorola.com>
Reviewed-on: http://gerrit.mot.com/756873
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Ravikumar Vembu <raviv@motorola.com>
Reviewed-by: Kumar Venkatesh <kumarv@motorola.com>
Reviewed-by: Bharathraj Nagaraju <bnagar@motorola.com>
Reviewed-by: Jason Knopsnyder <jasonk@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/power/qpnp-smbcharger-mmi.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/drivers/power/qpnp-smbcharger-mmi.c b/drivers/power/qpnp-smbcharger-mmi.c
index 9362a574b73..3b98de012cd 100644
--- a/drivers/power/qpnp-smbcharger-mmi.c
+++ b/drivers/power/qpnp-smbcharger-mmi.c
@@ -6999,6 +6999,7 @@ static bool smbchg_check_and_kick_aicl(struct smbchg_chip *chip)
 #define STEPCHG_CURR_ADJ 200
 #define DEMO_MODE_MAX_SOC 35
 #define DEMO_MODE_HYS_SOC 5
+#define HYST_STEP_MV 50
 static void smbchg_heartbeat_work(struct work_struct *work)
 {
 	struct smbchg_chip *chip = container_of(work,
@@ -7049,7 +7050,8 @@ static void smbchg_heartbeat_work(struct work_struct *work)
 			chip->stepchg_state = STEP_MAX;
 		chip->stepchg_state_holdoff = 0;
 	} else if ((chip->stepchg_state == STEP_MAX) &&
-		   (batt_ma < 0) && (chip->usb_present)) {
+		   (batt_ma < 0) && (chip->usb_present) &&
+		   ((batt_mv + HYST_STEP_MV) >= chip->stepchg_voltage_mv)) {
 		batt_ma *= -1;
 
 		index = smbchg_get_pchg_current_map_index(chip);
@@ -7068,7 +7070,9 @@ static void smbchg_heartbeat_work(struct work_struct *work)
 		else
 			chip->stepchg_state_holdoff = 0;
 	} else if ((chip->stepchg_state == STEP_ONE) &&
-		   (batt_ma < 0) && (chip->usb_present)) {
+		   (batt_ma < 0) && (chip->usb_present) &&
+		   ((batt_mv + HYST_STEP_MV) >=
+		    chip->stepchg_max_voltage_mv)) {
 		batt_ma *= -1;
 		if ((batt_ma <= chip->stepchg_taper_ma) &&
 		    (chip->allowed_fastchg_current_ma >=
-- 
2.11.0

