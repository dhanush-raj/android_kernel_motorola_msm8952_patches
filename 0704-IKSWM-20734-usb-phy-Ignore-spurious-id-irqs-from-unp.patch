From aae860973905753337d1216041220eb4cf604008 Mon Sep 17 00:00:00 2001
From: Xuehui Ye <yexh1@motorola.com>
Date: Wed, 24 Feb 2016 15:58:13 +0800
Subject: [PATCH 704/959] IKSWM-20734: usb: phy: Ignore spurious id irqs from
 unpowered sources

Certain chargers in the unpowered state also trigger host mode detection.
This causes the phone to go into host mode and interfere with operation of
the power source (such as 12V Car Power Adapters).
Hence Measure ID voltage when the id irq is triggered and
disregard spurious id irqs from unpowered connections if
the id voltage is less than the id_gnd threshold.

Change-Id: I49baa73ad67c3e7f7ca1e791c8bbf0a3656a34c5
Signed-off-by: Xuehui Ye <yexh1@motorola.com>
Reviewed-on: http://gerrit.mot.com/825290
SME-Granted: SME Approvals Granted
SLTApproved: Slta Waiver <sltawvr@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Reviewed-by: Ravikumar Vembu <raviv@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 drivers/usb/phy/phy-msm-usb.c | 42 ++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 40 insertions(+), 2 deletions(-)

diff --git a/drivers/usb/phy/phy-msm-usb.c b/drivers/usb/phy/phy-msm-usb.c
index fea4169e93e..7f8368a8c8f 100644
--- a/drivers/usb/phy/phy-msm-usb.c
+++ b/drivers/usb/phy/phy-msm-usb.c
@@ -76,6 +76,9 @@
 
 #define USB_SUSPEND_DELAY_TIME	(500 * HZ/1000) /* 500 msec */
 
+#define ID_GND_THRESH           300000  /* 300 mV */
+#define ID_VOLTS_DEFAULT        1000000  /* 1000 mV */
+
 #define USB_DEFAULT_SYSTEM_CLOCK 80000000	/* 80 MHz */
 
 #define PM_QOS_SAMPLE_SEC	2
@@ -4476,6 +4479,32 @@ static int msm_otg_enable_ext_id(struct msm_otg *motg, int enable)
 	return res;
 }
 
+static int msm_otg_get_ext_id_voltage(struct msm_otg *motg)
+{
+	int rc = 0;
+	int volts = ID_VOLTS_DEFAULT;
+	struct qpnp_vadc_result results;
+
+	if (IS_ERR_OR_NULL(motg->vadc_dev)) {
+		motg->vadc_dev = qpnp_get_vadc(motg->phy.dev, "usbin");
+		if (IS_ERR(motg->vadc_dev)) {
+			pr_err("ext_id_voltage - qpnp_get_vadc failed\n");
+			return volts;
+		}
+	}
+
+	msm_otg_enable_ext_id(motg, 0);
+	rc = qpnp_vadc_read(motg->vadc_dev, P_MUX1_1_1, &results);
+
+	if (rc)
+		pr_err("ext_id_voltage - Unable to read channel rc=%d\n", rc);
+	else
+		volts = results.physical;
+
+	msm_otg_enable_ext_id(motg, 1);
+
+	return volts;
+}
 static int set_host_mode_disable(const char *val, const struct kernel_param *kp)
 {
 	int res;
@@ -4521,9 +4550,18 @@ static void msm_id_status_w(struct work_struct *w)
 
 	if (motg->pdata->pmic_id_irq)
 		motg->id_state = msm_otg_read_pmic_id_state(motg);
-	else if (motg->ext_id_irq)
+	else if (motg->ext_id_irq) {
 		motg->id_state = gpio_get_value(motg->pdata->usb_id_gpio);
-	else if (motg->phy_irq)
+		if (!motg->id_state) {
+			int voltage = msm_otg_get_ext_id_voltage(motg);
+
+			pr_err("ext id voltage = %d microV\n", voltage);
+			if (voltage > ID_GND_THRESH) {
+				pr_err("Spurious ID GND, Ignore\n");
+				motg->id_state = 1;
+			}
+		}
+	} else if (motg->phy_irq)
 		motg->id_state = msm_otg_read_phy_id_state(motg);
 
 	if (motg->err_event_seen)
-- 
2.11.0

