From e8d48bdb4b743d3fe23b68ad76a67d9a3cbd30bf Mon Sep 17 00:00:00 2001
From: Paul Handrigan <Paul.Handrigan@cirrus.com>
Date: Thu, 14 Jan 2016 10:47:34 -0600
Subject: [PATCH 655/959] IKSWM-15398: ASoC: cs35l34: Fix device tree entries

Fixed device tree entries to correlate with the data sheet.

Change-Id: Ib4c8512f78c9966aaa8a2cfd4ba66c3befd49d15
Signed-off-by: Paul Handrigan <Paul.Handrigan@cirrus.com>
Reviewed-on: http://gerrit.mot.com/816720
SLTApproved: Slta Waiver <sltawvr@motorola.com>
SME-Granted: SME Approvals Granted
Reviewed-by: Igor Kovalenko <igork@motorola.com>
Tested-by: Jira Key <jirakey@motorola.com>
Submit-Approved: Jira Key <jirakey@motorola.com>
---
 sound/soc/codecs/cs35l34.c | 50 +++++++++-------------------------------------
 sound/soc/codecs/cs35l34.h | 21 +++++--------------
 2 files changed, 14 insertions(+), 57 deletions(-)

diff --git a/sound/soc/codecs/cs35l34.c b/sound/soc/codecs/cs35l34.c
index 3da7c27cc01..e9250ee4779 100644
--- a/sound/soc/codecs/cs35l34.c
+++ b/sound/soc/codecs/cs35l34.c
@@ -61,7 +61,6 @@ static const struct reg_default cs35l34_reg[] = {
 	{CS35L34_AMP_KEEP_ALIVE_CTL, 0x04},
 	{CS35L34_BST_CVTR_V_CTL, 0x00},
 	{CS35L34_BST_PEAK_I, 0x10},
-	{CS35L34_BST_LIMITING, 0x00},
 	{CS35L34_BST_RAMP_CTL, 0x06},
 	{CS35L34_BST_CONV_COEF_1, 0x0F},
 	{CS35L34_BST_CONV_COEF_2, 0x0C},
@@ -161,7 +160,6 @@ static bool cs35l34_readable_register(struct device *dev, unsigned int reg)
 	case	CS35L34_AMP_KEEP_ALIVE_CTL:
 	case	CS35L34_BST_CVTR_V_CTL:
 	case	CS35L34_BST_PEAK_I:
-	case	CS35L34_BST_LIMITING:
 	case	CS35L34_BST_RAMP_CTL:
 	case	CS35L34_BST_CONV_COEF_1:
 	case	CS35L34_BST_CONV_COEF_2:
@@ -575,20 +573,8 @@ static int cs35l34_probe(struct snd_soc_codec *codec)
 	/* Set Platform Data */
 	if (cs35l34->pdata.boost_ctl)
 		regmap_update_bits(cs35l34->regmap, CS35L34_BST_CVTR_V_CTL,
-				   CS35L34_BST_CTL_MASK,
-				cs35l34->pdata.boost_ctl);
-
-	if (cs35l34->pdata.gain_zc)
-		regmap_update_bits(cs35l34->regmap, CS35L34_CLASS_H_CTL,
-				   GAIN_CHG_ZC_MASK ,
-				cs35l34->pdata.gain_zc <<
-				GAIN_CHG_ZC_SHIFT);
-
-	if (cs35l34->pdata.amp_drv_sel)
-		regmap_update_bits(cs35l34->regmap, CS35L34_CLASS_H_CTL,
-				   AMP_DRV_SEL_MASK,
-				cs35l34->pdata.amp_drv_sel <<
-				AMP_DRV_SEL_SHIFT);
+			CS35L34_BST_CTL_MASK,
+			cs35l34->pdata.boost_ctl);
 
 	snd_soc_dapm_ignore_suspend(&codec->dapm, "SDIN");
 	snd_soc_dapm_ignore_suspend(&codec->dapm, "SDOUT");
@@ -599,6 +585,11 @@ static int cs35l34_probe(struct snd_soc_codec *codec)
 	snd_soc_dapm_ignore_suspend(&codec->dapm, "VSENSE");
 	snd_soc_dapm_ignore_suspend(&codec->dapm, "Main AMP");
 
+	if (cs35l34->pdata.gain_zc)
+		regmap_update_bits(cs35l34->regmap, CS35L34_PROTECT_CTL,
+			AMP_GAIN_ZC_MASK,
+			cs35l34->pdata.gain_zc << AMP_GAIN_ZC_SHIFT);
+
 	return ret;
 }
 
@@ -654,10 +645,8 @@ static int cs35l34_handle_of_data(struct i2c_client *i2c_client,
 
 	if (of_property_read_u32(np, "cirrus,boost-ctl", &val) >= 0)
 		pdata->boost_ctl = val;
-	if (of_property_read_u32(np, "cirrus,gain_zc", &val) >= 0)
+	if (of_property_read_u32(np, "cirrus,gain-zc", &val) >= 0)
 		pdata->gain_zc = val;
-	if (of_property_read_u32(np, "cirrus,amp_drv_sel", &val) >= 0)
-		pdata->amp_drv_sel = val;
 	if (of_property_read_u32(np, "cirrus,pred-brownout", &val) >= 0)
 		pdata->pred_brownout = val;
 	if (of_property_read_u32(np, "cirrus,vpbr-thld1", &val) >= 0)
@@ -710,10 +699,6 @@ static int cs35l34_handle_of_data(struct i2c_client *i2c_client,
 		pdata->boost_peak = val;
 	if (of_property_read_u32(np, "cirrus,boost-limit", &val) >= 0)
 		pdata->boost_limit = val;
-	if (of_property_read_u32(np, "cirrus,pdm-audio", &val) >= 0)
-		pdata->pdm_audio = val;
-	if (of_property_read_u32(np, "cirrus,pdm-chsel", &val) >= 0)
-		pdata->pdm_chsel = val;
 
 	return 0;
 }
@@ -799,7 +784,7 @@ static int cs35l34_i2c_probe(struct i2c_client *i2c_client,
 
 	dev_info(&i2c_client->dev,
 		"Cirrus Logic CS35l34 (%x), Revision: %02X\n",
-			devid, ret & 0xFF);
+		devid, ret & 0xFF);
 
 	/* Predictive and reactive brownout flags,inverted 0 is on 1 is off */
 	if (cs35l34->pdata.pred_brownout > 0) {
@@ -932,21 +917,6 @@ static int cs35l34_i2c_probe(struct i2c_client *i2c_client,
 		regmap_update_bits(cs35l34->regmap, CS35L34_BST_PEAK_I,
 				0x3F, cs35l34->pdata.boost_peak);
 	}
-	if (cs35l34->pdata.boost_limit > 0 &&
-				cs35l34->pdata.boost_limit <= 0xB7) {
-		regmap_update_bits(cs35l34->regmap, CS35L34_BST_LIMITING,
-				0xB7, cs35l34->pdata.boost_limit);
-	}
-	if (cs35l34->pdata.pdm_chsel >= 0 && cs35l34->pdata.pdm_audio >= 0) {
-		regmap_update_bits(cs35l34->regmap, CS35L34_AMP_INP_DRV_CTL,
-				0x80,
-				cs35l34->pdata.pdm_chsel > 1 ? 0x80 : 0x00);
-	}
-	if (cs35l34->pdata.pdm_audio >= 0) {
-		regmap_update_bits(cs35l34->regmap, CS35L34_AMP_INP_DRV_CTL,
-				0x40,
-				cs35l34->pdata.pdm_audio > 1 ? 0x40 : 0x00);
-	}
 
 	ret =  snd_soc_register_codec(&i2c_client->dev,
 			&soc_codec_dev_cs35l34, &cs35l34_dai, 1);
@@ -955,9 +925,7 @@ static int cs35l34_i2c_probe(struct i2c_client *i2c_client,
 			"%s: Register codec failed\n", __func__);
 		goto err;
 	}
-
 	return 0;
-
 err:
 	return ret;
 }
diff --git a/sound/soc/codecs/cs35l34.h b/sound/soc/codecs/cs35l34.h
index 6656285de67..bbf4a7f9d3e 100644
--- a/sound/soc/codecs/cs35l34.h
+++ b/sound/soc/codecs/cs35l34.h
@@ -36,7 +36,6 @@
 #define CS35L34_AMP_KEEP_ALIVE_CTL	0x1A	/* Amplifier Keep Alive Ctl */
 #define CS35L34_BST_CVTR_V_CTL		0x1D	/* Boost Conv Voltage Ctl */
 #define CS35L34_BST_PEAK_I		0x1E	/* Boost Conv Peak Current */
-#define CS35L34_BST_LIMITING		0x1F	/* Boost Conv L BST Limiting */
 #define CS35L34_BST_RAMP_CTL		0x20	/* Boost Conv Soft Ramp Ctl */
 #define CS35L34_BST_CONV_COEF_1		0x21	/* Boost Conv Coefficients 1 */
 #define CS35L34_BST_CONV_COEF_2		0x22	/* Boost Conv Coefficients 2 */
@@ -133,8 +132,6 @@
 #define PDN_TDM			1
 
 /* CS35L34_AMP_INP_DRV_CTL */
-#define PDM_CH_SEL		(1 << 7)
-#define PDM_AUDIO		(1 << 6)
 #define AMP_DRV_STR_SRC		(1 << 1)
 #define AMP_DRV_STR		1
 
@@ -145,9 +142,11 @@
 #define AMP_DIGSFT		(1 << 1)
 #define AMP_INV			1
 
-/* CS35L34_AMP_ANLG_GAIN_CTL */
+/* CS35L34_PROTECT_CTL */
 #define AMP_MUTE		(1 << 5)
 #define AMP_GAIN_ZC		(1 << 4)
+#define AMP_GAIN_ZC_MASK	0x10
+#define AMP_GAIN_ZC_SHIFT	4
 
 /* CS35L34_CLK_CTL */
 #define MCLKDIS			(1 << 7)
@@ -156,8 +155,8 @@
 #define INT_FS_RATE		(1 << 4)
 #define ADSP_FS			0xF
 
-/* CS35L34_PROTECT_CTL */
-#define ALIVE_WD_DIS		(3 << 2)
+/* CS35L34_AMP_KEEP_ALIVE_CTL */
+#define ALIVE_WD_DIS		(1 << 2)
 
 /* CS35L34_BST_CTL */
 #define BST_CTL_SRC		(1 << 7)
@@ -183,16 +182,6 @@
 #define DIGSFT			(1 << 4)
 #define DSR_RATE		0xF
 
-/* CS35L34_CLASSD_CTL */
-#define AMP_SD			(1 << 6)
-#define AMP_DRV_SEL_SRC		(1 << 5)
-#define AMP_DRV_SEL_MASK	0x10
-#define AMP_DRV_SEL_SHIFT	4
-#define AMP_CAL			(1 << 3)
-#define GAIN_CHG_ZC_MASK	0x04
-#define GAIN_CHG_ZC_SHIFT	2
-#define CLASS_D_CTL_MASK	0x3F
-
 /* CS35L34_AMP_CTL */
 #define AMP_GAIN		0xF0
 #define CAL_ERR_RLS		(1 << 3)
-- 
2.11.0

